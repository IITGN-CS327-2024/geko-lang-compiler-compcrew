
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ARREST ASSIGNMENT_OPERATOR BINARY_OPERATOR BOOLEAN CLOSE_BRACES CLOSE_PARENTHESIS COMPARISON_OPERATOR DEFINE ELEMENT_SEPERATOR ENTER FLAG FLAG GIVEN IDENTIFIER ITER LIST MAIN NUM NUM_LITERAL OPEN_BRACES OPEN_PARENTHESIS OTHER OTHERWISE POP REPEAT SEMICOLON SHOW SLICING_COLON STR STR STRING_LITERAL TEST TUP UNARY_OPERATOR VOID VOID WHILE YIELDprogram : function_definition_list DEFINE NUM MAIN OPEN_PARENTHESIS CLOSE_PARENTHESIS block YIELD NUM_LITERAL SEMICOLONfunction_definition_list : function_definition function_definition_list\n                                 | emptyfunction_definition : DEFINE function_type IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS blockfunction_type : NUM\n                     | STR\n                     | FLAG\n                     | VOIDparameter_list : parameter ELEMENT_SEPERATOR parameter_list\n                      | parameter\n                      | emptyparameter : data_type IDENTIFIERblock : OPEN_BRACES statement_list CLOSE_BRACESstatement_list : statement SEMICOLON statement_list\n                      | statement SEMICOLON\n                      | emptystatement : variable_declaration\n                 | assignment_statement\n                 | block\n                 | show_statement\n                 | conditional_statement\n                 | loop_statement\n                 | return_statement\n                 | try_catch_statement\n                 | function_call\n                 | enter_statementvariable_declaration : data_type IDENTIFIER ASSIGNMENT_OPERATOR expressionassignment_statement : IDENTIFIER ASSIGNMENT_OPERATOR expressionshow_statement : SHOW OPEN_PARENTHESIS expression expression_list CLOSE_PARENTHESISexpression_list : ELEMENT_SEPERATOR expression expression_list\n                       | emptyconditional_statement : GIVEN OPEN_PARENTHESIS expression CLOSE_PARENTHESIS block\n                             | GIVEN OPEN_PARENTHESIS expression CLOSE_PARENTHESIS block OTHERWISE block\n                             | GIVEN OPEN_PARENTHESIS expression CLOSE_PARENTHESIS block OTHER OPEN_PARENTHESIS expression CLOSE_PARENTHESIS block\n                             | GIVEN OPEN_PARENTHESIS expression CLOSE_PARENTHESIS block OTHERWISE block OTHER OPEN_PARENTHESIS expression CLOSE_PARENTHESIS blockloop_statement : ITER OPEN_PARENTHESIS expression SLICING_COLON expression SLICING_COLON expression CLOSE_PARENTHESIS block\n                      | WHILE OPEN_PARENTHESIS expression CLOSE_PARENTHESIS block\n                      | REPEAT block WHILE OPEN_PARENTHESIS expression CLOSE_PARENTHESISreturn_statement : YIELD expressiontry_catch_statement : TEST block POP STRING_LITERAL ARREST OPEN_PARENTHESIS STRING_LITERAL CLOSE_PARENTHESIS blockfunction_call : IDENTIFIER OPEN_PARENTHESIS argument_list CLOSE_PARENTHESISargument_list : expression ELEMENT_SEPERATOR argument_list\n                     | expression\n                     | emptyenter_statement : data_type IDENTIFIER ASSIGNMENT_OPERATOR ENTER OPEN_PARENTHESIS STRING_LITERAL CLOSE_PARENTHESISexpression : term\n                  | term BINARY_OPERATOR expression\n                  | term COMPARISON_OPERATOR termterm : factor\n            | factor BINARY_OPERATOR term\n            | factor COMPARISON_OPERATOR factorfactor : IDENTIFIER\n              | NUM_LITERAL\n              | STRING_LITERAL\n              | BOOLEAN\n              | OPEN_PARENTHESIS expression CLOSE_PARENTHESIS\n              | UNARY_OPERATOR expressionidentifier : IDENTIFIERnumber : NUM_LITERALstring : STRING_LITERALboolean : FLAGdata_type : NUM\n                 | STR\n                 | FLAG\n                 | LIST\n                 | TUP\n                 | VOIDempty :'
    
_lr_action_items = {'DEFINE':([0,2,4,5,12,34,60,],[3,6,3,-3,-2,-4,-13,]),'$end':([1,80,],[0,-1,]),'NUM':([3,6,16,30,33,61,],[8,13,22,22,22,22,]),'STR':([3,16,30,33,61,],[9,23,23,23,23,]),'FLAG':([3,16,30,33,61,],[10,24,24,24,24,]),'VOID':([3,16,30,33,61,],[11,27,27,27,27,]),'IDENTIFIER':([7,8,9,10,11,21,22,23,24,25,26,27,33,50,57,61,63,64,65,66,67,68,77,78,82,92,93,94,95,102,104,107,109,129,134,141,],[14,-5,-6,-7,-8,31,-62,-63,-64,-65,-66,-67,51,62,73,51,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'MAIN':([13,],[15,]),'OPEN_PARENTHESIS':([14,15,51,52,53,54,55,57,63,64,65,66,67,68,77,78,82,91,92,93,94,95,100,102,104,107,109,124,128,129,134,137,141,],[16,17,64,65,66,67,68,77,77,77,77,77,77,77,77,77,77,109,77,77,77,77,116,77,77,77,77,131,134,77,77,141,77,]),'CLOSE_PARENTHESIS':([16,17,18,19,20,30,31,35,64,71,72,73,74,75,76,84,85,86,87,88,90,96,97,102,103,105,110,111,112,113,114,117,119,123,125,126,135,136,138,145,],[-68,28,29,-10,-11,-68,-12,-9,-68,-46,-49,-52,-53,-54,-55,101,-43,-44,-68,106,108,114,-57,-68,118,-31,-47,-48,-50,-51,-56,-42,-68,130,132,-30,139,140,142,147,]),'LIST':([16,30,33,61,],[25,25,25,25,]),'TUP':([16,30,33,61,],[26,26,26,26,]),'ELEMENT_SEPERATOR':([19,31,71,72,73,74,75,76,85,87,97,110,111,112,113,114,119,],[30,-12,-46,-49,-52,-53,-54,-55,102,104,-57,-47,-48,-50,-51,-56,104,]),'OPEN_BRACES':([28,29,33,56,58,61,106,108,127,139,140,142,147,],[33,33,33,33,33,33,33,33,33,33,33,33,33,]),'YIELD':([32,33,60,61,],[36,57,-13,57,]),'CLOSE_BRACES':([33,37,39,61,81,],[-68,60,-16,-15,-14,]),'SHOW':([33,61,],[52,52,]),'GIVEN':([33,61,],[53,53,]),'ITER':([33,61,],[54,54,]),'WHILE':([33,60,61,69,],[55,-13,55,91,]),'REPEAT':([33,61,],[56,56,]),'TEST':([33,61,],[58,58,]),'NUM_LITERAL':([36,57,63,64,65,66,67,68,77,78,82,92,93,94,95,102,104,107,109,129,134,141,],[59,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'SEMICOLON':([38,40,41,42,43,44,45,46,47,48,49,59,60,70,71,72,73,74,75,76,83,97,99,101,110,111,112,113,114,118,120,122,130,132,133,143,144,146,148,],[61,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,80,-13,-39,-46,-49,-52,-53,-54,-55,-28,-57,-27,-41,-47,-48,-50,-51,-56,-29,-32,-37,-38,-45,-33,-36,-40,-34,-35,]),'ASSIGNMENT_OPERATOR':([51,62,],[63,82,]),'STRING_LITERAL':([57,63,64,65,66,67,68,77,78,82,92,93,94,95,98,102,104,107,109,116,129,131,134,141,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,115,75,75,75,75,125,75,136,75,75,]),'BOOLEAN':([57,63,64,65,66,67,68,77,78,82,92,93,94,95,102,104,107,109,129,134,141,],[76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'UNARY_OPERATOR':([57,63,64,65,66,67,68,77,78,82,92,93,94,95,102,104,107,109,129,134,141,],[78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'POP':([60,79,],[-13,98,]),'OTHERWISE':([60,120,],[-13,127,]),'OTHER':([60,120,133,],[-13,128,137,]),'SLICING_COLON':([71,72,73,74,75,76,89,97,110,111,112,113,114,121,],[-46,-49,-52,-53,-54,-55,107,-57,-47,-48,-50,-51,-56,129,]),'BINARY_OPERATOR':([71,72,73,74,75,76,97,110,111,112,113,114,],[92,94,-52,-53,-54,-55,-57,-47,-48,-50,-51,-56,]),'COMPARISON_OPERATOR':([71,72,73,74,75,76,97,110,111,112,113,114,],[93,95,-52,-53,-54,-55,-57,-47,-48,-50,-51,-56,]),'ENTER':([82,],[100,]),'ARREST':([115,],[124,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'function_definition_list':([0,4,],[2,12,]),'function_definition':([0,4,],[4,4,]),'empty':([0,4,16,30,33,61,64,87,102,119,],[5,5,20,20,39,39,86,105,86,105,]),'function_type':([3,],[7,]),'parameter_list':([16,30,],[18,35,]),'parameter':([16,30,],[19,19,]),'data_type':([16,30,33,61,],[21,21,50,50,]),'block':([28,29,33,56,58,61,106,108,127,139,140,142,147,],[32,34,42,69,79,42,120,122,133,143,144,146,148,]),'statement_list':([33,61,],[37,81,]),'statement':([33,61,],[38,38,]),'variable_declaration':([33,61,],[40,40,]),'assignment_statement':([33,61,],[41,41,]),'show_statement':([33,61,],[43,43,]),'conditional_statement':([33,61,],[44,44,]),'loop_statement':([33,61,],[45,45,]),'return_statement':([33,61,],[46,46,]),'try_catch_statement':([33,61,],[47,47,]),'function_call':([33,61,],[48,48,]),'enter_statement':([33,61,],[49,49,]),'expression':([57,63,64,65,66,67,68,77,78,82,92,102,104,107,109,129,134,141,],[70,83,85,87,88,89,90,96,97,99,110,85,119,121,123,135,138,145,]),'term':([57,63,64,65,66,67,68,77,78,82,92,93,94,102,104,107,109,129,134,141,],[71,71,71,71,71,71,71,71,71,71,71,111,112,71,71,71,71,71,71,71,]),'factor':([57,63,64,65,66,67,68,77,78,82,92,93,94,95,102,104,107,109,129,134,141,],[72,72,72,72,72,72,72,72,72,72,72,72,72,113,72,72,72,72,72,72,72,]),'argument_list':([64,102,],[84,117,]),'expression_list':([87,119,],[103,126,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> function_definition_list DEFINE NUM MAIN OPEN_PARENTHESIS CLOSE_PARENTHESIS block YIELD NUM_LITERAL SEMICOLON','program',10,'p_program','geko_parser.py',52),
  ('function_definition_list -> function_definition function_definition_list','function_definition_list',2,'p_function_definition_list','geko_parser.py',56),
  ('function_definition_list -> empty','function_definition_list',1,'p_function_definition_list','geko_parser.py',57),
  ('function_definition -> DEFINE function_type IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS block','function_definition',7,'p_function_definition','geko_parser.py',64),
  ('function_type -> NUM','function_type',1,'p_function_type','geko_parser.py',68),
  ('function_type -> STR','function_type',1,'p_function_type','geko_parser.py',69),
  ('function_type -> FLAG','function_type',1,'p_function_type','geko_parser.py',70),
  ('function_type -> VOID','function_type',1,'p_function_type','geko_parser.py',71),
  ('parameter_list -> parameter ELEMENT_SEPERATOR parameter_list','parameter_list',3,'p_parameter_list','geko_parser.py',75),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','geko_parser.py',76),
  ('parameter_list -> empty','parameter_list',1,'p_parameter_list','geko_parser.py',77),
  ('parameter -> data_type IDENTIFIER','parameter',2,'p_parameter','geko_parser.py',86),
  ('block -> OPEN_BRACES statement_list CLOSE_BRACES','block',3,'p_block','geko_parser.py',90),
  ('statement_list -> statement SEMICOLON statement_list','statement_list',3,'p_statement_list','geko_parser.py',94),
  ('statement_list -> statement SEMICOLON','statement_list',2,'p_statement_list','geko_parser.py',95),
  ('statement_list -> empty','statement_list',1,'p_statement_list','geko_parser.py',96),
  ('statement -> variable_declaration','statement',1,'p_statement','geko_parser.py',105),
  ('statement -> assignment_statement','statement',1,'p_statement','geko_parser.py',106),
  ('statement -> block','statement',1,'p_statement','geko_parser.py',107),
  ('statement -> show_statement','statement',1,'p_statement','geko_parser.py',108),
  ('statement -> conditional_statement','statement',1,'p_statement','geko_parser.py',109),
  ('statement -> loop_statement','statement',1,'p_statement','geko_parser.py',110),
  ('statement -> return_statement','statement',1,'p_statement','geko_parser.py',111),
  ('statement -> try_catch_statement','statement',1,'p_statement','geko_parser.py',112),
  ('statement -> function_call','statement',1,'p_statement','geko_parser.py',113),
  ('statement -> enter_statement','statement',1,'p_statement','geko_parser.py',114),
  ('variable_declaration -> data_type IDENTIFIER ASSIGNMENT_OPERATOR expression','variable_declaration',4,'p_variable_declaration','geko_parser.py',118),
  ('assignment_statement -> IDENTIFIER ASSIGNMENT_OPERATOR expression','assignment_statement',3,'p_assignment_statement','geko_parser.py',122),
  ('show_statement -> SHOW OPEN_PARENTHESIS expression expression_list CLOSE_PARENTHESIS','show_statement',5,'p_show_statement','geko_parser.py',126),
  ('expression_list -> ELEMENT_SEPERATOR expression expression_list','expression_list',3,'p_expression_list','geko_parser.py',130),
  ('expression_list -> empty','expression_list',1,'p_expression_list','geko_parser.py',131),
  ('conditional_statement -> GIVEN OPEN_PARENTHESIS expression CLOSE_PARENTHESIS block','conditional_statement',5,'p_conditional_statement','geko_parser.py',138),
  ('conditional_statement -> GIVEN OPEN_PARENTHESIS expression CLOSE_PARENTHESIS block OTHERWISE block','conditional_statement',7,'p_conditional_statement','geko_parser.py',139),
  ('conditional_statement -> GIVEN OPEN_PARENTHESIS expression CLOSE_PARENTHESIS block OTHER OPEN_PARENTHESIS expression CLOSE_PARENTHESIS block','conditional_statement',10,'p_conditional_statement','geko_parser.py',140),
  ('conditional_statement -> GIVEN OPEN_PARENTHESIS expression CLOSE_PARENTHESIS block OTHERWISE block OTHER OPEN_PARENTHESIS expression CLOSE_PARENTHESIS block','conditional_statement',12,'p_conditional_statement','geko_parser.py',141),
  ('loop_statement -> ITER OPEN_PARENTHESIS expression SLICING_COLON expression SLICING_COLON expression CLOSE_PARENTHESIS block','loop_statement',9,'p_loop_statement','geko_parser.py',152),
  ('loop_statement -> WHILE OPEN_PARENTHESIS expression CLOSE_PARENTHESIS block','loop_statement',5,'p_loop_statement','geko_parser.py',153),
  ('loop_statement -> REPEAT block WHILE OPEN_PARENTHESIS expression CLOSE_PARENTHESIS','loop_statement',6,'p_loop_statement','geko_parser.py',154),
  ('return_statement -> YIELD expression','return_statement',2,'p_return_statement','geko_parser.py',163),
  ('try_catch_statement -> TEST block POP STRING_LITERAL ARREST OPEN_PARENTHESIS STRING_LITERAL CLOSE_PARENTHESIS block','try_catch_statement',9,'p_try_catch_statement','geko_parser.py',167),
  ('function_call -> IDENTIFIER OPEN_PARENTHESIS argument_list CLOSE_PARENTHESIS','function_call',4,'p_function_call','geko_parser.py',171),
  ('argument_list -> expression ELEMENT_SEPERATOR argument_list','argument_list',3,'p_argument_list','geko_parser.py',175),
  ('argument_list -> expression','argument_list',1,'p_argument_list','geko_parser.py',176),
  ('argument_list -> empty','argument_list',1,'p_argument_list','geko_parser.py',177),
  ('enter_statement -> data_type IDENTIFIER ASSIGNMENT_OPERATOR ENTER OPEN_PARENTHESIS STRING_LITERAL CLOSE_PARENTHESIS','enter_statement',7,'p_enter_statement','geko_parser.py',186),
  ('expression -> term','expression',1,'p_expression','geko_parser.py',190),
  ('expression -> term BINARY_OPERATOR expression','expression',3,'p_expression','geko_parser.py',191),
  ('expression -> term COMPARISON_OPERATOR term','expression',3,'p_expression','geko_parser.py',192),
  ('term -> factor','term',1,'p_term','geko_parser.py',199),
  ('term -> factor BINARY_OPERATOR term','term',3,'p_term','geko_parser.py',200),
  ('term -> factor COMPARISON_OPERATOR factor','term',3,'p_term','geko_parser.py',201),
  ('factor -> IDENTIFIER','factor',1,'p_factor','geko_parser.py',208),
  ('factor -> NUM_LITERAL','factor',1,'p_factor','geko_parser.py',209),
  ('factor -> STRING_LITERAL','factor',1,'p_factor','geko_parser.py',210),
  ('factor -> BOOLEAN','factor',1,'p_factor','geko_parser.py',211),
  ('factor -> OPEN_PARENTHESIS expression CLOSE_PARENTHESIS','factor',3,'p_factor','geko_parser.py',212),
  ('factor -> UNARY_OPERATOR expression','factor',2,'p_factor','geko_parser.py',213),
  ('identifier -> IDENTIFIER','identifier',1,'p_identifier','geko_parser.py',220),
  ('number -> NUM_LITERAL','number',1,'p_number','geko_parser.py',224),
  ('string -> STRING_LITERAL','string',1,'p_string','geko_parser.py',228),
  ('boolean -> FLAG','boolean',1,'p_boolean','geko_parser.py',232),
  ('data_type -> NUM','data_type',1,'p_data_type','geko_parser.py',236),
  ('data_type -> STR','data_type',1,'p_data_type','geko_parser.py',237),
  ('data_type -> FLAG','data_type',1,'p_data_type','geko_parser.py',238),
  ('data_type -> LIST','data_type',1,'p_data_type','geko_parser.py',239),
  ('data_type -> TUP','data_type',1,'p_data_type','geko_parser.py',240),
  ('data_type -> VOID','data_type',1,'p_data_type','geko_parser.py',241),
  ('empty -> <empty>','empty',0,'p_empty','geko_parser.py',245),
]
