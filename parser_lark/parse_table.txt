Indexed grammar rules (176 in total):
0    $accept: start
1    APPEND: 'APPEND'
2    ARREST: 'ARREST'
3    ASSIGNMENT_OPERATOR: 'ASSIGNMENT_OPERATOR'
4    BINARY_LOGICAL_OPERATOR: 'BINARY_LOGICAL_OPERATOR'
5    BINARY_OPERATOR: 'BINARY_OPERATOR'
6    CLOSE_BRACES: 'CLOSE_BRACES'
7    CLOSE_BRACKET: 'CLOSE_BRACKET'
8    CLOSE_PARENTHESIS: 'CLOSE_PARENTHESIS'
9    COMPARISON_OPERATOR: 'COMPARISON_OPERATOR'
10   DEFINE: 'DEFINE'
11   ELEMENT_SEPERATOR: 'ELEMENT_SEPERATOR'
12   END_OF_LINE: 'END_OF_LINE'
13   ENTER: 'ENTER'
14   EQUAL_TO: 'EQUAL_TO'
15   FIX: 'FIX'
16   FLAG: 'FLAG'
17   GIVEN: 'GIVEN'
18   HEAD: 'HEAD'
19   IDENTIFIER: 'IDENTIFIER'
20   IN: 'IN'
21   ISEMPTY: 'ISEMPTY'
22   ITER: 'ITER'
23   LENGTH: 'LENGTH'
24   LET: 'LET'
25   LIST: 'LIST'
26   MAIN: 'MAIN'
27   NAY: 'NAY'
28   NUM: 'NUM'
29   NUM_LITERAL: 'NUM_LITERAL'
30   OPEN_BRACES: 'OPEN_BRACES'
31   OPEN_BRACKET: 'OPEN_BRACKET'
32   OPEN_PARENTHESIS: 'OPEN_PARENTHESIS'
33   OTHER: 'OTHER'
34   OTHERWISE: 'OTHERWISE'
35   POP: 'POP'
36   REPEAT: 'REPEAT'
37   SHOW: 'SHOW'
38   SKIP: 'SKIP'
39   SLICING_COLON: 'SLICING_COLON'
40   STOP: 'STOP'
41   STR: 'STR'
42   STRING_LITERAL: 'STRING_LITERAL'
43   TAIL: 'TAIL'
44   TEST: 'TEST'
45   TILDE: 'TILDE'
46   TUP: 'TUP'
47   UNARY_LOGICAL_OPERATOR: 'UNARY_LOGICAL_OPERATOR'
48   UNARY_OPERATOR: 'UNARY_OPERATOR'
49   VOID: 'VOID'
50   WHILE: 'WHILE'
51   YAY: 'YAY'
52   YIELD: 'YIELD'
53   argument_list: expression expressions
54   array: basic_data_type IDENTIFIER OPEN_BRACKET NUM_LITERAL CLOSE_BRACKET
55   assignment_operators: EQUAL_TO
56                       | ASSIGNMENT_OPERATOR
57   assignment_statement: IDENTIFIER assignment_operators post_equal_to
58   basic_data_type: fix_let num_str_flag
59   binary_operators: BINARY_OPERATOR
60                   | COMPARISON_OPERATOR
61                   | BINARY_LOGICAL_OPERATOR
62   block: OPEN_BRACES statements CLOSE_BRACES
63   choose_array: OPEN_BRACKET NUM_LITERAL CLOSE_BRACKET
64               | epsilon
65   compound_array: compound_data_type IDENTIFIER
66                 | array
67   compound_data_type: LIST
68                     | TUP
69   compound_var: EQUAL_TO list_append_tail
70               | epsilon
71   conditional_argument: special_function COMPARISON_OPERATOR expression
72                       | expression
73   conditional_block: yield_block
74                    | block
75   conditional_statement: GIVEN OPEN_PARENTHESIS conditional_argument CLOSE_PARENTHESIS conditional_block other_block otherwise_block
76   data_type: basic_data_type
77            | compound_data_type
78            | epsilon
79   epsilon: 
80   equal_to: EQUAL_TO post_equal_to
81           | epsilon
82   expression: term terms
83             | epsilon
84   expressions: ELEMENT_SEPERATOR expression expressions
85              | epsilon
86   fix_let: FIX
87          | LET
88          | epsilon
89   func_def: DEFINE function_type IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS function_block
90   function_block: OPEN_BRACES statements YIELD return_value END_OF_LINE CLOSE_BRACES
91   function_call: IDENTIFIER OPEN_PARENTHESIS argument_list CLOSE_PARENTHESIS
92   function_type: NUM
93                | STR
94                | FLAG
95                | VOID
96   let_in: let_in_statement
97         | expression
98   let_in_braces: let_in CLOSE_BRACES
99   let_in_statement: LET data_type IDENTIFIER EQUAL_TO OPEN_BRACES let_in_braces
100                  | LET data_type IDENTIFIER EQUAL_TO term IN OPEN_BRACES let_in_braces
101                  | LET data_type IDENTIFIER EQUAL_TO term IN let_in
102  list_append_tail: OPEN_BRACKET expression expressions CLOSE_BRACKET
103                  | TAIL OPEN_PARENTHESIS IDENTIFIER CLOSE_PARENTHESIS
104                  | APPEND OPEN_PARENTHESIS expression ELEMENT_SEPARATOR IDENTIFIER CLOSE_PARENTHESIS
105  loop_statement: ITER OPEN_PARENTHESIS statement expression END_OF_LINE expression CLOSE_PARENTHESIS block
106                | WHILE OPEN_PARENTHESIS conditional_argument CLOSE_PARENTHESIS block
107                | REPEAT block WHILE OPEN_PARENTHESIS conditional_argument CLOSE_PARENTHESIS END_OF_LINE
108  num_str_flag: NUM
109              | STR
110              | FLAG
111  other_block: OTHER OPEN_PARENTHESIS conditional_argument CLOSE_PARENTHESIS conditional_block other_block
112             | epsilon
113  otherwise_block: OTHERWISE conditional_block
114                 | epsilon
115  parameter: compound_data_type IDENTIFIER
116           | basic_data_type IDENTIFIER choose_array
117  parameter_list: parameter parameters
118                | epsilon
119  parameters: ELEMENT_SEPERATOR parameter parameters
120            | epsilon
121  pop_statement: POP OPEN_PARENTHESIS string CLOSE_PARENTHESIS
122  post_equal_to: ENTER OPEN_PARENTHESIS string CLOSE_PARENTHESIS
123               | special_function
124               | let_in_statement
125               | expression
126  program: DEFINE NUM MAIN OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES statements YIELD NUM_LITERAL END_OF_LINE CLOSE_BRACES
127         | func_def program
128  return_value: expression
129              | function_call
130  show_statement: SHOW OPEN_PARENTHESIS expression expressions CLOSE_PARENTHESIS
131  skip_stop: SKIP
132           | STOP
133  special_function: IDENTIFIER OPEN_BRACKET NUM_LITERAL SLICING_COLON NUM_LITERAL CLOSE_BRACKET
134                  | LENGTH OPEN_PARENTHESIS IDENTIFIER CLOSE_PARENTHESIS
135                  | IDENTIFIER OPEN_BRACKET NUM_LITERAL CLOSE_BRACKET
136                  | HEAD OPEN_PARENTHESIS IDENTIFIER CLOSE_PARENTHESIS
137                  | ISEMPTY OPEN_PARENTHESIS IDENTIFIER CLOSE_PARENTHESIS
138                  | function_call
139  start: program
140  statement: block
141           | variable_declaration END_OF_LINE
142           | assignment_statement END_OF_LINE
143           | show_statement END_OF_LINE
144           | conditional_statement
145           | loop_statement
146           | skip_stop END_OF_LINE
147           | value_change_array END_OF_LINE
148           | pop_statement END_OF_LINE
149           | try_catch_statement
150           | function_call END_OF_LINE
151           | unary_operators IDENTIFIER END_OF_LINE
152           | IDENTIFIER UNARY_OPERATOR END_OF_LINE
153           | func_def
154  statements: statement statements
155            | epsilon
156  string: TILDE STRING_LITERAL TILDE
157  term: IDENTIFIER
158      | NUM_LITERAL
159      | string
160      | YAY
161      | NAY
162      | OPEN_PARENTHESIS expression CLOSE_PARENTHESIS
163      | unary_operators IDENTIFIER
164      | IDENTIFIER UNARY_OPERATOR
165      | IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET
166      | LENGTH
167  terms: binary_operators term terms
168       | epsilon
169  try_catch_statement: TEST block ARREST OPEN_PARENTHESIS string CLOSE_PARENTHESIS block
170  unary_operators: UNARY_OPERATOR
171                 | UNARY_LOGICAL_OPERATOR
172  value_change_array: IDENTIFIER OPEN_BRACKET NUM_LITERAL CLOSE_BRACKET assignment_operators expression
173  variable_declaration: basic_data_type IDENTIFIER equal_to
174                      | compound_array compound_var
175  yield_block: OPEN_BRACES statements YIELD expression END_OF_LINE CLOSE_BRACES

Grammar non-terminals (106 in total):
	$accept
	APPEND
	ARREST
	ASSIGNMENT_OPERATOR
	BINARY_LOGICAL_OPERATOR
	BINARY_OPERATOR
	CLOSE_BRACES
	CLOSE_BRACKET
	CLOSE_PARENTHESIS
	COMPARISON_OPERATOR
	DEFINE
	ELEMENT_SEPERATOR
	END_OF_LINE
	ENTER
	EQUAL_TO
	FIX
	FLAG
	GIVEN
	HEAD
	IDENTIFIER
	IN
	ISEMPTY
	ITER
	LENGTH
	LET
	LIST
	MAIN
	NAY
	NUM
	NUM_LITERAL
	OPEN_BRACES
	OPEN_BRACKET
	OPEN_PARENTHESIS
	OTHER
	OTHERWISE
	POP
	REPEAT
	SHOW
	SKIP
	SLICING_COLON
	STOP
	STR
	STRING_LITERAL
	TAIL
	TEST
	TILDE
	TUP
	UNARY_LOGICAL_OPERATOR
	UNARY_OPERATOR
	VOID
	WHILE
	YAY
	YIELD
	argument_list
	array
	assignment_operators
	assignment_statement
	basic_data_type
	binary_operators
	block
	choose_array
	compound_array
	compound_data_type
	compound_var
	conditional_argument
	conditional_block
	conditional_statement
	data_type
	epsilon
	equal_to
	expression
	expressions
	fix_let
	func_def
	function_block
	function_call
	function_type
	let_in
	let_in_braces
	let_in_statement
	list_append_tail
	loop_statement
	num_str_flag
	other_block
	otherwise_block
	parameter
	parameter_list
	parameters
	pop_statement
	post_equal_to
	program
	return_value
	show_statement
	skip_stop
	special_function
	start
	statement
	statements
	string
	term
	terms
	try_catch_statement
	unary_operators
	value_change_array
	variable_declaration
	yield_block

Grammar terminals (53 in total):
	'APPEND'
	'ARREST'
	'ASSIGNMENT_OPERATOR'
	'BINARY_LOGICAL_OPERATOR'
	'BINARY_OPERATOR'
	'CLOSE_BRACES'
	'CLOSE_BRACKET'
	'CLOSE_PARENTHESIS'
	'COMPARISON_OPERATOR'
	'DEFINE'
	'ELEMENT_SEPERATOR'
	'END_OF_LINE'
	'ENTER'
	'EQUAL_TO'
	'FIX'
	'FLAG'
	'GIVEN'
	'HEAD'
	'IDENTIFIER'
	'IN'
	'ISEMPTY'
	'ITER'
	'LENGTH'
	'LET'
	'LIST'
	'MAIN'
	'NAY'
	'NUM'
	'NUM_LITERAL'
	'OPEN_BRACES'
	'OPEN_BRACKET'
	'OPEN_PARENTHESIS'
	'OTHER'
	'OTHERWISE'
	'POP'
	'REPEAT'
	'SHOW'
	'SKIP'
	'SLICING_COLON'
	'STOP'
	'STR'
	'STRING_LITERAL'
	'TAIL'
	'TEST'
	'TILDE'
	'TUP'
	'UNARY_LOGICAL_OPERATOR'
	'UNARY_OPERATOR'
	'VOID'
	'WHILE'
	'YAY'
	'YIELD'
	ELEMENT_SEPARATOR

PARSING TABLE SUMMARY
Is the given grammar LALR(1)? No
State 251 has a shift-reduce conflict

State 0
	0    $accept: . start

	for terminal 'DEFINE': shift and go to state 5

	for non-terminal DEFINE: go to state 1
	for non-terminal func_def: go to state 2
	for non-terminal program: go to state 3
	for non-terminal start: go to state 4

State 1
	89   func_def: DEFINE . function_type IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS function_block
	126  program: DEFINE . NUM MAIN OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES statements YIELD NUM_LITERAL END_OF_LINE CLOSE_BRACES

	for terminal 'FLAG': shift and go to state 11
	for terminal 'NUM': shift and go to state 12
	for terminal 'STR': shift and go to state 13
	for terminal 'VOID': shift and go to state 14

	for non-terminal FLAG: go to state 6
	for non-terminal NUM: go to state 7
	for non-terminal STR: go to state 8
	for non-terminal VOID: go to state 9
	for non-terminal function_type: go to state 10

State 2
	127  program: func_def . program

	for terminal 'DEFINE': shift and go to state 5

	for non-terminal DEFINE: go to state 1
	for non-terminal func_def: go to state 2
	for non-terminal program: go to state 15

State 3
	139  start: program .

	for terminal $end: reduce using rule 139

State 4
	0    $accept: start .

	for terminal $end: accept 

State 5
	10   DEFINE: 'DEFINE' .

	for terminal 'FLAG': reduce using rule 10
	for terminal 'NUM': reduce using rule 10
	for terminal 'STR': reduce using rule 10
	for terminal 'VOID': reduce using rule 10

State 6
	94   function_type: FLAG .

	for terminal 'IDENTIFIER': reduce using rule 94

State 7
	92   function_type: NUM .
	126  program: DEFINE NUM . MAIN OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES statements YIELD NUM_LITERAL END_OF_LINE CLOSE_BRACES

	for terminal 'IDENTIFIER': reduce using rule 92
	for terminal 'MAIN': shift and go to state 17

	for non-terminal MAIN: go to state 16

State 8
	93   function_type: STR .

	for terminal 'IDENTIFIER': reduce using rule 93

State 9
	95   function_type: VOID .

	for terminal 'IDENTIFIER': reduce using rule 95

State 10
	89   func_def: DEFINE function_type . IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS function_block

	for terminal 'IDENTIFIER': shift and go to state 19

	for non-terminal IDENTIFIER: go to state 18

State 11
	16   FLAG: 'FLAG' .

	for terminal 'IDENTIFIER': reduce using rule 16

State 12
	28   NUM: 'NUM' .

	for terminal 'IDENTIFIER': reduce using rule 28
	for terminal 'MAIN': reduce using rule 28

State 13
	41   STR: 'STR' .

	for terminal 'IDENTIFIER': reduce using rule 41

State 14
	49   VOID: 'VOID' .

	for terminal 'IDENTIFIER': reduce using rule 49

State 15
	127  program: func_def program .

	for terminal $end: reduce using rule 127

State 16
	126  program: DEFINE NUM MAIN . OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES statements YIELD NUM_LITERAL END_OF_LINE CLOSE_BRACES

	for terminal 'OPEN_PARENTHESIS': shift and go to state 21

	for non-terminal OPEN_PARENTHESIS: go to state 20

State 17
	26   MAIN: 'MAIN' .

	for terminal 'OPEN_PARENTHESIS': reduce using rule 26

State 18
	89   func_def: DEFINE function_type IDENTIFIER . OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS function_block

	for terminal 'OPEN_PARENTHESIS': shift and go to state 21

	for non-terminal OPEN_PARENTHESIS: go to state 22

State 19
	19   IDENTIFIER: 'IDENTIFIER' .

	for terminal 'ASSIGNMENT_OPERATOR': reduce using rule 19
	for terminal 'BINARY_LOGICAL_OPERATOR': reduce using rule 19
	for terminal 'BINARY_OPERATOR': reduce using rule 19
	for terminal 'CLOSE_BRACES': reduce using rule 19
	for terminal 'CLOSE_BRACKET': reduce using rule 19
	for terminal 'CLOSE_PARENTHESIS': reduce using rule 19
	for terminal 'COMPARISON_OPERATOR': reduce using rule 19
	for terminal 'ELEMENT_SEPERATOR': reduce using rule 19
	for terminal 'END_OF_LINE': reduce using rule 19
	for terminal 'EQUAL_TO': reduce using rule 19
	for terminal 'IN': reduce using rule 19
	for terminal 'OPEN_BRACKET': reduce using rule 19
	for terminal 'OPEN_PARENTHESIS': reduce using rule 19
	for terminal 'UNARY_OPERATOR': reduce using rule 19
	for terminal ELEMENT_SEPARATOR: reduce using rule 19

State 20
	126  program: DEFINE NUM MAIN OPEN_PARENTHESIS . CLOSE_PARENTHESIS OPEN_BRACES statements YIELD NUM_LITERAL END_OF_LINE CLOSE_BRACES

	for terminal 'CLOSE_PARENTHESIS': shift and go to state 24

	for non-terminal CLOSE_PARENTHESIS: go to state 23

State 21
	32   OPEN_PARENTHESIS: 'OPEN_PARENTHESIS' .

	for terminal 'CLOSE_PARENTHESIS': reduce using rule 32
	for terminal 'DEFINE': reduce using rule 32
	for terminal 'ELEMENT_SEPERATOR': reduce using rule 32
	for terminal 'FIX': reduce using rule 32
	for terminal 'FLAG': reduce using rule 32
	for terminal 'GIVEN': reduce using rule 32
	for terminal 'HEAD': reduce using rule 32
	for terminal 'IDENTIFIER': reduce using rule 32
	for terminal 'ISEMPTY': reduce using rule 32
	for terminal 'ITER': reduce using rule 32
	for terminal 'LENGTH': reduce using rule 32
	for terminal 'LET': reduce using rule 32
	for terminal 'LIST': reduce using rule 32
	for terminal 'NAY': reduce using rule 32
	for terminal 'NUM': reduce using rule 32
	for terminal 'NUM_LITERAL': reduce using rule 32
	for terminal 'OPEN_BRACES': reduce using rule 32
	for terminal 'OPEN_PARENTHESIS': reduce using rule 32
	for terminal 'POP': reduce using rule 32
	for terminal 'REPEAT': reduce using rule 32
	for terminal 'SHOW': reduce using rule 32
	for terminal 'SKIP': reduce using rule 32
	for terminal 'STOP': reduce using rule 32
	for terminal 'STR': reduce using rule 32
	for terminal 'TEST': reduce using rule 32
	for terminal 'TILDE': reduce using rule 32
	for terminal 'TUP': reduce using rule 32
	for terminal 'UNARY_LOGICAL_OPERATOR': reduce using rule 32
	for terminal 'UNARY_OPERATOR': reduce using rule 32
	for terminal 'WHILE': reduce using rule 32
	for terminal 'YAY': reduce using rule 32
	for terminal ELEMENT_SEPARATOR: reduce using rule 32

State 22
	89   func_def: DEFINE function_type IDENTIFIER OPEN_PARENTHESIS . parameter_list CLOSE_PARENTHESIS function_block

	for terminal 'CLOSE_PARENTHESIS': reduce using rule 79
	for terminal 'FIX': shift and go to state 35
	for terminal 'FLAG': reduce using rule 79
	for terminal 'LET': shift and go to state 36
	for terminal 'LIST': shift and go to state 37
	for terminal 'NUM': reduce using rule 79
	for terminal 'STR': reduce using rule 79
	for terminal 'TUP': shift and go to state 38

	for non-terminal FIX: go to state 25
	for non-terminal LET: go to state 26
	for non-terminal LIST: go to state 27
	for non-terminal TUP: go to state 28
	for non-terminal basic_data_type: go to state 29
	for non-terminal compound_data_type: go to state 30
	for non-terminal epsilon: go to state 31
	for non-terminal fix_let: go to state 32
	for non-terminal parameter: go to state 33
	for non-terminal parameter_list: go to state 34

State 23
	126  program: DEFINE NUM MAIN OPEN_PARENTHESIS CLOSE_PARENTHESIS . OPEN_BRACES statements YIELD NUM_LITERAL END_OF_LINE CLOSE_BRACES

	for terminal 'OPEN_BRACES': shift and go to state 40

	for non-terminal OPEN_BRACES: go to state 39

State 24
	8    CLOSE_PARENTHESIS: 'CLOSE_PARENTHESIS' .

	for terminal 'BINARY_LOGICAL_OPERATOR': reduce using rule 8
	for terminal 'BINARY_OPERATOR': reduce using rule 8
	for terminal 'CLOSE_BRACES': reduce using rule 8
	for terminal 'CLOSE_BRACKET': reduce using rule 8
	for terminal 'CLOSE_PARENTHESIS': reduce using rule 8
	for terminal 'COMPARISON_OPERATOR': reduce using rule 8
	for terminal 'ELEMENT_SEPERATOR': reduce using rule 8
	for terminal 'END_OF_LINE': reduce using rule 8
	for terminal 'IN': reduce using rule 8
	for terminal 'OPEN_BRACES': reduce using rule 8
	for terminal ELEMENT_SEPARATOR: reduce using rule 8

State 25
	86   fix_let: FIX .

	for terminal 'FLAG': reduce using rule 86
	for terminal 'NUM': reduce using rule 86
	for terminal 'STR': reduce using rule 86

State 26
	87   fix_let: LET .

	for terminal 'FLAG': reduce using rule 87
	for terminal 'NUM': reduce using rule 87
	for terminal 'STR': reduce using rule 87

State 27
	67   compound_data_type: LIST .

	for terminal 'IDENTIFIER': reduce using rule 67

State 28
	68   compound_data_type: TUP .

	for terminal 'IDENTIFIER': reduce using rule 68

State 29
	116  parameter: basic_data_type . IDENTIFIER choose_array

	for terminal 'IDENTIFIER': shift and go to state 19

	for non-terminal IDENTIFIER: go to state 41

State 30
	115  parameter: compound_data_type . IDENTIFIER

	for terminal 'IDENTIFIER': shift and go to state 19

	for non-terminal IDENTIFIER: go to state 42

State 31
	88   fix_let: epsilon .
	118  parameter_list: epsilon .

	for terminal 'CLOSE_PARENTHESIS': reduce using rule 118
	for terminal 'FLAG': reduce using rule 88
	for terminal 'NUM': reduce using rule 88
	for terminal 'STR': reduce using rule 88

State 32
	58   basic_data_type: fix_let . num_str_flag

	for terminal 'FLAG': shift and go to state 11
	for terminal 'NUM': shift and go to state 12
	for terminal 'STR': shift and go to state 13

	for non-terminal FLAG: go to state 43
	for non-terminal NUM: go to state 44
	for non-terminal STR: go to state 45
	for non-terminal num_str_flag: go to state 46

State 33
	117  parameter_list: parameter . parameters

	for terminal 'CLOSE_PARENTHESIS': reduce using rule 79
	for terminal 'ELEMENT_SEPERATOR': shift and go to state 50

	for non-terminal ELEMENT_SEPERATOR: go to state 47
	for non-terminal epsilon: go to state 48
	for non-terminal parameters: go to state 49

State 34
	89   func_def: DEFINE function_type IDENTIFIER OPEN_PARENTHESIS parameter_list . CLOSE_PARENTHESIS function_block

	for terminal 'CLOSE_PARENTHESIS': shift and go to state 24

	for non-terminal CLOSE_PARENTHESIS: go to state 51

State 35
	15   FIX: 'FIX' .

	for terminal 'FLAG': reduce using rule 15
	for terminal 'NUM': reduce using rule 15
	for terminal 'STR': reduce using rule 15

State 36
	24   LET: 'LET' .

	for terminal 'FIX': reduce using rule 24
	for terminal 'FLAG': reduce using rule 24
	for terminal 'IDENTIFIER': reduce using rule 24
	for terminal 'LET': reduce using rule 24
	for terminal 'LIST': reduce using rule 24
	for terminal 'NUM': reduce using rule 24
	for terminal 'STR': reduce using rule 24
	for terminal 'TUP': reduce using rule 24

State 37
	25   LIST: 'LIST' .

	for terminal 'IDENTIFIER': reduce using rule 25

State 38
	46   TUP: 'TUP' .

	for terminal 'IDENTIFIER': reduce using rule 46

State 39
	126  program: DEFINE NUM MAIN OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES . statements YIELD NUM_LITERAL END_OF_LINE CLOSE_BRACES

	for terminal 'DEFINE': shift and go to state 5
	for terminal 'FIX': shift and go to state 35
	for terminal 'FLAG': reduce using rule 79
	for terminal 'GIVEN': shift and go to state 86
	for terminal 'IDENTIFIER': shift and go to state 19
	for terminal 'ITER': shift and go to state 87
	for terminal 'LET': shift and go to state 36
	for terminal 'LIST': shift and go to state 37
	for terminal 'NUM': reduce using rule 79
	for terminal 'OPEN_BRACES': shift and go to state 40
	for terminal 'POP': shift and go to state 88
	for terminal 'REPEAT': shift and go to state 89
	for terminal 'SHOW': shift and go to state 90
	for terminal 'SKIP': shift and go to state 91
	for terminal 'STOP': shift and go to state 92
	for terminal 'STR': reduce using rule 79
	for terminal 'TEST': shift and go to state 93
	for terminal 'TUP': shift and go to state 38
	for terminal 'UNARY_LOGICAL_OPERATOR': shift and go to state 94
	for terminal 'UNARY_OPERATOR': shift and go to state 95
	for terminal 'WHILE': shift and go to state 96
	for terminal 'YIELD': reduce using rule 79

	for non-terminal DEFINE: go to state 52
	for non-terminal FIX: go to state 25
	for non-terminal GIVEN: go to state 53
	for non-terminal IDENTIFIER: go to state 54
	for non-terminal ITER: go to state 55
	for non-terminal LET: go to state 26
	for non-terminal LIST: go to state 27
	for non-terminal OPEN_BRACES: go to state 56
	for non-terminal POP: go to state 57
	for non-terminal REPEAT: go to state 58
	for non-terminal SHOW: go to state 59
	for non-terminal SKIP: go to state 60
	for non-terminal STOP: go to state 61
	for non-terminal TEST: go to state 62
	for non-terminal TUP: go to state 28
	for non-terminal UNARY_LOGICAL_OPERATOR: go to state 63
	for non-terminal UNARY_OPERATOR: go to state 64
	for non-terminal WHILE: go to state 65
	for non-terminal array: go to state 66
	for non-terminal assignment_statement: go to state 67
	for non-terminal basic_data_type: go to state 68
	for non-terminal block: go to state 69
	for non-terminal compound_array: go to state 70
	for non-terminal compound_data_type: go to state 71
	for non-terminal conditional_statement: go to state 72
	for non-terminal epsilon: go to state 73
	for non-terminal fix_let: go to state 32
	for non-terminal func_def: go to state 74
	for non-terminal function_call: go to state 75
	for non-terminal loop_statement: go to state 76
	for non-terminal pop_statement: go to state 77
	for non-terminal show_statement: go to state 78
	for non-terminal skip_stop: go to state 79
	for non-terminal statement: go to state 80
	for non-terminal statements: go to state 81
	for non-terminal try_catch_statement: go to state 82
	for non-terminal unary_operators: go to state 83
	for non-terminal value_change_array: go to state 84
	for non-terminal variable_declaration: go to state 85

State 40
	30   OPEN_BRACES: 'OPEN_BRACES' .

	for terminal 'CLOSE_BRACES': reduce using rule 30
	for terminal 'DEFINE': reduce using rule 30
	for terminal 'FIX': reduce using rule 30
	for terminal 'FLAG': reduce using rule 30
	for terminal 'GIVEN': reduce using rule 30
	for terminal 'IDENTIFIER': reduce using rule 30
	for terminal 'ITER': reduce using rule 30
	for terminal 'LENGTH': reduce using rule 30
	for terminal 'LET': reduce using rule 30
	for terminal 'LIST': reduce using rule 30
	for terminal 'NAY': reduce using rule 30
	for terminal 'NUM': reduce using rule 30
	for terminal 'NUM_LITERAL': reduce using rule 30
	for terminal 'OPEN_BRACES': reduce using rule 30
	for terminal 'OPEN_PARENTHESIS': reduce using rule 30
	for terminal 'POP': reduce using rule 30
	for terminal 'REPEAT': reduce using rule 30
	for terminal 'SHOW': reduce using rule 30
	for terminal 'SKIP': reduce using rule 30
	for terminal 'STOP': reduce using rule 30
	for terminal 'STR': reduce using rule 30
	for terminal 'TEST': reduce using rule 30
	for terminal 'TILDE': reduce using rule 30
	for terminal 'TUP': reduce using rule 30
	for terminal 'UNARY_LOGICAL_OPERATOR': reduce using rule 30
	for terminal 'UNARY_OPERATOR': reduce using rule 30
	for terminal 'WHILE': reduce using rule 30
	for terminal 'YAY': reduce using rule 30
	for terminal 'YIELD': reduce using rule 30

State 41
	116  parameter: basic_data_type IDENTIFIER . choose_array

	for terminal 'CLOSE_PARENTHESIS': reduce using rule 79
	for terminal 'ELEMENT_SEPERATOR': reduce using rule 79
	for terminal 'OPEN_BRACKET': shift and go to state 100

	for non-terminal OPEN_BRACKET: go to state 97
	for non-terminal choose_array: go to state 98
	for non-terminal epsilon: go to state 99

State 42
	115  parameter: compound_data_type IDENTIFIER .

	for terminal 'CLOSE_PARENTHESIS': reduce using rule 115
	for terminal 'ELEMENT_SEPERATOR': reduce using rule 115

State 43
	110  num_str_flag: FLAG .

	for terminal 'IDENTIFIER': reduce using rule 110

State 44
	108  num_str_flag: NUM .

	for terminal 'IDENTIFIER': reduce using rule 108

State 45
	109  num_str_flag: STR .

	for terminal 'IDENTIFIER': reduce using rule 109

State 46
	58   basic_data_type: fix_let num_str_flag .

	for terminal 'IDENTIFIER': reduce using rule 58

State 47
	119  parameters: ELEMENT_SEPERATOR . parameter parameters

	for terminal 'FIX': shift and go to state 35
	for terminal 'FLAG': reduce using rule 79
	for terminal 'LET': shift and go to state 36
	for terminal 'LIST': shift and go to state 37
	for terminal 'NUM': reduce using rule 79
	for terminal 'STR': reduce using rule 79
	for terminal 'TUP': shift and go to state 38

	for non-terminal FIX: go to state 25
	for non-terminal LET: go to state 26
	for non-terminal LIST: go to state 27
	for non-terminal TUP: go to state 28
	for non-terminal basic_data_type: go to state 29
	for non-terminal compound_data_type: go to state 30
	for non-terminal epsilon: go to state 101
	for non-terminal fix_let: go to state 32
	for non-terminal parameter: go to state 102

State 48
	120  parameters: epsilon .

	for terminal 'CLOSE_PARENTHESIS': reduce using rule 120

State 49
	117  parameter_list: parameter parameters .

	for terminal 'CLOSE_PARENTHESIS': reduce using rule 117

State 50
	11   ELEMENT_SEPERATOR: 'ELEMENT_SEPERATOR' .

	for terminal 'CLOSE_BRACKET': reduce using rule 11
	for terminal 'CLOSE_PARENTHESIS': reduce using rule 11
	for terminal 'ELEMENT_SEPERATOR': reduce using rule 11
	for terminal 'FIX': reduce using rule 11
	for terminal 'FLAG': reduce using rule 11
	for terminal 'IDENTIFIER': reduce using rule 11
	for terminal 'LENGTH': reduce using rule 11
	for terminal 'LET': reduce using rule 11
	for terminal 'LIST': reduce using rule 11
	for terminal 'NAY': reduce using rule 11
	for terminal 'NUM': reduce using rule 11
	for terminal 'NUM_LITERAL': reduce using rule 11
	for terminal 'OPEN_PARENTHESIS': reduce using rule 11
	for terminal 'STR': reduce using rule 11
	for terminal 'TILDE': reduce using rule 11
	for terminal 'TUP': reduce using rule 11
	for terminal 'UNARY_LOGICAL_OPERATOR': reduce using rule 11
	for terminal 'UNARY_OPERATOR': reduce using rule 11
	for terminal 'YAY': reduce using rule 11

State 51
	89   func_def: DEFINE function_type IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS . function_block

	for terminal 'OPEN_BRACES': shift and go to state 40

	for non-terminal OPEN_BRACES: go to state 103
	for non-terminal function_block: go to state 104

State 52
	89   func_def: DEFINE . function_type IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS function_block

	for terminal 'FLAG': shift and go to state 11
	for terminal 'NUM': shift and go to state 12
	for terminal 'STR': shift and go to state 13
	for terminal 'VOID': shift and go to state 14

	for non-terminal FLAG: go to state 6
	for non-terminal NUM: go to state 105
	for non-terminal STR: go to state 8
	for non-terminal VOID: go to state 9
	for non-terminal function_type: go to state 10

State 53
	75   conditional_statement: GIVEN . OPEN_PARENTHESIS conditional_argument CLOSE_PARENTHESIS conditional_block other_block otherwise_block

	for terminal 'OPEN_PARENTHESIS': shift and go to state 21

	for non-terminal OPEN_PARENTHESIS: go to state 106

State 54
	57   assignment_statement: IDENTIFIER . assignment_operators post_equal_to
	91   function_call: IDENTIFIER . OPEN_PARENTHESIS argument_list CLOSE_PARENTHESIS
	152  statement: IDENTIFIER . UNARY_OPERATOR END_OF_LINE
	172  value_change_array: IDENTIFIER . OPEN_BRACKET NUM_LITERAL CLOSE_BRACKET assignment_operators expression

	for terminal 'ASSIGNMENT_OPERATOR': shift and go to state 113
	for terminal 'EQUAL_TO': shift and go to state 114
	for terminal 'OPEN_BRACKET': shift and go to state 100
	for terminal 'OPEN_PARENTHESIS': shift and go to state 21
	for terminal 'UNARY_OPERATOR': shift and go to state 95

	for non-terminal ASSIGNMENT_OPERATOR: go to state 107
	for non-terminal EQUAL_TO: go to state 108
	for non-terminal OPEN_BRACKET: go to state 109
	for non-terminal OPEN_PARENTHESIS: go to state 110
	for non-terminal UNARY_OPERATOR: go to state 111
	for non-terminal assignment_operators: go to state 112

State 55
	105  loop_statement: ITER . OPEN_PARENTHESIS statement expression END_OF_LINE expression CLOSE_PARENTHESIS block

	for terminal 'OPEN_PARENTHESIS': shift and go to state 21

	for non-terminal OPEN_PARENTHESIS: go to state 115

State 56
	62   block: OPEN_BRACES . statements CLOSE_BRACES

	for terminal 'CLOSE_BRACES': reduce using rule 79
	for terminal 'DEFINE': shift and go to state 5
	for terminal 'FIX': shift and go to state 35
	for terminal 'FLAG': reduce using rule 79
	for terminal 'GIVEN': shift and go to state 86
	for terminal 'IDENTIFIER': shift and go to state 19
	for terminal 'ITER': shift and go to state 87
	for terminal 'LET': shift and go to state 36
	for terminal 'LIST': shift and go to state 37
	for terminal 'NUM': reduce using rule 79
	for terminal 'OPEN_BRACES': shift and go to state 40
	for terminal 'POP': shift and go to state 88
	for terminal 'REPEAT': shift and go to state 89
	for terminal 'SHOW': shift and go to state 90
	for terminal 'SKIP': shift and go to state 91
	for terminal 'STOP': shift and go to state 92
	for terminal 'STR': reduce using rule 79
	for terminal 'TEST': shift and go to state 93
	for terminal 'TUP': shift and go to state 38
	for terminal 'UNARY_LOGICAL_OPERATOR': shift and go to state 94
	for terminal 'UNARY_OPERATOR': shift and go to state 95
	for terminal 'WHILE': shift and go to state 96

	for non-terminal DEFINE: go to state 52
	for non-terminal FIX: go to state 25
	for non-terminal GIVEN: go to state 53
	for non-terminal IDENTIFIER: go to state 54
	for non-terminal ITER: go to state 55
	for non-terminal LET: go to state 26
	for non-terminal LIST: go to state 27
	for non-terminal OPEN_BRACES: go to state 56
	for non-terminal POP: go to state 57
	for non-terminal REPEAT: go to state 58
	for non-terminal SHOW: go to state 59
	for non-terminal SKIP: go to state 60
	for non-terminal STOP: go to state 61
	for non-terminal TEST: go to state 62
	for non-terminal TUP: go to state 28
	for non-terminal UNARY_LOGICAL_OPERATOR: go to state 63
	for non-terminal UNARY_OPERATOR: go to state 64
	for non-terminal WHILE: go to state 65
	for non-terminal array: go to state 66
	for non-terminal assignment_statement: go to state 67
	for non-terminal basic_data_type: go to state 68
	for non-terminal block: go to state 69
	for non-terminal compound_array: go to state 70
	for non-terminal compound_data_type: go to state 71
	for non-terminal conditional_statement: go to state 72
	for non-terminal epsilon: go to state 73
	for non-terminal fix_let: go to state 32
	for non-terminal func_def: go to state 74
	for non-terminal function_call: go to state 75
	for non-terminal loop_statement: go to state 76
	for non-terminal pop_statement: go to state 77
	for non-terminal show_statement: go to state 78
	for non-terminal skip_stop: go to state 79
	for non-terminal statement: go to state 80
	for non-terminal statements: go to state 116
	for non-terminal try_catch_statement: go to state 82
	for non-terminal unary_operators: go to state 83
	for non-terminal value_change_array: go to state 84
	for non-terminal variable_declaration: go to state 85

State 57
	121  pop_statement: POP . OPEN_PARENTHESIS string CLOSE_PARENTHESIS

	for terminal 'OPEN_PARENTHESIS': shift and go to state 21

	for non-terminal OPEN_PARENTHESIS: go to state 117

State 58
	107  loop_statement: REPEAT . block WHILE OPEN_PARENTHESIS conditional_argument CLOSE_PARENTHESIS END_OF_LINE

	for terminal 'OPEN_BRACES': shift and go to state 40

	for non-terminal OPEN_BRACES: go to state 56
	for non-terminal block: go to state 118

State 59
	130  show_statement: SHOW . OPEN_PARENTHESIS expression expressions CLOSE_PARENTHESIS

	for terminal 'OPEN_PARENTHESIS': shift and go to state 21

	for non-terminal OPEN_PARENTHESIS: go to state 119

State 60
	131  skip_stop: SKIP .

	for terminal 'END_OF_LINE': reduce using rule 131

State 61
	132  skip_stop: STOP .

	for terminal 'END_OF_LINE': reduce using rule 132

State 62
	169  try_catch_statement: TEST . block ARREST OPEN_PARENTHESIS string CLOSE_PARENTHESIS block

	for terminal 'OPEN_BRACES': shift and go to state 40

	for non-terminal OPEN_BRACES: go to state 56
	for non-terminal block: go to state 120

State 63
	171  unary_operators: UNARY_LOGICAL_OPERATOR .

	for terminal 'IDENTIFIER': reduce using rule 171

State 64
	170  unary_operators: UNARY_OPERATOR .

	for terminal 'IDENTIFIER': reduce using rule 170

State 65
	106  loop_statement: WHILE . OPEN_PARENTHESIS conditional_argument CLOSE_PARENTHESIS block

	for terminal 'OPEN_PARENTHESIS': shift and go to state 21

	for non-terminal OPEN_PARENTHESIS: go to state 121

State 66
	66   compound_array: array .

	for terminal 'END_OF_LINE': reduce using rule 66
	for terminal 'EQUAL_TO': reduce using rule 66

State 67
	142  statement: assignment_statement . END_OF_LINE

	for terminal 'END_OF_LINE': shift and go to state 123

	for non-terminal END_OF_LINE: go to state 122

State 68
	54   array: basic_data_type . IDENTIFIER OPEN_BRACKET NUM_LITERAL CLOSE_BRACKET
	173  variable_declaration: basic_data_type . IDENTIFIER equal_to

	for terminal 'IDENTIFIER': shift and go to state 19

	for non-terminal IDENTIFIER: go to state 124

State 69
	140  statement: block .

	for terminal 'CLOSE_BRACES': reduce using rule 140
	for terminal 'DEFINE': reduce using rule 140
	for terminal 'END_OF_LINE': reduce using rule 140
	for terminal 'FIX': reduce using rule 140
	for terminal 'FLAG': reduce using rule 140
	for terminal 'GIVEN': reduce using rule 140
	for terminal 'IDENTIFIER': reduce using rule 140
	for terminal 'ITER': reduce using rule 140
	for terminal 'LENGTH': reduce using rule 140
	for terminal 'LET': reduce using rule 140
	for terminal 'LIST': reduce using rule 140
	for terminal 'NAY': reduce using rule 140
	for terminal 'NUM': reduce using rule 140
	for terminal 'NUM_LITERAL': reduce using rule 140
	for terminal 'OPEN_BRACES': reduce using rule 140
	for terminal 'OPEN_PARENTHESIS': reduce using rule 140
	for terminal 'POP': reduce using rule 140
	for terminal 'REPEAT': reduce using rule 140
	for terminal 'SHOW': reduce using rule 140
	for terminal 'SKIP': reduce using rule 140
	for terminal 'STOP': reduce using rule 140
	for terminal 'STR': reduce using rule 140
	for terminal 'TEST': reduce using rule 140
	for terminal 'TILDE': reduce using rule 140
	for terminal 'TUP': reduce using rule 140
	for terminal 'UNARY_LOGICAL_OPERATOR': reduce using rule 140
	for terminal 'UNARY_OPERATOR': reduce using rule 140
	for terminal 'WHILE': reduce using rule 140
	for terminal 'YAY': reduce using rule 140
	for terminal 'YIELD': reduce using rule 140

State 70
	174  variable_declaration: compound_array . compound_var

	for terminal 'END_OF_LINE': reduce using rule 79
	for terminal 'EQUAL_TO': shift and go to state 114

	for non-terminal EQUAL_TO: go to state 125
	for non-terminal compound_var: go to state 126
	for non-terminal epsilon: go to state 127

State 71
	65   compound_array: compound_data_type . IDENTIFIER

	for terminal 'IDENTIFIER': shift and go to state 19

	for non-terminal IDENTIFIER: go to state 128

State 72
	144  statement: conditional_statement .

	for terminal 'CLOSE_BRACES': reduce using rule 144
	for terminal 'DEFINE': reduce using rule 144
	for terminal 'END_OF_LINE': reduce using rule 144
	for terminal 'FIX': reduce using rule 144
	for terminal 'FLAG': reduce using rule 144
	for terminal 'GIVEN': reduce using rule 144
	for terminal 'IDENTIFIER': reduce using rule 144
	for terminal 'ITER': reduce using rule 144
	for terminal 'LENGTH': reduce using rule 144
	for terminal 'LET': reduce using rule 144
	for terminal 'LIST': reduce using rule 144
	for terminal 'NAY': reduce using rule 144
	for terminal 'NUM': reduce using rule 144
	for terminal 'NUM_LITERAL': reduce using rule 144
	for terminal 'OPEN_BRACES': reduce using rule 144
	for terminal 'OPEN_PARENTHESIS': reduce using rule 144
	for terminal 'POP': reduce using rule 144
	for terminal 'REPEAT': reduce using rule 144
	for terminal 'SHOW': reduce using rule 144
	for terminal 'SKIP': reduce using rule 144
	for terminal 'STOP': reduce using rule 144
	for terminal 'STR': reduce using rule 144
	for terminal 'TEST': reduce using rule 144
	for terminal 'TILDE': reduce using rule 144
	for terminal 'TUP': reduce using rule 144
	for terminal 'UNARY_LOGICAL_OPERATOR': reduce using rule 144
	for terminal 'UNARY_OPERATOR': reduce using rule 144
	for terminal 'WHILE': reduce using rule 144
	for terminal 'YAY': reduce using rule 144
	for terminal 'YIELD': reduce using rule 144

State 73
	88   fix_let: epsilon .
	155  statements: epsilon .

	for terminal 'CLOSE_BRACES': reduce using rule 155
	for terminal 'FLAG': reduce using rule 88
	for terminal 'NUM': reduce using rule 88
	for terminal 'STR': reduce using rule 88
	for terminal 'YIELD': reduce using rule 155

State 74
	153  statement: func_def .

	for terminal 'CLOSE_BRACES': reduce using rule 153
	for terminal 'DEFINE': reduce using rule 153
	for terminal 'END_OF_LINE': reduce using rule 153
	for terminal 'FIX': reduce using rule 153
	for terminal 'FLAG': reduce using rule 153
	for terminal 'GIVEN': reduce using rule 153
	for terminal 'IDENTIFIER': reduce using rule 153
	for terminal 'ITER': reduce using rule 153
	for terminal 'LENGTH': reduce using rule 153
	for terminal 'LET': reduce using rule 153
	for terminal 'LIST': reduce using rule 153
	for terminal 'NAY': reduce using rule 153
	for terminal 'NUM': reduce using rule 153
	for terminal 'NUM_LITERAL': reduce using rule 153
	for terminal 'OPEN_BRACES': reduce using rule 153
	for terminal 'OPEN_PARENTHESIS': reduce using rule 153
	for terminal 'POP': reduce using rule 153
	for terminal 'REPEAT': reduce using rule 153
	for terminal 'SHOW': reduce using rule 153
	for terminal 'SKIP': reduce using rule 153
	for terminal 'STOP': reduce using rule 153
	for terminal 'STR': reduce using rule 153
	for terminal 'TEST': reduce using rule 153
	for terminal 'TILDE': reduce using rule 153
	for terminal 'TUP': reduce using rule 153
	for terminal 'UNARY_LOGICAL_OPERATOR': reduce using rule 153
	for terminal 'UNARY_OPERATOR': reduce using rule 153
	for terminal 'WHILE': reduce using rule 153
	for terminal 'YAY': reduce using rule 153
	for terminal 'YIELD': reduce using rule 153

State 75
	150  statement: function_call . END_OF_LINE

	for terminal 'END_OF_LINE': shift and go to state 123

	for non-terminal END_OF_LINE: go to state 129

State 76
	145  statement: loop_statement .

	for terminal 'CLOSE_BRACES': reduce using rule 145
	for terminal 'DEFINE': reduce using rule 145
	for terminal 'END_OF_LINE': reduce using rule 145
	for terminal 'FIX': reduce using rule 145
	for terminal 'FLAG': reduce using rule 145
	for terminal 'GIVEN': reduce using rule 145
	for terminal 'IDENTIFIER': reduce using rule 145
	for terminal 'ITER': reduce using rule 145
	for terminal 'LENGTH': reduce using rule 145
	for terminal 'LET': reduce using rule 145
	for terminal 'LIST': reduce using rule 145
	for terminal 'NAY': reduce using rule 145
	for terminal 'NUM': reduce using rule 145
	for terminal 'NUM_LITERAL': reduce using rule 145
	for terminal 'OPEN_BRACES': reduce using rule 145
	for terminal 'OPEN_PARENTHESIS': reduce using rule 145
	for terminal 'POP': reduce using rule 145
	for terminal 'REPEAT': reduce using rule 145
	for terminal 'SHOW': reduce using rule 145
	for terminal 'SKIP': reduce using rule 145
	for terminal 'STOP': reduce using rule 145
	for terminal 'STR': reduce using rule 145
	for terminal 'TEST': reduce using rule 145
	for terminal 'TILDE': reduce using rule 145
	for terminal 'TUP': reduce using rule 145
	for terminal 'UNARY_LOGICAL_OPERATOR': reduce using rule 145
	for terminal 'UNARY_OPERATOR': reduce using rule 145
	for terminal 'WHILE': reduce using rule 145
	for terminal 'YAY': reduce using rule 145
	for terminal 'YIELD': reduce using rule 145

State 77
	148  statement: pop_statement . END_OF_LINE

	for terminal 'END_OF_LINE': shift and go to state 123

	for non-terminal END_OF_LINE: go to state 130

State 78
	143  statement: show_statement . END_OF_LINE

	for terminal 'END_OF_LINE': shift and go to state 123

	for non-terminal END_OF_LINE: go to state 131

State 79
	146  statement: skip_stop . END_OF_LINE

	for terminal 'END_OF_LINE': shift and go to state 123

	for non-terminal END_OF_LINE: go to state 132

State 80
	154  statements: statement . statements

	for terminal 'CLOSE_BRACES': reduce using rule 79
	for terminal 'DEFINE': shift and go to state 5
	for terminal 'FIX': shift and go to state 35
	for terminal 'FLAG': reduce using rule 79
	for terminal 'GIVEN': shift and go to state 86
	for terminal 'IDENTIFIER': shift and go to state 19
	for terminal 'ITER': shift and go to state 87
	for terminal 'LET': shift and go to state 36
	for terminal 'LIST': shift and go to state 37
	for terminal 'NUM': reduce using rule 79
	for terminal 'OPEN_BRACES': shift and go to state 40
	for terminal 'POP': shift and go to state 88
	for terminal 'REPEAT': shift and go to state 89
	for terminal 'SHOW': shift and go to state 90
	for terminal 'SKIP': shift and go to state 91
	for terminal 'STOP': shift and go to state 92
	for terminal 'STR': reduce using rule 79
	for terminal 'TEST': shift and go to state 93
	for terminal 'TUP': shift and go to state 38
	for terminal 'UNARY_LOGICAL_OPERATOR': shift and go to state 94
	for terminal 'UNARY_OPERATOR': shift and go to state 95
	for terminal 'WHILE': shift and go to state 96
	for terminal 'YIELD': reduce using rule 79

	for non-terminal DEFINE: go to state 52
	for non-terminal FIX: go to state 25
	for non-terminal GIVEN: go to state 53
	for non-terminal IDENTIFIER: go to state 54
	for non-terminal ITER: go to state 55
	for non-terminal LET: go to state 26
	for non-terminal LIST: go to state 27
	for non-terminal OPEN_BRACES: go to state 56
	for non-terminal POP: go to state 57
	for non-terminal REPEAT: go to state 58
	for non-terminal SHOW: go to state 59
	for non-terminal SKIP: go to state 60
	for non-terminal STOP: go to state 61
	for non-terminal TEST: go to state 62
	for non-terminal TUP: go to state 28
	for non-terminal UNARY_LOGICAL_OPERATOR: go to state 63
	for non-terminal UNARY_OPERATOR: go to state 64
	for non-terminal WHILE: go to state 65
	for non-terminal array: go to state 66
	for non-terminal assignment_statement: go to state 67
	for non-terminal basic_data_type: go to state 68
	for non-terminal block: go to state 69
	for non-terminal compound_array: go to state 70
	for non-terminal compound_data_type: go to state 71
	for non-terminal conditional_statement: go to state 72
	for non-terminal epsilon: go to state 73
	for non-terminal fix_let: go to state 32
	for non-terminal func_def: go to state 74
	for non-terminal function_call: go to state 75
	for non-terminal loop_statement: go to state 76
	for non-terminal pop_statement: go to state 77
	for non-terminal show_statement: go to state 78
	for non-terminal skip_stop: go to state 79
	for non-terminal statement: go to state 80
	for non-terminal statements: go to state 133
	for non-terminal try_catch_statement: go to state 82
	for non-terminal unary_operators: go to state 83
	for non-terminal value_change_array: go to state 84
	for non-terminal variable_declaration: go to state 85

State 81
	126  program: DEFINE NUM MAIN OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES statements . YIELD NUM_LITERAL END_OF_LINE CLOSE_BRACES

	for terminal 'YIELD': shift and go to state 135

	for non-terminal YIELD: go to state 134

State 82
	149  statement: try_catch_statement .

	for terminal 'CLOSE_BRACES': reduce using rule 149
	for terminal 'DEFINE': reduce using rule 149
	for terminal 'END_OF_LINE': reduce using rule 149
	for terminal 'FIX': reduce using rule 149
	for terminal 'FLAG': reduce using rule 149
	for terminal 'GIVEN': reduce using rule 149
	for terminal 'IDENTIFIER': reduce using rule 149
	for terminal 'ITER': reduce using rule 149
	for terminal 'LENGTH': reduce using rule 149
	for terminal 'LET': reduce using rule 149
	for terminal 'LIST': reduce using rule 149
	for terminal 'NAY': reduce using rule 149
	for terminal 'NUM': reduce using rule 149
	for terminal 'NUM_LITERAL': reduce using rule 149
	for terminal 'OPEN_BRACES': reduce using rule 149
	for terminal 'OPEN_PARENTHESIS': reduce using rule 149
	for terminal 'POP': reduce using rule 149
	for terminal 'REPEAT': reduce using rule 149
	for terminal 'SHOW': reduce using rule 149
	for terminal 'SKIP': reduce using rule 149
	for terminal 'STOP': reduce using rule 149
	for terminal 'STR': reduce using rule 149
	for terminal 'TEST': reduce using rule 149
	for terminal 'TILDE': reduce using rule 149
	for terminal 'TUP': reduce using rule 149
	for terminal 'UNARY_LOGICAL_OPERATOR': reduce using rule 149
	for terminal 'UNARY_OPERATOR': reduce using rule 149
	for terminal 'WHILE': reduce using rule 149
	for terminal 'YAY': reduce using rule 149
	for terminal 'YIELD': reduce using rule 149

State 83
	151  statement: unary_operators . IDENTIFIER END_OF_LINE

	for terminal 'IDENTIFIER': shift and go to state 19

	for non-terminal IDENTIFIER: go to state 136

State 84
	147  statement: value_change_array . END_OF_LINE

	for terminal 'END_OF_LINE': shift and go to state 123

	for non-terminal END_OF_LINE: go to state 137

State 85
	141  statement: variable_declaration . END_OF_LINE

	for terminal 'END_OF_LINE': shift and go to state 123

	for non-terminal END_OF_LINE: go to state 138

State 86
	17   GIVEN: 'GIVEN' .

	for terminal 'OPEN_PARENTHESIS': reduce using rule 17

State 87
	22   ITER: 'ITER' .

	for terminal 'OPEN_PARENTHESIS': reduce using rule 22

State 88
	35   POP: 'POP' .

	for terminal 'OPEN_PARENTHESIS': reduce using rule 35

State 89
	36   REPEAT: 'REPEAT' .

	for terminal 'OPEN_BRACES': reduce using rule 36

State 90
	37   SHOW: 'SHOW' .

	for terminal 'OPEN_PARENTHESIS': reduce using rule 37

State 91
	38   SKIP: 'SKIP' .

	for terminal 'END_OF_LINE': reduce using rule 38

State 92
	40   STOP: 'STOP' .

	for terminal 'END_OF_LINE': reduce using rule 40

State 93
	44   TEST: 'TEST' .

	for terminal 'OPEN_BRACES': reduce using rule 44

State 94
	47   UNARY_LOGICAL_OPERATOR: 'UNARY_LOGICAL_OPERATOR' .

	for terminal 'IDENTIFIER': reduce using rule 47

State 95
	48   UNARY_OPERATOR: 'UNARY_OPERATOR' .

	for terminal 'BINARY_LOGICAL_OPERATOR': reduce using rule 48
	for terminal 'BINARY_OPERATOR': reduce using rule 48
	for terminal 'CLOSE_BRACES': reduce using rule 48
	for terminal 'CLOSE_BRACKET': reduce using rule 48
	for terminal 'CLOSE_PARENTHESIS': reduce using rule 48
	for terminal 'COMPARISON_OPERATOR': reduce using rule 48
	for terminal 'ELEMENT_SEPERATOR': reduce using rule 48
	for terminal 'END_OF_LINE': reduce using rule 48
	for terminal 'IDENTIFIER': reduce using rule 48
	for terminal 'IN': reduce using rule 48
	for terminal ELEMENT_SEPARATOR: reduce using rule 48

State 96
	50   WHILE: 'WHILE' .

	for terminal 'OPEN_PARENTHESIS': reduce using rule 50

State 97
	63   choose_array: OPEN_BRACKET . NUM_LITERAL CLOSE_BRACKET

	for terminal 'NUM_LITERAL': shift and go to state 140

	for non-terminal NUM_LITERAL: go to state 139

State 98
	116  parameter: basic_data_type IDENTIFIER choose_array .

	for terminal 'CLOSE_PARENTHESIS': reduce using rule 116
	for terminal 'ELEMENT_SEPERATOR': reduce using rule 116

State 99
	64   choose_array: epsilon .

	for terminal 'CLOSE_PARENTHESIS': reduce using rule 64
	for terminal 'ELEMENT_SEPERATOR': reduce using rule 64

State 100
	31   OPEN_BRACKET: 'OPEN_BRACKET' .

	for terminal 'CLOSE_BRACKET': reduce using rule 31
	for terminal 'ELEMENT_SEPERATOR': reduce using rule 31
	for terminal 'IDENTIFIER': reduce using rule 31
	for terminal 'LENGTH': reduce using rule 31
	for terminal 'NAY': reduce using rule 31
	for terminal 'NUM_LITERAL': reduce using rule 31
	for terminal 'OPEN_PARENTHESIS': reduce using rule 31
	for terminal 'TILDE': reduce using rule 31
	for terminal 'UNARY_LOGICAL_OPERATOR': reduce using rule 31
	for terminal 'UNARY_OPERATOR': reduce using rule 31
	for terminal 'YAY': reduce using rule 31

State 101
	88   fix_let: epsilon .

	for terminal 'FLAG': reduce using rule 88
	for terminal 'NUM': reduce using rule 88
	for terminal 'STR': reduce using rule 88

State 102
	119  parameters: ELEMENT_SEPERATOR parameter . parameters

	for terminal 'CLOSE_PARENTHESIS': reduce using rule 79
	for terminal 'ELEMENT_SEPERATOR': shift and go to state 50

	for non-terminal ELEMENT_SEPERATOR: go to state 47
	for non-terminal epsilon: go to state 48
	for non-terminal parameters: go to state 141

State 103
	90   function_block: OPEN_BRACES . statements YIELD return_value END_OF_LINE CLOSE_BRACES

	for terminal 'DEFINE': shift and go to state 5
	for terminal 'FIX': shift and go to state 35
	for terminal 'FLAG': reduce using rule 79
	for terminal 'GIVEN': shift and go to state 86
	for terminal 'IDENTIFIER': shift and go to state 19
	for terminal 'ITER': shift and go to state 87
	for terminal 'LET': shift and go to state 36
	for terminal 'LIST': shift and go to state 37
	for terminal 'NUM': reduce using rule 79
	for terminal 'OPEN_BRACES': shift and go to state 40
	for terminal 'POP': shift and go to state 88
	for terminal 'REPEAT': shift and go to state 89
	for terminal 'SHOW': shift and go to state 90
	for terminal 'SKIP': shift and go to state 91
	for terminal 'STOP': shift and go to state 92
	for terminal 'STR': reduce using rule 79
	for terminal 'TEST': shift and go to state 93
	for terminal 'TUP': shift and go to state 38
	for terminal 'UNARY_LOGICAL_OPERATOR': shift and go to state 94
	for terminal 'UNARY_OPERATOR': shift and go to state 95
	for terminal 'WHILE': shift and go to state 96
	for terminal 'YIELD': reduce using rule 79

	for non-terminal DEFINE: go to state 52
	for non-terminal FIX: go to state 25
	for non-terminal GIVEN: go to state 53
	for non-terminal IDENTIFIER: go to state 54
	for non-terminal ITER: go to state 55
	for non-terminal LET: go to state 26
	for non-terminal LIST: go to state 27
	for non-terminal OPEN_BRACES: go to state 56
	for non-terminal POP: go to state 57
	for non-terminal REPEAT: go to state 58
	for non-terminal SHOW: go to state 59
	for non-terminal SKIP: go to state 60
	for non-terminal STOP: go to state 61
	for non-terminal TEST: go to state 62
	for non-terminal TUP: go to state 28
	for non-terminal UNARY_LOGICAL_OPERATOR: go to state 63
	for non-terminal UNARY_OPERATOR: go to state 64
	for non-terminal WHILE: go to state 65
	for non-terminal array: go to state 66
	for non-terminal assignment_statement: go to state 67
	for non-terminal basic_data_type: go to state 68
	for non-terminal block: go to state 69
	for non-terminal compound_array: go to state 70
	for non-terminal compound_data_type: go to state 71
	for non-terminal conditional_statement: go to state 72
	for non-terminal epsilon: go to state 73
	for non-terminal fix_let: go to state 32
	for non-terminal func_def: go to state 74
	for non-terminal function_call: go to state 75
	for non-terminal loop_statement: go to state 76
	for non-terminal pop_statement: go to state 77
	for non-terminal show_statement: go to state 78
	for non-terminal skip_stop: go to state 79
	for non-terminal statement: go to state 80
	for non-terminal statements: go to state 142
	for non-terminal try_catch_statement: go to state 82
	for non-terminal unary_operators: go to state 83
	for non-terminal value_change_array: go to state 84
	for non-terminal variable_declaration: go to state 85

State 104
	89   func_def: DEFINE function_type IDENTIFIER OPEN_PARENTHESIS parameter_list CLOSE_PARENTHESIS function_block .

	for terminal 'CLOSE_BRACES': reduce using rule 89
	for terminal 'DEFINE': reduce using rule 89
	for terminal 'END_OF_LINE': reduce using rule 89
	for terminal 'FIX': reduce using rule 89
	for terminal 'FLAG': reduce using rule 89
	for terminal 'GIVEN': reduce using rule 89
	for terminal 'IDENTIFIER': reduce using rule 89
	for terminal 'ITER': reduce using rule 89
	for terminal 'LENGTH': reduce using rule 89
	for terminal 'LET': reduce using rule 89
	for terminal 'LIST': reduce using rule 89
	for terminal 'NAY': reduce using rule 89
	for terminal 'NUM': reduce using rule 89
	for terminal 'NUM_LITERAL': reduce using rule 89
	for terminal 'OPEN_BRACES': reduce using rule 89
	for terminal 'OPEN_PARENTHESIS': reduce using rule 89
	for terminal 'POP': reduce using rule 89
	for terminal 'REPEAT': reduce using rule 89
	for terminal 'SHOW': reduce using rule 89
	for terminal 'SKIP': reduce using rule 89
	for terminal 'STOP': reduce using rule 89
	for terminal 'STR': reduce using rule 89
	for terminal 'TEST': reduce using rule 89
	for terminal 'TILDE': reduce using rule 89
	for terminal 'TUP': reduce using rule 89
	for terminal 'UNARY_LOGICAL_OPERATOR': reduce using rule 89
	for terminal 'UNARY_OPERATOR': reduce using rule 89
	for terminal 'WHILE': reduce using rule 89
	for terminal 'YAY': reduce using rule 89
	for terminal 'YIELD': reduce using rule 89

State 105
	92   function_type: NUM .

	for terminal 'IDENTIFIER': reduce using rule 92

State 106
	75   conditional_statement: GIVEN OPEN_PARENTHESIS . conditional_argument CLOSE_PARENTHESIS conditional_block other_block otherwise_block

	for terminal 'CLOSE_PARENTHESIS': reduce using rule 79
	for terminal 'HEAD': shift and go to state 160
	for terminal 'IDENTIFIER': shift and go to state 19
	for terminal 'ISEMPTY': shift and go to state 161
	for terminal 'LENGTH': shift and go to state 162
	for terminal 'NAY': shift and go to state 163
	for terminal 'NUM_LITERAL': shift and go to state 140
	for terminal 'OPEN_PARENTHESIS': shift and go to state 21
	for terminal 'TILDE': shift and go to state 164
	for terminal 'UNARY_LOGICAL_OPERATOR': shift and go to state 94
	for terminal 'UNARY_OPERATOR': shift and go to state 95
	for terminal 'YAY': shift and go to state 165

	for non-terminal HEAD: go to state 143
	for non-terminal IDENTIFIER: go to state 144
	for non-terminal ISEMPTY: go to state 145
	for non-terminal LENGTH: go to state 146
	for non-terminal NAY: go to state 147
	for non-terminal NUM_LITERAL: go to state 148
	for non-terminal OPEN_PARENTHESIS: go to state 149
	for non-terminal TILDE: go to state 150
	for non-terminal UNARY_LOGICAL_OPERATOR: go to state 63
	for non-terminal UNARY_OPERATOR: go to state 64
	for non-terminal YAY: go to state 151
	for non-terminal conditional_argument: go to state 152
	for non-terminal epsilon: go to state 153
	for non-terminal expression: go to state 154
	for non-terminal function_call: go to state 155
	for non-terminal special_function: go to state 156
	for non-terminal string: go to state 157
	for non-terminal term: go to state 158
	for non-terminal unary_operators: go to state 159

State 107
	56   assignment_operators: ASSIGNMENT_OPERATOR .

	for terminal 'END_OF_LINE': reduce using rule 56
	for terminal 'ENTER': reduce using rule 56
	for terminal 'HEAD': reduce using rule 56
	for terminal 'IDENTIFIER': reduce using rule 56
	for terminal 'ISEMPTY': reduce using rule 56
	for terminal 'LENGTH': reduce using rule 56
	for terminal 'LET': reduce using rule 56
	for terminal 'NAY': reduce using rule 56
	for terminal 'NUM_LITERAL': reduce using rule 56
	for terminal 'OPEN_PARENTHESIS': reduce using rule 56
	for terminal 'TILDE': reduce using rule 56
	for terminal 'UNARY_LOGICAL_OPERATOR': reduce using rule 56
	for terminal 'UNARY_OPERATOR': reduce using rule 56
	for terminal 'YAY': reduce using rule 56

State 108
	55   assignment_operators: EQUAL_TO .

	for terminal 'END_OF_LINE': reduce using rule 55
	for terminal 'ENTER': reduce using rule 55
	for terminal 'HEAD': reduce using rule 55
	for terminal 'IDENTIFIER': reduce using rule 55
	for terminal 'ISEMPTY': reduce using rule 55
	for terminal 'LENGTH': reduce using rule 55
	for terminal 'LET': reduce using rule 55
	for terminal 'NAY': reduce using rule 55
	for terminal 'NUM_LITERAL': reduce using rule 55
	for terminal 'OPEN_PARENTHESIS': reduce using rule 55
	for terminal 'TILDE': reduce using rule 55
	for terminal 'UNARY_LOGICAL_OPERATOR': reduce using rule 55
	for terminal 'UNARY_OPERATOR': reduce using rule 55
	for terminal 'YAY': reduce using rule 55

State 109
	172  value_change_array: IDENTIFIER OPEN_BRACKET . NUM_LITERAL CLOSE_BRACKET assignment_operators expression

	for terminal 'NUM_LITERAL': shift and go to state 140

	for non-terminal NUM_LITERAL: go to state 166

State 110
	91   function_call: IDENTIFIER OPEN_PARENTHESIS . argument_list CLOSE_PARENTHESIS

	for terminal 'CLOSE_PARENTHESIS': reduce using rule 79
	for terminal 'ELEMENT_SEPERATOR': reduce using rule 79
	for terminal 'IDENTIFIER': shift and go to state 19
	for terminal 'LENGTH': shift and go to state 162
	for terminal 'NAY': shift and go to state 163
	for terminal 'NUM_LITERAL': shift and go to state 140
	for terminal 'OPEN_PARENTHESIS': shift and go to state 21
	for terminal 'TILDE': shift and go to state 164
	for terminal 'UNARY_LOGICAL_OPERATOR': shift and go to state 94
	for terminal 'UNARY_OPERATOR': shift and go to state 95
	for terminal 'YAY': shift and go to state 165

	for non-terminal IDENTIFIER: go to state 167
	for non-terminal LENGTH: go to state 168
	for non-terminal NAY: go to state 147
	for non-terminal NUM_LITERAL: go to state 148
	for non-terminal OPEN_PARENTHESIS: go to state 149
	for non-terminal TILDE: go to state 150
	for non-terminal UNARY_LOGICAL_OPERATOR: go to state 63
	for non-terminal UNARY_OPERATOR: go to state 64
	for non-terminal YAY: go to state 151
	for non-terminal argument_list: go to state 169
	for non-terminal epsilon: go to state 153
	for non-terminal expression: go to state 170
	for non-terminal string: go to state 157
	for non-terminal term: go to state 158
	for non-terminal unary_operators: go to state 159

State 111
	152  statement: IDENTIFIER UNARY_OPERATOR . END_OF_LINE

	for terminal 'END_OF_LINE': shift and go to state 123

	for non-terminal END_OF_LINE: go to state 171

State 112
	57   assignment_statement: IDENTIFIER assignment_operators . post_equal_to

	for terminal 'END_OF_LINE': reduce using rule 79
	for terminal 'ENTER': shift and go to state 178
	for terminal 'HEAD': shift and go to state 160
	for terminal 'IDENTIFIER': shift and go to state 19
	for terminal 'ISEMPTY': shift and go to state 161
	for terminal 'LENGTH': shift and go to state 162
	for terminal 'LET': shift and go to state 36
	for terminal 'NAY': shift and go to state 163
	for terminal 'NUM_LITERAL': shift and go to state 140
	for terminal 'OPEN_PARENTHESIS': shift and go to state 21
	for terminal 'TILDE': shift and go to state 164
	for terminal 'UNARY_LOGICAL_OPERATOR': shift and go to state 94
	for terminal 'UNARY_OPERATOR': shift and go to state 95
	for terminal 'YAY': shift and go to state 165

	for non-terminal ENTER: go to state 172
	for non-terminal HEAD: go to state 143
	for non-terminal IDENTIFIER: go to state 144
	for non-terminal ISEMPTY: go to state 145
	for non-terminal LENGTH: go to state 146
	for non-terminal LET: go to state 173
	for non-terminal NAY: go to state 147
	for non-terminal NUM_LITERAL: go to state 148
	for non-terminal OPEN_PARENTHESIS: go to state 149
	for non-terminal TILDE: go to state 150
	for non-terminal UNARY_LOGICAL_OPERATOR: go to state 63
	for non-terminal UNARY_OPERATOR: go to state 64
	for non-terminal YAY: go to state 151
	for non-terminal epsilon: go to state 153
	for non-terminal expression: go to state 174
	for non-terminal function_call: go to state 155
	for non-terminal let_in_statement: go to state 175
	for non-terminal post_equal_to: go to state 176
	for non-terminal special_function: go to state 177
	for non-terminal string: go to state 157
	for non-terminal term: go to state 158
	for non-terminal unary_operators: go to state 159

State 113
	3    ASSIGNMENT_OPERATOR: 'ASSIGNMENT_OPERATOR' .

	for terminal 'END_OF_LINE': reduce using rule 3
	for terminal 'ENTER': reduce using rule 3
	for terminal 'HEAD': reduce using rule 3
	for terminal 'IDENTIFIER': reduce using rule 3
	for terminal 'ISEMPTY': reduce using rule 3
	for terminal 'LENGTH': reduce using rule 3
	for terminal 'LET': reduce using rule 3
	for terminal 'NAY': reduce using rule 3
	for terminal 'NUM_LITERAL': reduce using rule 3
	for terminal 'OPEN_PARENTHESIS': reduce using rule 3
	for terminal 'TILDE': reduce using rule 3
	for terminal 'UNARY_LOGICAL_OPERATOR': reduce using rule 3
	for terminal 'UNARY_OPERATOR': reduce using rule 3
	for terminal 'YAY': reduce using rule 3

State 114
	14   EQUAL_TO: 'EQUAL_TO' .

	for terminal 'APPEND': reduce using rule 14
	for terminal 'END_OF_LINE': reduce using rule 14
	for terminal 'ENTER': reduce using rule 14
	for terminal 'HEAD': reduce using rule 14
	for terminal 'IDENTIFIER': reduce using rule 14
	for terminal 'ISEMPTY': reduce using rule 14
	for terminal 'LENGTH': reduce using rule 14
	for terminal 'LET': reduce using rule 14
	for terminal 'NAY': reduce using rule 14
	for terminal 'NUM_LITERAL': reduce using rule 14
	for terminal 'OPEN_BRACES': reduce using rule 14
	for terminal 'OPEN_BRACKET': reduce using rule 14
	for terminal 'OPEN_PARENTHESIS': reduce using rule 14
	for terminal 'TAIL': reduce using rule 14
	for terminal 'TILDE': reduce using rule 14
	for terminal 'UNARY_LOGICAL_OPERATOR': reduce using rule 14
	for terminal 'UNARY_OPERATOR': reduce using rule 14
	for terminal 'YAY': reduce using rule 14

State 115
	105  loop_statement: ITER OPEN_PARENTHESIS . statement expression END_OF_LINE expression CLOSE_PARENTHESIS block

	for terminal 'DEFINE': shift and go to state 5
	for terminal 'FIX': shift and go to state 35
	for terminal 'FLAG': reduce using rule 79
	for terminal 'GIVEN': shift and go to state 86
	for terminal 'IDENTIFIER': shift and go to state 19
	for terminal 'ITER': shift and go to state 87
	for terminal 'LET': shift and go to state 36
	for terminal 'LIST': shift and go to state 37
	for terminal 'NUM': reduce using rule 79
	for terminal 'OPEN_BRACES': shift and go to state 40
	for terminal 'POP': shift and go to state 88
	for terminal 'REPEAT': shift and go to state 89
	for terminal 'SHOW': shift and go to state 90
	for terminal 'SKIP': shift and go to state 91
	for terminal 'STOP': shift and go to state 92
	for terminal 'STR': reduce using rule 79
	for terminal 'TEST': shift and go to state 93
	for terminal 'TUP': shift and go to state 38
	for terminal 'UNARY_LOGICAL_OPERATOR': shift and go to state 94
	for terminal 'UNARY_OPERATOR': shift and go to state 95
	for terminal 'WHILE': shift and go to state 96

	for non-terminal DEFINE: go to state 52
	for non-terminal FIX: go to state 25
	for non-terminal GIVEN: go to state 53
	for non-terminal IDENTIFIER: go to state 54
	for non-terminal ITER: go to state 55
	for non-terminal LET: go to state 26
	for non-terminal LIST: go to state 27
	for non-terminal OPEN_BRACES: go to state 56
	for non-terminal POP: go to state 57
	for non-terminal REPEAT: go to state 58
	for non-terminal SHOW: go to state 59
	for non-terminal SKIP: go to state 60
	for non-terminal STOP: go to state 61
	for non-terminal TEST: go to state 62
	for non-terminal TUP: go to state 28
	for non-terminal UNARY_LOGICAL_OPERATOR: go to state 63
	for non-terminal UNARY_OPERATOR: go to state 64
	for non-terminal WHILE: go to state 65
	for non-terminal array: go to state 66
	for non-terminal assignment_statement: go to state 67
	for non-terminal basic_data_type: go to state 68
	for non-terminal block: go to state 69
	for non-terminal compound_array: go to state 70
	for non-terminal compound_data_type: go to state 71
	for non-terminal conditional_statement: go to state 72
	for non-terminal epsilon: go to state 101
	for non-terminal fix_let: go to state 32
	for non-terminal func_def: go to state 74
	for non-terminal function_call: go to state 75
	for non-terminal loop_statement: go to state 76
	for non-terminal pop_statement: go to state 77
	for non-terminal show_statement: go to state 78
	for non-terminal skip_stop: go to state 79
	for non-terminal statement: go to state 179
	for non-terminal try_catch_statement: go to state 82
	for non-terminal unary_operators: go to state 83
	for non-terminal value_change_array: go to state 84
	for non-terminal variable_declaration: go to state 85

State 116
	62   block: OPEN_BRACES statements . CLOSE_BRACES

	for terminal 'CLOSE_BRACES': shift and go to state 181

	for non-terminal CLOSE_BRACES: go to state 180

State 117
	121  pop_statement: POP OPEN_PARENTHESIS . string CLOSE_PARENTHESIS

	for terminal 'TILDE': shift and go to state 164

	for non-terminal TILDE: go to state 150
	for non-terminal string: go to state 182

State 118
	107  loop_statement: REPEAT block . WHILE OPEN_PARENTHESIS conditional_argument CLOSE_PARENTHESIS END_OF_LINE

	for terminal 'WHILE': shift and go to state 96

	for non-terminal WHILE: go to state 183

State 119
	130  show_statement: SHOW OPEN_PARENTHESIS . expression expressions CLOSE_PARENTHESIS

	for terminal 'CLOSE_PARENTHESIS': reduce using rule 79
	for terminal 'ELEMENT_SEPERATOR': reduce using rule 79
	for terminal 'IDENTIFIER': shift and go to state 19
	for terminal 'LENGTH': shift and go to state 162
	for terminal 'NAY': shift and go to state 163
	for terminal 'NUM_LITERAL': shift and go to state 140
	for terminal 'OPEN_PARENTHESIS': shift and go to state 21
	for terminal 'TILDE': shift and go to state 164
	for terminal 'UNARY_LOGICAL_OPERATOR': shift and go to state 94
	for terminal 'UNARY_OPERATOR': shift and go to state 95
	for terminal 'YAY': shift and go to state 165

	for non-terminal IDENTIFIER: go to state 167
	for non-terminal LENGTH: go to state 168
	for non-terminal NAY: go to state 147
	for non-terminal NUM_LITERAL: go to state 148
	for non-terminal OPEN_PARENTHESIS: go to state 149
	for non-terminal TILDE: go to state 150
	for non-terminal UNARY_LOGICAL_OPERATOR: go to state 63
	for non-terminal UNARY_OPERATOR: go to state 64
	for non-terminal YAY: go to state 151
	for non-terminal epsilon: go to state 153
	for non-terminal expression: go to state 184
	for non-terminal string: go to state 157
	for non-terminal term: go to state 158
	for non-terminal unary_operators: go to state 159

State 120
	169  try_catch_statement: TEST block . ARREST OPEN_PARENTHESIS string CLOSE_PARENTHESIS block

	for terminal 'ARREST': shift and go to state 186

	for non-terminal ARREST: go to state 185

State 121
	106  loop_statement: WHILE OPEN_PARENTHESIS . conditional_argument CLOSE_PARENTHESIS block

	for terminal 'CLOSE_PARENTHESIS': reduce using rule 79
	for terminal 'HEAD': shift and go to state 160
	for terminal 'IDENTIFIER': shift and go to state 19
	for terminal 'ISEMPTY': shift and go to state 161
	for terminal 'LENGTH': shift and go to state 162
	for terminal 'NAY': shift and go to state 163
	for terminal 'NUM_LITERAL': shift and go to state 140
	for terminal 'OPEN_PARENTHESIS': shift and go to state 21
	for terminal 'TILDE': shift and go to state 164
	for terminal 'UNARY_LOGICAL_OPERATOR': shift and go to state 94
	for terminal 'UNARY_OPERATOR': shift and go to state 95
	for terminal 'YAY': shift and go to state 165

	for non-terminal HEAD: go to state 143
	for non-terminal IDENTIFIER: go to state 144
	for non-terminal ISEMPTY: go to state 145
	for non-terminal LENGTH: go to state 146
	for non-terminal NAY: go to state 147
	for non-terminal NUM_LITERAL: go to state 148
	for non-terminal OPEN_PARENTHESIS: go to state 149
	for non-terminal TILDE: go to state 150
	for non-terminal UNARY_LOGICAL_OPERATOR: go to state 63
	for non-terminal UNARY_OPERATOR: go to state 64
	for non-terminal YAY: go to state 151
	for non-terminal conditional_argument: go to state 187
	for non-terminal epsilon: go to state 153
	for non-terminal expression: go to state 154
	for non-terminal function_call: go to state 155
	for non-terminal special_function: go to state 156
	for non-terminal string: go to state 157
	for non-terminal term: go to state 158
	for non-terminal unary_operators: go to state 159

State 122
	142  statement: assignment_statement END_OF_LINE .

	for terminal 'CLOSE_BRACES': reduce using rule 142
	for terminal 'DEFINE': reduce using rule 142
	for terminal 'END_OF_LINE': reduce using rule 142
	for terminal 'FIX': reduce using rule 142
	for terminal 'FLAG': reduce using rule 142
	for terminal 'GIVEN': reduce using rule 142
	for terminal 'IDENTIFIER': reduce using rule 142
	for terminal 'ITER': reduce using rule 142
	for terminal 'LENGTH': reduce using rule 142
	for terminal 'LET': reduce using rule 142
	for terminal 'LIST': reduce using rule 142
	for terminal 'NAY': reduce using rule 142
	for terminal 'NUM': reduce using rule 142
	for terminal 'NUM_LITERAL': reduce using rule 142
	for terminal 'OPEN_BRACES': reduce using rule 142
	for terminal 'OPEN_PARENTHESIS': reduce using rule 142
	for terminal 'POP': reduce using rule 142
	for terminal 'REPEAT': reduce using rule 142
	for terminal 'SHOW': reduce using rule 142
	for terminal 'SKIP': reduce using rule 142
	for terminal 'STOP': reduce using rule 142
	for terminal 'STR': reduce using rule 142
	for terminal 'TEST': reduce using rule 142
	for terminal 'TILDE': reduce using rule 142
	for terminal 'TUP': reduce using rule 142
	for terminal 'UNARY_LOGICAL_OPERATOR': reduce using rule 142
	for terminal 'UNARY_OPERATOR': reduce using rule 142
	for terminal 'WHILE': reduce using rule 142
	for terminal 'YAY': reduce using rule 142
	for terminal 'YIELD': reduce using rule 142

State 123
	12   END_OF_LINE: 'END_OF_LINE' .

	for terminal 'CLOSE_BRACES': reduce using rule 12
	for terminal 'CLOSE_PARENTHESIS': reduce using rule 12
	for terminal 'DEFINE': reduce using rule 12
	for terminal 'END_OF_LINE': reduce using rule 12
	for terminal 'FIX': reduce using rule 12
	for terminal 'FLAG': reduce using rule 12
	for terminal 'GIVEN': reduce using rule 12
	for terminal 'IDENTIFIER': reduce using rule 12
	for terminal 'ITER': reduce using rule 12
	for terminal 'LENGTH': reduce using rule 12
	for terminal 'LET': reduce using rule 12
	for terminal 'LIST': reduce using rule 12
	for terminal 'NAY': reduce using rule 12
	for terminal 'NUM': reduce using rule 12
	for terminal 'NUM_LITERAL': reduce using rule 12
	for terminal 'OPEN_BRACES': reduce using rule 12
	for terminal 'OPEN_PARENTHESIS': reduce using rule 12
	for terminal 'POP': reduce using rule 12
	for terminal 'REPEAT': reduce using rule 12
	for terminal 'SHOW': reduce using rule 12
	for terminal 'SKIP': reduce using rule 12
	for terminal 'STOP': reduce using rule 12
	for terminal 'STR': reduce using rule 12
	for terminal 'TEST': reduce using rule 12
	for terminal 'TILDE': reduce using rule 12
	for terminal 'TUP': reduce using rule 12
	for terminal 'UNARY_LOGICAL_OPERATOR': reduce using rule 12
	for terminal 'UNARY_OPERATOR': reduce using rule 12
	for terminal 'WHILE': reduce using rule 12
	for terminal 'YAY': reduce using rule 12
	for terminal 'YIELD': reduce using rule 12

State 124
	54   array: basic_data_type IDENTIFIER . OPEN_BRACKET NUM_LITERAL CLOSE_BRACKET
	173  variable_declaration: basic_data_type IDENTIFIER . equal_to

	for terminal 'END_OF_LINE': reduce using rule 79
	for terminal 'EQUAL_TO': shift and go to state 114
	for terminal 'OPEN_BRACKET': shift and go to state 100

	for non-terminal EQUAL_TO: go to state 188
	for non-terminal OPEN_BRACKET: go to state 189
	for non-terminal epsilon: go to state 190
	for non-terminal equal_to: go to state 191

State 125
	69   compound_var: EQUAL_TO . list_append_tail

	for terminal 'APPEND': shift and go to state 196
	for terminal 'OPEN_BRACKET': shift and go to state 100
	for terminal 'TAIL': shift and go to state 197

	for non-terminal APPEND: go to state 192
	for non-terminal OPEN_BRACKET: go to state 193
	for non-terminal TAIL: go to state 194
	for non-terminal list_append_tail: go to state 195

State 126
	174  variable_declaration: compound_array compound_var .

	for terminal 'END_OF_LINE': reduce using rule 174

State 127
	70   compound_var: epsilon .

	for terminal 'END_OF_LINE': reduce using rule 70

State 128
	65   compound_array: compound_data_type IDENTIFIER .

	for terminal 'END_OF_LINE': reduce using rule 65
	for terminal 'EQUAL_TO': reduce using rule 65

State 129
	150  statement: function_call END_OF_LINE .

	for terminal 'CLOSE_BRACES': reduce using rule 150
	for terminal 'DEFINE': reduce using rule 150
	for terminal 'END_OF_LINE': reduce using rule 150
	for terminal 'FIX': reduce using rule 150
	for terminal 'FLAG': reduce using rule 150
	for terminal 'GIVEN': reduce using rule 150
	for terminal 'IDENTIFIER': reduce using rule 150
	for terminal 'ITER': reduce using rule 150
	for terminal 'LENGTH': reduce using rule 150
	for terminal 'LET': reduce using rule 150
	for terminal 'LIST': reduce using rule 150
	for terminal 'NAY': reduce using rule 150
	for terminal 'NUM': reduce using rule 150
	for terminal 'NUM_LITERAL': reduce using rule 150
	for terminal 'OPEN_BRACES': reduce using rule 150
	for terminal 'OPEN_PARENTHESIS': reduce using rule 150
	for terminal 'POP': reduce using rule 150
	for terminal 'REPEAT': reduce using rule 150
	for terminal 'SHOW': reduce using rule 150
	for terminal 'SKIP': reduce using rule 150
	for terminal 'STOP': reduce using rule 150
	for terminal 'STR': reduce using rule 150
	for terminal 'TEST': reduce using rule 150
	for terminal 'TILDE': reduce using rule 150
	for terminal 'TUP': reduce using rule 150
	for terminal 'UNARY_LOGICAL_OPERATOR': reduce using rule 150
	for terminal 'UNARY_OPERATOR': reduce using rule 150
	for terminal 'WHILE': reduce using rule 150
	for terminal 'YAY': reduce using rule 150
	for terminal 'YIELD': reduce using rule 150

State 130
	148  statement: pop_statement END_OF_LINE .

	for terminal 'CLOSE_BRACES': reduce using rule 148
	for terminal 'DEFINE': reduce using rule 148
	for terminal 'END_OF_LINE': reduce using rule 148
	for terminal 'FIX': reduce using rule 148
	for terminal 'FLAG': reduce using rule 148
	for terminal 'GIVEN': reduce using rule 148
	for terminal 'IDENTIFIER': reduce using rule 148
	for terminal 'ITER': reduce using rule 148
	for terminal 'LENGTH': reduce using rule 148
	for terminal 'LET': reduce using rule 148
	for terminal 'LIST': reduce using rule 148
	for terminal 'NAY': reduce using rule 148
	for terminal 'NUM': reduce using rule 148
	for terminal 'NUM_LITERAL': reduce using rule 148
	for terminal 'OPEN_BRACES': reduce using rule 148
	for terminal 'OPEN_PARENTHESIS': reduce using rule 148
	for terminal 'POP': reduce using rule 148
	for terminal 'REPEAT': reduce using rule 148
	for terminal 'SHOW': reduce using rule 148
	for terminal 'SKIP': reduce using rule 148
	for terminal 'STOP': reduce using rule 148
	for terminal 'STR': reduce using rule 148
	for terminal 'TEST': reduce using rule 148
	for terminal 'TILDE': reduce using rule 148
	for terminal 'TUP': reduce using rule 148
	for terminal 'UNARY_LOGICAL_OPERATOR': reduce using rule 148
	for terminal 'UNARY_OPERATOR': reduce using rule 148
	for terminal 'WHILE': reduce using rule 148
	for terminal 'YAY': reduce using rule 148
	for terminal 'YIELD': reduce using rule 148

State 131
	143  statement: show_statement END_OF_LINE .

	for terminal 'CLOSE_BRACES': reduce using rule 143
	for terminal 'DEFINE': reduce using rule 143
	for terminal 'END_OF_LINE': reduce using rule 143
	for terminal 'FIX': reduce using rule 143
	for terminal 'FLAG': reduce using rule 143
	for terminal 'GIVEN': reduce using rule 143
	for terminal 'IDENTIFIER': reduce using rule 143
	for terminal 'ITER': reduce using rule 143
	for terminal 'LENGTH': reduce using rule 143
	for terminal 'LET': reduce using rule 143
	for terminal 'LIST': reduce using rule 143
	for terminal 'NAY': reduce using rule 143
	for terminal 'NUM': reduce using rule 143
	for terminal 'NUM_LITERAL': reduce using rule 143
	for terminal 'OPEN_BRACES': reduce using rule 143
	for terminal 'OPEN_PARENTHESIS': reduce using rule 143
	for terminal 'POP': reduce using rule 143
	for terminal 'REPEAT': reduce using rule 143
	for terminal 'SHOW': reduce using rule 143
	for terminal 'SKIP': reduce using rule 143
	for terminal 'STOP': reduce using rule 143
	for terminal 'STR': reduce using rule 143
	for terminal 'TEST': reduce using rule 143
	for terminal 'TILDE': reduce using rule 143
	for terminal 'TUP': reduce using rule 143
	for terminal 'UNARY_LOGICAL_OPERATOR': reduce using rule 143
	for terminal 'UNARY_OPERATOR': reduce using rule 143
	for terminal 'WHILE': reduce using rule 143
	for terminal 'YAY': reduce using rule 143
	for terminal 'YIELD': reduce using rule 143

State 132
	146  statement: skip_stop END_OF_LINE .

	for terminal 'CLOSE_BRACES': reduce using rule 146
	for terminal 'DEFINE': reduce using rule 146
	for terminal 'END_OF_LINE': reduce using rule 146
	for terminal 'FIX': reduce using rule 146
	for terminal 'FLAG': reduce using rule 146
	for terminal 'GIVEN': reduce using rule 146
	for terminal 'IDENTIFIER': reduce using rule 146
	for terminal 'ITER': reduce using rule 146
	for terminal 'LENGTH': reduce using rule 146
	for terminal 'LET': reduce using rule 146
	for terminal 'LIST': reduce using rule 146
	for terminal 'NAY': reduce using rule 146
	for terminal 'NUM': reduce using rule 146
	for terminal 'NUM_LITERAL': reduce using rule 146
	for terminal 'OPEN_BRACES': reduce using rule 146
	for terminal 'OPEN_PARENTHESIS': reduce using rule 146
	for terminal 'POP': reduce using rule 146
	for terminal 'REPEAT': reduce using rule 146
	for terminal 'SHOW': reduce using rule 146
	for terminal 'SKIP': reduce using rule 146
	for terminal 'STOP': reduce using rule 146
	for terminal 'STR': reduce using rule 146
	for terminal 'TEST': reduce using rule 146
	for terminal 'TILDE': reduce using rule 146
	for terminal 'TUP': reduce using rule 146
	for terminal 'UNARY_LOGICAL_OPERATOR': reduce using rule 146
	for terminal 'UNARY_OPERATOR': reduce using rule 146
	for terminal 'WHILE': reduce using rule 146
	for terminal 'YAY': reduce using rule 146
	for terminal 'YIELD': reduce using rule 146

State 133
	154  statements: statement statements .

	for terminal 'CLOSE_BRACES': reduce using rule 154
	for terminal 'YIELD': reduce using rule 154

State 134
	126  program: DEFINE NUM MAIN OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES statements YIELD . NUM_LITERAL END_OF_LINE CLOSE_BRACES

	for terminal 'NUM_LITERAL': shift and go to state 140

	for non-terminal NUM_LITERAL: go to state 198

State 135
	52   YIELD: 'YIELD' .

	for terminal 'END_OF_LINE': reduce using rule 52
	for terminal 'IDENTIFIER': reduce using rule 52
	for terminal 'LENGTH': reduce using rule 52
	for terminal 'NAY': reduce using rule 52
	for terminal 'NUM_LITERAL': reduce using rule 52
	for terminal 'OPEN_PARENTHESIS': reduce using rule 52
	for terminal 'TILDE': reduce using rule 52
	for terminal 'UNARY_LOGICAL_OPERATOR': reduce using rule 52
	for terminal 'UNARY_OPERATOR': reduce using rule 52
	for terminal 'YAY': reduce using rule 52

State 136
	151  statement: unary_operators IDENTIFIER . END_OF_LINE

	for terminal 'END_OF_LINE': shift and go to state 123

	for non-terminal END_OF_LINE: go to state 199

State 137
	147  statement: value_change_array END_OF_LINE .

	for terminal 'CLOSE_BRACES': reduce using rule 147
	for terminal 'DEFINE': reduce using rule 147
	for terminal 'END_OF_LINE': reduce using rule 147
	for terminal 'FIX': reduce using rule 147
	for terminal 'FLAG': reduce using rule 147
	for terminal 'GIVEN': reduce using rule 147
	for terminal 'IDENTIFIER': reduce using rule 147
	for terminal 'ITER': reduce using rule 147
	for terminal 'LENGTH': reduce using rule 147
	for terminal 'LET': reduce using rule 147
	for terminal 'LIST': reduce using rule 147
	for terminal 'NAY': reduce using rule 147
	for terminal 'NUM': reduce using rule 147
	for terminal 'NUM_LITERAL': reduce using rule 147
	for terminal 'OPEN_BRACES': reduce using rule 147
	for terminal 'OPEN_PARENTHESIS': reduce using rule 147
	for terminal 'POP': reduce using rule 147
	for terminal 'REPEAT': reduce using rule 147
	for terminal 'SHOW': reduce using rule 147
	for terminal 'SKIP': reduce using rule 147
	for terminal 'STOP': reduce using rule 147
	for terminal 'STR': reduce using rule 147
	for terminal 'TEST': reduce using rule 147
	for terminal 'TILDE': reduce using rule 147
	for terminal 'TUP': reduce using rule 147
	for terminal 'UNARY_LOGICAL_OPERATOR': reduce using rule 147
	for terminal 'UNARY_OPERATOR': reduce using rule 147
	for terminal 'WHILE': reduce using rule 147
	for terminal 'YAY': reduce using rule 147
	for terminal 'YIELD': reduce using rule 147

State 138
	141  statement: variable_declaration END_OF_LINE .

	for terminal 'CLOSE_BRACES': reduce using rule 141
	for terminal 'DEFINE': reduce using rule 141
	for terminal 'END_OF_LINE': reduce using rule 141
	for terminal 'FIX': reduce using rule 141
	for terminal 'FLAG': reduce using rule 141
	for terminal 'GIVEN': reduce using rule 141
	for terminal 'IDENTIFIER': reduce using rule 141
	for terminal 'ITER': reduce using rule 141
	for terminal 'LENGTH': reduce using rule 141
	for terminal 'LET': reduce using rule 141
	for terminal 'LIST': reduce using rule 141
	for terminal 'NAY': reduce using rule 141
	for terminal 'NUM': reduce using rule 141
	for terminal 'NUM_LITERAL': reduce using rule 141
	for terminal 'OPEN_BRACES': reduce using rule 141
	for terminal 'OPEN_PARENTHESIS': reduce using rule 141
	for terminal 'POP': reduce using rule 141
	for terminal 'REPEAT': reduce using rule 141
	for terminal 'SHOW': reduce using rule 141
	for terminal 'SKIP': reduce using rule 141
	for terminal 'STOP': reduce using rule 141
	for terminal 'STR': reduce using rule 141
	for terminal 'TEST': reduce using rule 141
	for terminal 'TILDE': reduce using rule 141
	for terminal 'TUP': reduce using rule 141
	for terminal 'UNARY_LOGICAL_OPERATOR': reduce using rule 141
	for terminal 'UNARY_OPERATOR': reduce using rule 141
	for terminal 'WHILE': reduce using rule 141
	for terminal 'YAY': reduce using rule 141
	for terminal 'YIELD': reduce using rule 141

State 139
	63   choose_array: OPEN_BRACKET NUM_LITERAL . CLOSE_BRACKET

	for terminal 'CLOSE_BRACKET': shift and go to state 201

	for non-terminal CLOSE_BRACKET: go to state 200

State 140
	29   NUM_LITERAL: 'NUM_LITERAL' .

	for terminal 'BINARY_LOGICAL_OPERATOR': reduce using rule 29
	for terminal 'BINARY_OPERATOR': reduce using rule 29
	for terminal 'CLOSE_BRACES': reduce using rule 29
	for terminal 'CLOSE_BRACKET': reduce using rule 29
	for terminal 'CLOSE_PARENTHESIS': reduce using rule 29
	for terminal 'COMPARISON_OPERATOR': reduce using rule 29
	for terminal 'ELEMENT_SEPERATOR': reduce using rule 29
	for terminal 'END_OF_LINE': reduce using rule 29
	for terminal 'IN': reduce using rule 29
	for terminal 'SLICING_COLON': reduce using rule 29
	for terminal ELEMENT_SEPARATOR: reduce using rule 29

State 141
	119  parameters: ELEMENT_SEPERATOR parameter parameters .

	for terminal 'CLOSE_PARENTHESIS': reduce using rule 119

State 142
	90   function_block: OPEN_BRACES statements . YIELD return_value END_OF_LINE CLOSE_BRACES

	for terminal 'YIELD': shift and go to state 135

	for non-terminal YIELD: go to state 202

State 143
	136  special_function: HEAD . OPEN_PARENTHESIS IDENTIFIER CLOSE_PARENTHESIS

	for terminal 'OPEN_PARENTHESIS': shift and go to state 21

	for non-terminal OPEN_PARENTHESIS: go to state 203

State 144
	91   function_call: IDENTIFIER . OPEN_PARENTHESIS argument_list CLOSE_PARENTHESIS
	133  special_function: IDENTIFIER . OPEN_BRACKET NUM_LITERAL SLICING_COLON NUM_LITERAL CLOSE_BRACKET
	135  special_function: IDENTIFIER . OPEN_BRACKET NUM_LITERAL CLOSE_BRACKET
	157  term: IDENTIFIER .
	164  term: IDENTIFIER . UNARY_OPERATOR
	165  term: IDENTIFIER . OPEN_BRACKET expression CLOSE_BRACKET

	for terminal 'BINARY_LOGICAL_OPERATOR': reduce using rule 157
	for terminal 'BINARY_OPERATOR': reduce using rule 157
	for terminal 'CLOSE_PARENTHESIS': reduce using rule 157
	for terminal 'COMPARISON_OPERATOR': reduce using rule 157
	for terminal 'END_OF_LINE': reduce using rule 157
	for terminal 'OPEN_BRACKET': shift and go to state 100
	for terminal 'OPEN_PARENTHESIS': shift and go to state 21
	for terminal 'UNARY_OPERATOR': shift and go to state 95

	for non-terminal OPEN_BRACKET: go to state 204
	for non-terminal OPEN_PARENTHESIS: go to state 110
	for non-terminal UNARY_OPERATOR: go to state 205

State 145
	137  special_function: ISEMPTY . OPEN_PARENTHESIS IDENTIFIER CLOSE_PARENTHESIS

	for terminal 'OPEN_PARENTHESIS': shift and go to state 21

	for non-terminal OPEN_PARENTHESIS: go to state 206

State 146
	134  special_function: LENGTH . OPEN_PARENTHESIS IDENTIFIER CLOSE_PARENTHESIS
	166  term: LENGTH .

	for terminal 'BINARY_LOGICAL_OPERATOR': reduce using rule 166
	for terminal 'BINARY_OPERATOR': reduce using rule 166
	for terminal 'CLOSE_PARENTHESIS': reduce using rule 166
	for terminal 'COMPARISON_OPERATOR': reduce using rule 166
	for terminal 'END_OF_LINE': reduce using rule 166
	for terminal 'OPEN_PARENTHESIS': shift and go to state 21

	for non-terminal OPEN_PARENTHESIS: go to state 207

State 147
	161  term: NAY .

	for terminal 'BINARY_LOGICAL_OPERATOR': reduce using rule 161
	for terminal 'BINARY_OPERATOR': reduce using rule 161
	for terminal 'CLOSE_BRACES': reduce using rule 161
	for terminal 'CLOSE_BRACKET': reduce using rule 161
	for terminal 'CLOSE_PARENTHESIS': reduce using rule 161
	for terminal 'COMPARISON_OPERATOR': reduce using rule 161
	for terminal 'ELEMENT_SEPERATOR': reduce using rule 161
	for terminal 'END_OF_LINE': reduce using rule 161
	for terminal 'IN': reduce using rule 161
	for terminal ELEMENT_SEPARATOR: reduce using rule 161

State 148
	158  term: NUM_LITERAL .

	for terminal 'BINARY_LOGICAL_OPERATOR': reduce using rule 158
	for terminal 'BINARY_OPERATOR': reduce using rule 158
	for terminal 'CLOSE_BRACES': reduce using rule 158
	for terminal 'CLOSE_BRACKET': reduce using rule 158
	for terminal 'CLOSE_PARENTHESIS': reduce using rule 158
	for terminal 'COMPARISON_OPERATOR': reduce using rule 158
	for terminal 'ELEMENT_SEPERATOR': reduce using rule 158
	for terminal 'END_OF_LINE': reduce using rule 158
	for terminal 'IN': reduce using rule 158
	for terminal ELEMENT_SEPARATOR: reduce using rule 158

State 149
	162  term: OPEN_PARENTHESIS . expression CLOSE_PARENTHESIS

	for terminal 'CLOSE_PARENTHESIS': reduce using rule 79
	for terminal 'IDENTIFIER': shift and go to state 19
	for terminal 'LENGTH': shift and go to state 162
	for terminal 'NAY': shift and go to state 163
	for terminal 'NUM_LITERAL': shift and go to state 140
	for terminal 'OPEN_PARENTHESIS': shift and go to state 21
	for terminal 'TILDE': shift and go to state 164
	for terminal 'UNARY_LOGICAL_OPERATOR': shift and go to state 94
	for terminal 'UNARY_OPERATOR': shift and go to state 95
	for terminal 'YAY': shift and go to state 165

	for non-terminal IDENTIFIER: go to state 167
	for non-terminal LENGTH: go to state 168
	for non-terminal NAY: go to state 147
	for non-terminal NUM_LITERAL: go to state 148
	for non-terminal OPEN_PARENTHESIS: go to state 149
	for non-terminal TILDE: go to state 150
	for non-terminal UNARY_LOGICAL_OPERATOR: go to state 63
	for non-terminal UNARY_OPERATOR: go to state 64
	for non-terminal YAY: go to state 151
	for non-terminal epsilon: go to state 153
	for non-terminal expression: go to state 208
	for non-terminal string: go to state 157
	for non-terminal term: go to state 158
	for non-terminal unary_operators: go to state 159

State 150
	156  string: TILDE . STRING_LITERAL TILDE

	for terminal 'STRING_LITERAL': shift and go to state 210

	for non-terminal STRING_LITERAL: go to state 209

State 151
	160  term: YAY .

	for terminal 'BINARY_LOGICAL_OPERATOR': reduce using rule 160
	for terminal 'BINARY_OPERATOR': reduce using rule 160
	for terminal 'CLOSE_BRACES': reduce using rule 160
	for terminal 'CLOSE_BRACKET': reduce using rule 160
	for terminal 'CLOSE_PARENTHESIS': reduce using rule 160
	for terminal 'COMPARISON_OPERATOR': reduce using rule 160
	for terminal 'ELEMENT_SEPERATOR': reduce using rule 160
	for terminal 'END_OF_LINE': reduce using rule 160
	for terminal 'IN': reduce using rule 160
	for terminal ELEMENT_SEPARATOR: reduce using rule 160

State 152
	75   conditional_statement: GIVEN OPEN_PARENTHESIS conditional_argument . CLOSE_PARENTHESIS conditional_block other_block otherwise_block

	for terminal 'CLOSE_PARENTHESIS': shift and go to state 24

	for non-terminal CLOSE_PARENTHESIS: go to state 211

State 153
	83   expression: epsilon .

	for terminal 'CLOSE_BRACES': reduce using rule 83
	for terminal 'CLOSE_BRACKET': reduce using rule 83
	for terminal 'CLOSE_PARENTHESIS': reduce using rule 83
	for terminal 'ELEMENT_SEPERATOR': reduce using rule 83
	for terminal 'END_OF_LINE': reduce using rule 83
	for terminal ELEMENT_SEPARATOR: reduce using rule 83

State 154
	72   conditional_argument: expression .

	for terminal 'CLOSE_PARENTHESIS': reduce using rule 72

State 155
	138  special_function: function_call .

	for terminal 'COMPARISON_OPERATOR': reduce using rule 138
	for terminal 'END_OF_LINE': reduce using rule 138

State 156
	71   conditional_argument: special_function . COMPARISON_OPERATOR expression

	for terminal 'COMPARISON_OPERATOR': shift and go to state 213

	for non-terminal COMPARISON_OPERATOR: go to state 212

State 157
	159  term: string .

	for terminal 'BINARY_LOGICAL_OPERATOR': reduce using rule 159
	for terminal 'BINARY_OPERATOR': reduce using rule 159
	for terminal 'CLOSE_BRACES': reduce using rule 159
	for terminal 'CLOSE_BRACKET': reduce using rule 159
	for terminal 'CLOSE_PARENTHESIS': reduce using rule 159
	for terminal 'COMPARISON_OPERATOR': reduce using rule 159
	for terminal 'ELEMENT_SEPERATOR': reduce using rule 159
	for terminal 'END_OF_LINE': reduce using rule 159
	for terminal 'IN': reduce using rule 159
	for terminal ELEMENT_SEPARATOR: reduce using rule 159

State 158
	82   expression: term . terms

	for terminal 'BINARY_LOGICAL_OPERATOR': shift and go to state 220
	for terminal 'BINARY_OPERATOR': shift and go to state 221
	for terminal 'CLOSE_BRACES': reduce using rule 79
	for terminal 'CLOSE_BRACKET': reduce using rule 79
	for terminal 'CLOSE_PARENTHESIS': reduce using rule 79
	for terminal 'COMPARISON_OPERATOR': shift and go to state 213
	for terminal 'ELEMENT_SEPERATOR': reduce using rule 79
	for terminal 'END_OF_LINE': reduce using rule 79
	for terminal ELEMENT_SEPARATOR: reduce using rule 79

	for non-terminal BINARY_LOGICAL_OPERATOR: go to state 214
	for non-terminal BINARY_OPERATOR: go to state 215
	for non-terminal COMPARISON_OPERATOR: go to state 216
	for non-terminal binary_operators: go to state 217
	for non-terminal epsilon: go to state 218
	for non-terminal terms: go to state 219

State 159
	163  term: unary_operators . IDENTIFIER

	for terminal 'IDENTIFIER': shift and go to state 19

	for non-terminal IDENTIFIER: go to state 222

State 160
	18   HEAD: 'HEAD' .

	for terminal 'OPEN_PARENTHESIS': reduce using rule 18

State 161
	21   ISEMPTY: 'ISEMPTY' .

	for terminal 'OPEN_PARENTHESIS': reduce using rule 21

State 162
	23   LENGTH: 'LENGTH' .

	for terminal 'BINARY_LOGICAL_OPERATOR': reduce using rule 23
	for terminal 'BINARY_OPERATOR': reduce using rule 23
	for terminal 'CLOSE_BRACES': reduce using rule 23
	for terminal 'CLOSE_BRACKET': reduce using rule 23
	for terminal 'CLOSE_PARENTHESIS': reduce using rule 23
	for terminal 'COMPARISON_OPERATOR': reduce using rule 23
	for terminal 'ELEMENT_SEPERATOR': reduce using rule 23
	for terminal 'END_OF_LINE': reduce using rule 23
	for terminal 'IN': reduce using rule 23
	for terminal 'OPEN_PARENTHESIS': reduce using rule 23
	for terminal ELEMENT_SEPARATOR: reduce using rule 23

State 163
	27   NAY: 'NAY' .

	for terminal 'BINARY_LOGICAL_OPERATOR': reduce using rule 27
	for terminal 'BINARY_OPERATOR': reduce using rule 27
	for terminal 'CLOSE_BRACES': reduce using rule 27
	for terminal 'CLOSE_BRACKET': reduce using rule 27
	for terminal 'CLOSE_PARENTHESIS': reduce using rule 27
	for terminal 'COMPARISON_OPERATOR': reduce using rule 27
	for terminal 'ELEMENT_SEPERATOR': reduce using rule 27
	for terminal 'END_OF_LINE': reduce using rule 27
	for terminal 'IN': reduce using rule 27
	for terminal ELEMENT_SEPARATOR: reduce using rule 27

State 164
	45   TILDE: 'TILDE' .

	for terminal 'BINARY_LOGICAL_OPERATOR': reduce using rule 45
	for terminal 'BINARY_OPERATOR': reduce using rule 45
	for terminal 'CLOSE_BRACES': reduce using rule 45
	for terminal 'CLOSE_BRACKET': reduce using rule 45
	for terminal 'CLOSE_PARENTHESIS': reduce using rule 45
	for terminal 'COMPARISON_OPERATOR': reduce using rule 45
	for terminal 'ELEMENT_SEPERATOR': reduce using rule 45
	for terminal 'END_OF_LINE': reduce using rule 45
	for terminal 'IN': reduce using rule 45
	for terminal 'STRING_LITERAL': reduce using rule 45
	for terminal ELEMENT_SEPARATOR: reduce using rule 45

State 165
	51   YAY: 'YAY' .

	for terminal 'BINARY_LOGICAL_OPERATOR': reduce using rule 51
	for terminal 'BINARY_OPERATOR': reduce using rule 51
	for terminal 'CLOSE_BRACES': reduce using rule 51
	for terminal 'CLOSE_BRACKET': reduce using rule 51
	for terminal 'CLOSE_PARENTHESIS': reduce using rule 51
	for terminal 'COMPARISON_OPERATOR': reduce using rule 51
	for terminal 'ELEMENT_SEPERATOR': reduce using rule 51
	for terminal 'END_OF_LINE': reduce using rule 51
	for terminal 'IN': reduce using rule 51
	for terminal ELEMENT_SEPARATOR: reduce using rule 51

State 166
	172  value_change_array: IDENTIFIER OPEN_BRACKET NUM_LITERAL . CLOSE_BRACKET assignment_operators expression

	for terminal 'CLOSE_BRACKET': shift and go to state 201

	for non-terminal CLOSE_BRACKET: go to state 223

State 167
	157  term: IDENTIFIER .
	164  term: IDENTIFIER . UNARY_OPERATOR
	165  term: IDENTIFIER . OPEN_BRACKET expression CLOSE_BRACKET

	for terminal 'BINARY_LOGICAL_OPERATOR': reduce using rule 157
	for terminal 'BINARY_OPERATOR': reduce using rule 157
	for terminal 'CLOSE_BRACES': reduce using rule 157
	for terminal 'CLOSE_BRACKET': reduce using rule 157
	for terminal 'CLOSE_PARENTHESIS': reduce using rule 157
	for terminal 'COMPARISON_OPERATOR': reduce using rule 157
	for terminal 'ELEMENT_SEPERATOR': reduce using rule 157
	for terminal 'END_OF_LINE': reduce using rule 157
	for terminal 'IN': reduce using rule 157
	for terminal 'OPEN_BRACKET': shift and go to state 100
	for terminal 'UNARY_OPERATOR': shift and go to state 95
	for terminal ELEMENT_SEPARATOR: reduce using rule 157

	for non-terminal OPEN_BRACKET: go to state 224
	for non-terminal UNARY_OPERATOR: go to state 205

State 168
	166  term: LENGTH .

	for terminal 'BINARY_LOGICAL_OPERATOR': reduce using rule 166
	for terminal 'BINARY_OPERATOR': reduce using rule 166
	for terminal 'CLOSE_BRACES': reduce using rule 166
	for terminal 'CLOSE_BRACKET': reduce using rule 166
	for terminal 'CLOSE_PARENTHESIS': reduce using rule 166
	for terminal 'COMPARISON_OPERATOR': reduce using rule 166
	for terminal 'ELEMENT_SEPERATOR': reduce using rule 166
	for terminal 'END_OF_LINE': reduce using rule 166
	for terminal 'IN': reduce using rule 166
	for terminal ELEMENT_SEPARATOR: reduce using rule 166

State 169
	91   function_call: IDENTIFIER OPEN_PARENTHESIS argument_list . CLOSE_PARENTHESIS

	for terminal 'CLOSE_PARENTHESIS': shift and go to state 24

	for non-terminal CLOSE_PARENTHESIS: go to state 225

State 170
	53   argument_list: expression . expressions

	for terminal 'CLOSE_PARENTHESIS': reduce using rule 79
	for terminal 'ELEMENT_SEPERATOR': shift and go to state 50

	for non-terminal ELEMENT_SEPERATOR: go to state 226
	for non-terminal epsilon: go to state 227
	for non-terminal expressions: go to state 228

State 171
	152  statement: IDENTIFIER UNARY_OPERATOR END_OF_LINE .

	for terminal 'CLOSE_BRACES': reduce using rule 152
	for terminal 'DEFINE': reduce using rule 152
	for terminal 'END_OF_LINE': reduce using rule 152
	for terminal 'FIX': reduce using rule 152
	for terminal 'FLAG': reduce using rule 152
	for terminal 'GIVEN': reduce using rule 152
	for terminal 'IDENTIFIER': reduce using rule 152
	for terminal 'ITER': reduce using rule 152
	for terminal 'LENGTH': reduce using rule 152
	for terminal 'LET': reduce using rule 152
	for terminal 'LIST': reduce using rule 152
	for terminal 'NAY': reduce using rule 152
	for terminal 'NUM': reduce using rule 152
	for terminal 'NUM_LITERAL': reduce using rule 152
	for terminal 'OPEN_BRACES': reduce using rule 152
	for terminal 'OPEN_PARENTHESIS': reduce using rule 152
	for terminal 'POP': reduce using rule 152
	for terminal 'REPEAT': reduce using rule 152
	for terminal 'SHOW': reduce using rule 152
	for terminal 'SKIP': reduce using rule 152
	for terminal 'STOP': reduce using rule 152
	for terminal 'STR': reduce using rule 152
	for terminal 'TEST': reduce using rule 152
	for terminal 'TILDE': reduce using rule 152
	for terminal 'TUP': reduce using rule 152
	for terminal 'UNARY_LOGICAL_OPERATOR': reduce using rule 152
	for terminal 'UNARY_OPERATOR': reduce using rule 152
	for terminal 'WHILE': reduce using rule 152
	for terminal 'YAY': reduce using rule 152
	for terminal 'YIELD': reduce using rule 152

State 172
	122  post_equal_to: ENTER . OPEN_PARENTHESIS string CLOSE_PARENTHESIS

	for terminal 'OPEN_PARENTHESIS': shift and go to state 21

	for non-terminal OPEN_PARENTHESIS: go to state 229

State 173
	99   let_in_statement: LET . data_type IDENTIFIER EQUAL_TO OPEN_BRACES let_in_braces
	100  let_in_statement: LET . data_type IDENTIFIER EQUAL_TO term IN OPEN_BRACES let_in_braces
	101  let_in_statement: LET . data_type IDENTIFIER EQUAL_TO term IN let_in

	for terminal 'FIX': shift and go to state 35
	for terminal 'FLAG': reduce using rule 79
	for terminal 'IDENTIFIER': reduce using rule 79
	for terminal 'LET': shift and go to state 36
	for terminal 'LIST': shift and go to state 37
	for terminal 'NUM': reduce using rule 79
	for terminal 'STR': reduce using rule 79
	for terminal 'TUP': shift and go to state 38

	for non-terminal FIX: go to state 25
	for non-terminal LET: go to state 26
	for non-terminal LIST: go to state 27
	for non-terminal TUP: go to state 28
	for non-terminal basic_data_type: go to state 230
	for non-terminal compound_data_type: go to state 231
	for non-terminal data_type: go to state 232
	for non-terminal epsilon: go to state 233
	for non-terminal fix_let: go to state 32

State 174
	125  post_equal_to: expression .

	for terminal 'END_OF_LINE': reduce using rule 125

State 175
	124  post_equal_to: let_in_statement .

	for terminal 'END_OF_LINE': reduce using rule 124

State 176
	57   assignment_statement: IDENTIFIER assignment_operators post_equal_to .

	for terminal 'END_OF_LINE': reduce using rule 57

State 177
	123  post_equal_to: special_function .

	for terminal 'END_OF_LINE': reduce using rule 123

State 178
	13   ENTER: 'ENTER' .

	for terminal 'OPEN_PARENTHESIS': reduce using rule 13

State 179
	105  loop_statement: ITER OPEN_PARENTHESIS statement . expression END_OF_LINE expression CLOSE_PARENTHESIS block

	for terminal 'END_OF_LINE': reduce using rule 79
	for terminal 'IDENTIFIER': shift and go to state 19
	for terminal 'LENGTH': shift and go to state 162
	for terminal 'NAY': shift and go to state 163
	for terminal 'NUM_LITERAL': shift and go to state 140
	for terminal 'OPEN_PARENTHESIS': shift and go to state 21
	for terminal 'TILDE': shift and go to state 164
	for terminal 'UNARY_LOGICAL_OPERATOR': shift and go to state 94
	for terminal 'UNARY_OPERATOR': shift and go to state 95
	for terminal 'YAY': shift and go to state 165

	for non-terminal IDENTIFIER: go to state 167
	for non-terminal LENGTH: go to state 168
	for non-terminal NAY: go to state 147
	for non-terminal NUM_LITERAL: go to state 148
	for non-terminal OPEN_PARENTHESIS: go to state 149
	for non-terminal TILDE: go to state 150
	for non-terminal UNARY_LOGICAL_OPERATOR: go to state 63
	for non-terminal UNARY_OPERATOR: go to state 64
	for non-terminal YAY: go to state 151
	for non-terminal epsilon: go to state 153
	for non-terminal expression: go to state 234
	for non-terminal string: go to state 157
	for non-terminal term: go to state 158
	for non-terminal unary_operators: go to state 159

State 180
	62   block: OPEN_BRACES statements CLOSE_BRACES .

	for terminal 'ARREST': reduce using rule 62
	for terminal 'CLOSE_BRACES': reduce using rule 62
	for terminal 'DEFINE': reduce using rule 62
	for terminal 'END_OF_LINE': reduce using rule 62
	for terminal 'FIX': reduce using rule 62
	for terminal 'FLAG': reduce using rule 62
	for terminal 'GIVEN': reduce using rule 62
	for terminal 'IDENTIFIER': reduce using rule 62
	for terminal 'ITER': reduce using rule 62
	for terminal 'LENGTH': reduce using rule 62
	for terminal 'LET': reduce using rule 62
	for terminal 'LIST': reduce using rule 62
	for terminal 'NAY': reduce using rule 62
	for terminal 'NUM': reduce using rule 62
	for terminal 'NUM_LITERAL': reduce using rule 62
	for terminal 'OPEN_BRACES': reduce using rule 62
	for terminal 'OPEN_PARENTHESIS': reduce using rule 62
	for terminal 'OTHER': reduce using rule 62
	for terminal 'OTHERWISE': reduce using rule 62
	for terminal 'POP': reduce using rule 62
	for terminal 'REPEAT': reduce using rule 62
	for terminal 'SHOW': reduce using rule 62
	for terminal 'SKIP': reduce using rule 62
	for terminal 'STOP': reduce using rule 62
	for terminal 'STR': reduce using rule 62
	for terminal 'TEST': reduce using rule 62
	for terminal 'TILDE': reduce using rule 62
	for terminal 'TUP': reduce using rule 62
	for terminal 'UNARY_LOGICAL_OPERATOR': reduce using rule 62
	for terminal 'UNARY_OPERATOR': reduce using rule 62
	for terminal 'WHILE': reduce using rule 62
	for terminal 'YAY': reduce using rule 62
	for terminal 'YIELD': reduce using rule 62

State 181
	6    CLOSE_BRACES: 'CLOSE_BRACES' .

	for terminal $end: reduce using rule 6
	for terminal 'ARREST': reduce using rule 6
	for terminal 'CLOSE_BRACES': reduce using rule 6
	for terminal 'DEFINE': reduce using rule 6
	for terminal 'END_OF_LINE': reduce using rule 6
	for terminal 'FIX': reduce using rule 6
	for terminal 'FLAG': reduce using rule 6
	for terminal 'GIVEN': reduce using rule 6
	for terminal 'IDENTIFIER': reduce using rule 6
	for terminal 'ITER': reduce using rule 6
	for terminal 'LENGTH': reduce using rule 6
	for terminal 'LET': reduce using rule 6
	for terminal 'LIST': reduce using rule 6
	for terminal 'NAY': reduce using rule 6
	for terminal 'NUM': reduce using rule 6
	for terminal 'NUM_LITERAL': reduce using rule 6
	for terminal 'OPEN_BRACES': reduce using rule 6
	for terminal 'OPEN_PARENTHESIS': reduce using rule 6
	for terminal 'OTHER': reduce using rule 6
	for terminal 'OTHERWISE': reduce using rule 6
	for terminal 'POP': reduce using rule 6
	for terminal 'REPEAT': reduce using rule 6
	for terminal 'SHOW': reduce using rule 6
	for terminal 'SKIP': reduce using rule 6
	for terminal 'STOP': reduce using rule 6
	for terminal 'STR': reduce using rule 6
	for terminal 'TEST': reduce using rule 6
	for terminal 'TILDE': reduce using rule 6
	for terminal 'TUP': reduce using rule 6
	for terminal 'UNARY_LOGICAL_OPERATOR': reduce using rule 6
	for terminal 'UNARY_OPERATOR': reduce using rule 6
	for terminal 'WHILE': reduce using rule 6
	for terminal 'YAY': reduce using rule 6
	for terminal 'YIELD': reduce using rule 6

State 182
	121  pop_statement: POP OPEN_PARENTHESIS string . CLOSE_PARENTHESIS

	for terminal 'CLOSE_PARENTHESIS': shift and go to state 24

	for non-terminal CLOSE_PARENTHESIS: go to state 235

State 183
	107  loop_statement: REPEAT block WHILE . OPEN_PARENTHESIS conditional_argument CLOSE_PARENTHESIS END_OF_LINE

	for terminal 'OPEN_PARENTHESIS': shift and go to state 21

	for non-terminal OPEN_PARENTHESIS: go to state 236

State 184
	130  show_statement: SHOW OPEN_PARENTHESIS expression . expressions CLOSE_PARENTHESIS

	for terminal 'CLOSE_PARENTHESIS': reduce using rule 79
	for terminal 'ELEMENT_SEPERATOR': shift and go to state 50

	for non-terminal ELEMENT_SEPERATOR: go to state 226
	for non-terminal epsilon: go to state 227
	for non-terminal expressions: go to state 237

State 185
	169  try_catch_statement: TEST block ARREST . OPEN_PARENTHESIS string CLOSE_PARENTHESIS block

	for terminal 'OPEN_PARENTHESIS': shift and go to state 21

	for non-terminal OPEN_PARENTHESIS: go to state 238

State 186
	2    ARREST: 'ARREST' .

	for terminal 'OPEN_PARENTHESIS': reduce using rule 2

State 187
	106  loop_statement: WHILE OPEN_PARENTHESIS conditional_argument . CLOSE_PARENTHESIS block

	for terminal 'CLOSE_PARENTHESIS': shift and go to state 24

	for non-terminal CLOSE_PARENTHESIS: go to state 239

State 188
	80   equal_to: EQUAL_TO . post_equal_to

	for terminal 'END_OF_LINE': reduce using rule 79
	for terminal 'ENTER': shift and go to state 178
	for terminal 'HEAD': shift and go to state 160
	for terminal 'IDENTIFIER': shift and go to state 19
	for terminal 'ISEMPTY': shift and go to state 161
	for terminal 'LENGTH': shift and go to state 162
	for terminal 'LET': shift and go to state 36
	for terminal 'NAY': shift and go to state 163
	for terminal 'NUM_LITERAL': shift and go to state 140
	for terminal 'OPEN_PARENTHESIS': shift and go to state 21
	for terminal 'TILDE': shift and go to state 164
	for terminal 'UNARY_LOGICAL_OPERATOR': shift and go to state 94
	for terminal 'UNARY_OPERATOR': shift and go to state 95
	for terminal 'YAY': shift and go to state 165

	for non-terminal ENTER: go to state 172
	for non-terminal HEAD: go to state 143
	for non-terminal IDENTIFIER: go to state 144
	for non-terminal ISEMPTY: go to state 145
	for non-terminal LENGTH: go to state 146
	for non-terminal LET: go to state 173
	for non-terminal NAY: go to state 147
	for non-terminal NUM_LITERAL: go to state 148
	for non-terminal OPEN_PARENTHESIS: go to state 149
	for non-terminal TILDE: go to state 150
	for non-terminal UNARY_LOGICAL_OPERATOR: go to state 63
	for non-terminal UNARY_OPERATOR: go to state 64
	for non-terminal YAY: go to state 151
	for non-terminal epsilon: go to state 153
	for non-terminal expression: go to state 174
	for non-terminal function_call: go to state 155
	for non-terminal let_in_statement: go to state 175
	for non-terminal post_equal_to: go to state 240
	for non-terminal special_function: go to state 177
	for non-terminal string: go to state 157
	for non-terminal term: go to state 158
	for non-terminal unary_operators: go to state 159

State 189
	54   array: basic_data_type IDENTIFIER OPEN_BRACKET . NUM_LITERAL CLOSE_BRACKET

	for terminal 'NUM_LITERAL': shift and go to state 140

	for non-terminal NUM_LITERAL: go to state 241

State 190
	81   equal_to: epsilon .

	for terminal 'END_OF_LINE': reduce using rule 81

State 191
	173  variable_declaration: basic_data_type IDENTIFIER equal_to .

	for terminal 'END_OF_LINE': reduce using rule 173

State 192
	104  list_append_tail: APPEND . OPEN_PARENTHESIS expression ELEMENT_SEPARATOR IDENTIFIER CLOSE_PARENTHESIS

	for terminal 'OPEN_PARENTHESIS': shift and go to state 21

	for non-terminal OPEN_PARENTHESIS: go to state 242

State 193
	102  list_append_tail: OPEN_BRACKET . expression expressions CLOSE_BRACKET

	for terminal 'CLOSE_BRACKET': reduce using rule 79
	for terminal 'ELEMENT_SEPERATOR': reduce using rule 79
	for terminal 'IDENTIFIER': shift and go to state 19
	for terminal 'LENGTH': shift and go to state 162
	for terminal 'NAY': shift and go to state 163
	for terminal 'NUM_LITERAL': shift and go to state 140
	for terminal 'OPEN_PARENTHESIS': shift and go to state 21
	for terminal 'TILDE': shift and go to state 164
	for terminal 'UNARY_LOGICAL_OPERATOR': shift and go to state 94
	for terminal 'UNARY_OPERATOR': shift and go to state 95
	for terminal 'YAY': shift and go to state 165

	for non-terminal IDENTIFIER: go to state 167
	for non-terminal LENGTH: go to state 168
	for non-terminal NAY: go to state 147
	for non-terminal NUM_LITERAL: go to state 148
	for non-terminal OPEN_PARENTHESIS: go to state 149
	for non-terminal TILDE: go to state 150
	for non-terminal UNARY_LOGICAL_OPERATOR: go to state 63
	for non-terminal UNARY_OPERATOR: go to state 64
	for non-terminal YAY: go to state 151
	for non-terminal epsilon: go to state 153
	for non-terminal expression: go to state 243
	for non-terminal string: go to state 157
	for non-terminal term: go to state 158
	for non-terminal unary_operators: go to state 159

State 194
	103  list_append_tail: TAIL . OPEN_PARENTHESIS IDENTIFIER CLOSE_PARENTHESIS

	for terminal 'OPEN_PARENTHESIS': shift and go to state 21

	for non-terminal OPEN_PARENTHESIS: go to state 244

State 195
	69   compound_var: EQUAL_TO list_append_tail .

	for terminal 'END_OF_LINE': reduce using rule 69

State 196
	1    APPEND: 'APPEND' .

	for terminal 'OPEN_PARENTHESIS': reduce using rule 1

State 197
	43   TAIL: 'TAIL' .

	for terminal 'OPEN_PARENTHESIS': reduce using rule 43

State 198
	126  program: DEFINE NUM MAIN OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES statements YIELD NUM_LITERAL . END_OF_LINE CLOSE_BRACES

	for terminal 'END_OF_LINE': shift and go to state 123

	for non-terminal END_OF_LINE: go to state 245

State 199
	151  statement: unary_operators IDENTIFIER END_OF_LINE .

	for terminal 'CLOSE_BRACES': reduce using rule 151
	for terminal 'DEFINE': reduce using rule 151
	for terminal 'END_OF_LINE': reduce using rule 151
	for terminal 'FIX': reduce using rule 151
	for terminal 'FLAG': reduce using rule 151
	for terminal 'GIVEN': reduce using rule 151
	for terminal 'IDENTIFIER': reduce using rule 151
	for terminal 'ITER': reduce using rule 151
	for terminal 'LENGTH': reduce using rule 151
	for terminal 'LET': reduce using rule 151
	for terminal 'LIST': reduce using rule 151
	for terminal 'NAY': reduce using rule 151
	for terminal 'NUM': reduce using rule 151
	for terminal 'NUM_LITERAL': reduce using rule 151
	for terminal 'OPEN_BRACES': reduce using rule 151
	for terminal 'OPEN_PARENTHESIS': reduce using rule 151
	for terminal 'POP': reduce using rule 151
	for terminal 'REPEAT': reduce using rule 151
	for terminal 'SHOW': reduce using rule 151
	for terminal 'SKIP': reduce using rule 151
	for terminal 'STOP': reduce using rule 151
	for terminal 'STR': reduce using rule 151
	for terminal 'TEST': reduce using rule 151
	for terminal 'TILDE': reduce using rule 151
	for terminal 'TUP': reduce using rule 151
	for terminal 'UNARY_LOGICAL_OPERATOR': reduce using rule 151
	for terminal 'UNARY_OPERATOR': reduce using rule 151
	for terminal 'WHILE': reduce using rule 151
	for terminal 'YAY': reduce using rule 151
	for terminal 'YIELD': reduce using rule 151

State 200
	63   choose_array: OPEN_BRACKET NUM_LITERAL CLOSE_BRACKET .

	for terminal 'CLOSE_PARENTHESIS': reduce using rule 63
	for terminal 'ELEMENT_SEPERATOR': reduce using rule 63

State 201
	7    CLOSE_BRACKET: 'CLOSE_BRACKET' .

	for terminal 'ASSIGNMENT_OPERATOR': reduce using rule 7
	for terminal 'BINARY_LOGICAL_OPERATOR': reduce using rule 7
	for terminal 'BINARY_OPERATOR': reduce using rule 7
	for terminal 'CLOSE_BRACES': reduce using rule 7
	for terminal 'CLOSE_BRACKET': reduce using rule 7
	for terminal 'CLOSE_PARENTHESIS': reduce using rule 7
	for terminal 'COMPARISON_OPERATOR': reduce using rule 7
	for terminal 'ELEMENT_SEPERATOR': reduce using rule 7
	for terminal 'END_OF_LINE': reduce using rule 7
	for terminal 'EQUAL_TO': reduce using rule 7
	for terminal 'IN': reduce using rule 7
	for terminal ELEMENT_SEPARATOR: reduce using rule 7

State 202
	90   function_block: OPEN_BRACES statements YIELD . return_value END_OF_LINE CLOSE_BRACES

	for terminal 'END_OF_LINE': reduce using rule 79
	for terminal 'IDENTIFIER': shift and go to state 19
	for terminal 'LENGTH': shift and go to state 162
	for terminal 'NAY': shift and go to state 163
	for terminal 'NUM_LITERAL': shift and go to state 140
	for terminal 'OPEN_PARENTHESIS': shift and go to state 21
	for terminal 'TILDE': shift and go to state 164
	for terminal 'UNARY_LOGICAL_OPERATOR': shift and go to state 94
	for terminal 'UNARY_OPERATOR': shift and go to state 95
	for terminal 'YAY': shift and go to state 165

	for non-terminal IDENTIFIER: go to state 246
	for non-terminal LENGTH: go to state 168
	for non-terminal NAY: go to state 147
	for non-terminal NUM_LITERAL: go to state 148
	for non-terminal OPEN_PARENTHESIS: go to state 149
	for non-terminal TILDE: go to state 150
	for non-terminal UNARY_LOGICAL_OPERATOR: go to state 63
	for non-terminal UNARY_OPERATOR: go to state 64
	for non-terminal YAY: go to state 151
	for non-terminal epsilon: go to state 153
	for non-terminal expression: go to state 247
	for non-terminal function_call: go to state 248
	for non-terminal return_value: go to state 249
	for non-terminal string: go to state 157
	for non-terminal term: go to state 158
	for non-terminal unary_operators: go to state 159

State 203
	136  special_function: HEAD OPEN_PARENTHESIS . IDENTIFIER CLOSE_PARENTHESIS

	for terminal 'IDENTIFIER': shift and go to state 19

	for non-terminal IDENTIFIER: go to state 250

State 204
	133  special_function: IDENTIFIER OPEN_BRACKET . NUM_LITERAL SLICING_COLON NUM_LITERAL CLOSE_BRACKET
	135  special_function: IDENTIFIER OPEN_BRACKET . NUM_LITERAL CLOSE_BRACKET
	165  term: IDENTIFIER OPEN_BRACKET . expression CLOSE_BRACKET

	for terminal 'CLOSE_BRACKET': reduce using rule 79
	for terminal 'IDENTIFIER': shift and go to state 19
	for terminal 'LENGTH': shift and go to state 162
	for terminal 'NAY': shift and go to state 163
	for terminal 'NUM_LITERAL': shift and go to state 140
	for terminal 'OPEN_PARENTHESIS': shift and go to state 21
	for terminal 'TILDE': shift and go to state 164
	for terminal 'UNARY_LOGICAL_OPERATOR': shift and go to state 94
	for terminal 'UNARY_OPERATOR': shift and go to state 95
	for terminal 'YAY': shift and go to state 165

	for non-terminal IDENTIFIER: go to state 167
	for non-terminal LENGTH: go to state 168
	for non-terminal NAY: go to state 147
	for non-terminal NUM_LITERAL: go to state 251
	for non-terminal OPEN_PARENTHESIS: go to state 149
	for non-terminal TILDE: go to state 150
	for non-terminal UNARY_LOGICAL_OPERATOR: go to state 63
	for non-terminal UNARY_OPERATOR: go to state 64
	for non-terminal YAY: go to state 151
	for non-terminal epsilon: go to state 153
	for non-terminal expression: go to state 252
	for non-terminal string: go to state 157
	for non-terminal term: go to state 158
	for non-terminal unary_operators: go to state 159

State 205
	164  term: IDENTIFIER UNARY_OPERATOR .

	for terminal 'BINARY_LOGICAL_OPERATOR': reduce using rule 164
	for terminal 'BINARY_OPERATOR': reduce using rule 164
	for terminal 'CLOSE_BRACES': reduce using rule 164
	for terminal 'CLOSE_BRACKET': reduce using rule 164
	for terminal 'CLOSE_PARENTHESIS': reduce using rule 164
	for terminal 'COMPARISON_OPERATOR': reduce using rule 164
	for terminal 'ELEMENT_SEPERATOR': reduce using rule 164
	for terminal 'END_OF_LINE': reduce using rule 164
	for terminal 'IN': reduce using rule 164
	for terminal ELEMENT_SEPARATOR: reduce using rule 164

State 206
	137  special_function: ISEMPTY OPEN_PARENTHESIS . IDENTIFIER CLOSE_PARENTHESIS

	for terminal 'IDENTIFIER': shift and go to state 19

	for non-terminal IDENTIFIER: go to state 253

State 207
	134  special_function: LENGTH OPEN_PARENTHESIS . IDENTIFIER CLOSE_PARENTHESIS

	for terminal 'IDENTIFIER': shift and go to state 19

	for non-terminal IDENTIFIER: go to state 254

State 208
	162  term: OPEN_PARENTHESIS expression . CLOSE_PARENTHESIS

	for terminal 'CLOSE_PARENTHESIS': shift and go to state 24

	for non-terminal CLOSE_PARENTHESIS: go to state 255

State 209
	156  string: TILDE STRING_LITERAL . TILDE

	for terminal 'TILDE': shift and go to state 164

	for non-terminal TILDE: go to state 256

State 210
	42   STRING_LITERAL: 'STRING_LITERAL' .

	for terminal 'TILDE': reduce using rule 42

State 211
	75   conditional_statement: GIVEN OPEN_PARENTHESIS conditional_argument CLOSE_PARENTHESIS . conditional_block other_block otherwise_block

	for terminal 'OPEN_BRACES': shift and go to state 40

	for non-terminal OPEN_BRACES: go to state 257
	for non-terminal block: go to state 258
	for non-terminal conditional_block: go to state 259
	for non-terminal yield_block: go to state 260

State 212
	71   conditional_argument: special_function COMPARISON_OPERATOR . expression

	for terminal 'CLOSE_PARENTHESIS': reduce using rule 79
	for terminal 'IDENTIFIER': shift and go to state 19
	for terminal 'LENGTH': shift and go to state 162
	for terminal 'NAY': shift and go to state 163
	for terminal 'NUM_LITERAL': shift and go to state 140
	for terminal 'OPEN_PARENTHESIS': shift and go to state 21
	for terminal 'TILDE': shift and go to state 164
	for terminal 'UNARY_LOGICAL_OPERATOR': shift and go to state 94
	for terminal 'UNARY_OPERATOR': shift and go to state 95
	for terminal 'YAY': shift and go to state 165

	for non-terminal IDENTIFIER: go to state 167
	for non-terminal LENGTH: go to state 168
	for non-terminal NAY: go to state 147
	for non-terminal NUM_LITERAL: go to state 148
	for non-terminal OPEN_PARENTHESIS: go to state 149
	for non-terminal TILDE: go to state 150
	for non-terminal UNARY_LOGICAL_OPERATOR: go to state 63
	for non-terminal UNARY_OPERATOR: go to state 64
	for non-terminal YAY: go to state 151
	for non-terminal epsilon: go to state 153
	for non-terminal expression: go to state 261
	for non-terminal string: go to state 157
	for non-terminal term: go to state 158
	for non-terminal unary_operators: go to state 159

State 213
	9    COMPARISON_OPERATOR: 'COMPARISON_OPERATOR' .

	for terminal 'CLOSE_PARENTHESIS': reduce using rule 9
	for terminal 'IDENTIFIER': reduce using rule 9
	for terminal 'LENGTH': reduce using rule 9
	for terminal 'NAY': reduce using rule 9
	for terminal 'NUM_LITERAL': reduce using rule 9
	for terminal 'OPEN_PARENTHESIS': reduce using rule 9
	for terminal 'TILDE': reduce using rule 9
	for terminal 'UNARY_LOGICAL_OPERATOR': reduce using rule 9
	for terminal 'UNARY_OPERATOR': reduce using rule 9
	for terminal 'YAY': reduce using rule 9

State 214
	61   binary_operators: BINARY_LOGICAL_OPERATOR .

	for terminal 'IDENTIFIER': reduce using rule 61
	for terminal 'LENGTH': reduce using rule 61
	for terminal 'NAY': reduce using rule 61
	for terminal 'NUM_LITERAL': reduce using rule 61
	for terminal 'OPEN_PARENTHESIS': reduce using rule 61
	for terminal 'TILDE': reduce using rule 61
	for terminal 'UNARY_LOGICAL_OPERATOR': reduce using rule 61
	for terminal 'UNARY_OPERATOR': reduce using rule 61
	for terminal 'YAY': reduce using rule 61

State 215
	59   binary_operators: BINARY_OPERATOR .

	for terminal 'IDENTIFIER': reduce using rule 59
	for terminal 'LENGTH': reduce using rule 59
	for terminal 'NAY': reduce using rule 59
	for terminal 'NUM_LITERAL': reduce using rule 59
	for terminal 'OPEN_PARENTHESIS': reduce using rule 59
	for terminal 'TILDE': reduce using rule 59
	for terminal 'UNARY_LOGICAL_OPERATOR': reduce using rule 59
	for terminal 'UNARY_OPERATOR': reduce using rule 59
	for terminal 'YAY': reduce using rule 59

State 216
	60   binary_operators: COMPARISON_OPERATOR .

	for terminal 'IDENTIFIER': reduce using rule 60
	for terminal 'LENGTH': reduce using rule 60
	for terminal 'NAY': reduce using rule 60
	for terminal 'NUM_LITERAL': reduce using rule 60
	for terminal 'OPEN_PARENTHESIS': reduce using rule 60
	for terminal 'TILDE': reduce using rule 60
	for terminal 'UNARY_LOGICAL_OPERATOR': reduce using rule 60
	for terminal 'UNARY_OPERATOR': reduce using rule 60
	for terminal 'YAY': reduce using rule 60

State 217
	167  terms: binary_operators . term terms

	for terminal 'IDENTIFIER': shift and go to state 19
	for terminal 'LENGTH': shift and go to state 162
	for terminal 'NAY': shift and go to state 163
	for terminal 'NUM_LITERAL': shift and go to state 140
	for terminal 'OPEN_PARENTHESIS': shift and go to state 21
	for terminal 'TILDE': shift and go to state 164
	for terminal 'UNARY_LOGICAL_OPERATOR': shift and go to state 94
	for terminal 'UNARY_OPERATOR': shift and go to state 95
	for terminal 'YAY': shift and go to state 165

	for non-terminal IDENTIFIER: go to state 167
	for non-terminal LENGTH: go to state 168
	for non-terminal NAY: go to state 147
	for non-terminal NUM_LITERAL: go to state 148
	for non-terminal OPEN_PARENTHESIS: go to state 149
	for non-terminal TILDE: go to state 150
	for non-terminal UNARY_LOGICAL_OPERATOR: go to state 63
	for non-terminal UNARY_OPERATOR: go to state 64
	for non-terminal YAY: go to state 151
	for non-terminal string: go to state 157
	for non-terminal term: go to state 262
	for non-terminal unary_operators: go to state 159

State 218
	168  terms: epsilon .

	for terminal 'CLOSE_BRACES': reduce using rule 168
	for terminal 'CLOSE_BRACKET': reduce using rule 168
	for terminal 'CLOSE_PARENTHESIS': reduce using rule 168
	for terminal 'ELEMENT_SEPERATOR': reduce using rule 168
	for terminal 'END_OF_LINE': reduce using rule 168
	for terminal ELEMENT_SEPARATOR: reduce using rule 168

State 219
	82   expression: term terms .

	for terminal 'CLOSE_BRACES': reduce using rule 82
	for terminal 'CLOSE_BRACKET': reduce using rule 82
	for terminal 'CLOSE_PARENTHESIS': reduce using rule 82
	for terminal 'ELEMENT_SEPERATOR': reduce using rule 82
	for terminal 'END_OF_LINE': reduce using rule 82
	for terminal ELEMENT_SEPARATOR: reduce using rule 82

State 220
	4    BINARY_LOGICAL_OPERATOR: 'BINARY_LOGICAL_OPERATOR' .

	for terminal 'IDENTIFIER': reduce using rule 4
	for terminal 'LENGTH': reduce using rule 4
	for terminal 'NAY': reduce using rule 4
	for terminal 'NUM_LITERAL': reduce using rule 4
	for terminal 'OPEN_PARENTHESIS': reduce using rule 4
	for terminal 'TILDE': reduce using rule 4
	for terminal 'UNARY_LOGICAL_OPERATOR': reduce using rule 4
	for terminal 'UNARY_OPERATOR': reduce using rule 4
	for terminal 'YAY': reduce using rule 4

State 221
	5    BINARY_OPERATOR: 'BINARY_OPERATOR' .

	for terminal 'IDENTIFIER': reduce using rule 5
	for terminal 'LENGTH': reduce using rule 5
	for terminal 'NAY': reduce using rule 5
	for terminal 'NUM_LITERAL': reduce using rule 5
	for terminal 'OPEN_PARENTHESIS': reduce using rule 5
	for terminal 'TILDE': reduce using rule 5
	for terminal 'UNARY_LOGICAL_OPERATOR': reduce using rule 5
	for terminal 'UNARY_OPERATOR': reduce using rule 5
	for terminal 'YAY': reduce using rule 5

State 222
	163  term: unary_operators IDENTIFIER .

	for terminal 'BINARY_LOGICAL_OPERATOR': reduce using rule 163
	for terminal 'BINARY_OPERATOR': reduce using rule 163
	for terminal 'CLOSE_BRACES': reduce using rule 163
	for terminal 'CLOSE_BRACKET': reduce using rule 163
	for terminal 'CLOSE_PARENTHESIS': reduce using rule 163
	for terminal 'COMPARISON_OPERATOR': reduce using rule 163
	for terminal 'ELEMENT_SEPERATOR': reduce using rule 163
	for terminal 'END_OF_LINE': reduce using rule 163
	for terminal 'IN': reduce using rule 163
	for terminal ELEMENT_SEPARATOR: reduce using rule 163

State 223
	172  value_change_array: IDENTIFIER OPEN_BRACKET NUM_LITERAL CLOSE_BRACKET . assignment_operators expression

	for terminal 'ASSIGNMENT_OPERATOR': shift and go to state 113
	for terminal 'EQUAL_TO': shift and go to state 114

	for non-terminal ASSIGNMENT_OPERATOR: go to state 107
	for non-terminal EQUAL_TO: go to state 108
	for non-terminal assignment_operators: go to state 263

State 224
	165  term: IDENTIFIER OPEN_BRACKET . expression CLOSE_BRACKET

	for terminal 'CLOSE_BRACKET': reduce using rule 79
	for terminal 'IDENTIFIER': shift and go to state 19
	for terminal 'LENGTH': shift and go to state 162
	for terminal 'NAY': shift and go to state 163
	for terminal 'NUM_LITERAL': shift and go to state 140
	for terminal 'OPEN_PARENTHESIS': shift and go to state 21
	for terminal 'TILDE': shift and go to state 164
	for terminal 'UNARY_LOGICAL_OPERATOR': shift and go to state 94
	for terminal 'UNARY_OPERATOR': shift and go to state 95
	for terminal 'YAY': shift and go to state 165

	for non-terminal IDENTIFIER: go to state 167
	for non-terminal LENGTH: go to state 168
	for non-terminal NAY: go to state 147
	for non-terminal NUM_LITERAL: go to state 148
	for non-terminal OPEN_PARENTHESIS: go to state 149
	for non-terminal TILDE: go to state 150
	for non-terminal UNARY_LOGICAL_OPERATOR: go to state 63
	for non-terminal UNARY_OPERATOR: go to state 64
	for non-terminal YAY: go to state 151
	for non-terminal epsilon: go to state 153
	for non-terminal expression: go to state 252
	for non-terminal string: go to state 157
	for non-terminal term: go to state 158
	for non-terminal unary_operators: go to state 159

State 225
	91   function_call: IDENTIFIER OPEN_PARENTHESIS argument_list CLOSE_PARENTHESIS .

	for terminal 'COMPARISON_OPERATOR': reduce using rule 91
	for terminal 'END_OF_LINE': reduce using rule 91

State 226
	84   expressions: ELEMENT_SEPERATOR . expression expressions

	for terminal 'CLOSE_BRACKET': reduce using rule 79
	for terminal 'CLOSE_PARENTHESIS': reduce using rule 79
	for terminal 'ELEMENT_SEPERATOR': reduce using rule 79
	for terminal 'IDENTIFIER': shift and go to state 19
	for terminal 'LENGTH': shift and go to state 162
	for terminal 'NAY': shift and go to state 163
	for terminal 'NUM_LITERAL': shift and go to state 140
	for terminal 'OPEN_PARENTHESIS': shift and go to state 21
	for terminal 'TILDE': shift and go to state 164
	for terminal 'UNARY_LOGICAL_OPERATOR': shift and go to state 94
	for terminal 'UNARY_OPERATOR': shift and go to state 95
	for terminal 'YAY': shift and go to state 165

	for non-terminal IDENTIFIER: go to state 167
	for non-terminal LENGTH: go to state 168
	for non-terminal NAY: go to state 147
	for non-terminal NUM_LITERAL: go to state 148
	for non-terminal OPEN_PARENTHESIS: go to state 149
	for non-terminal TILDE: go to state 150
	for non-terminal UNARY_LOGICAL_OPERATOR: go to state 63
	for non-terminal UNARY_OPERATOR: go to state 64
	for non-terminal YAY: go to state 151
	for non-terminal epsilon: go to state 153
	for non-terminal expression: go to state 264
	for non-terminal string: go to state 157
	for non-terminal term: go to state 158
	for non-terminal unary_operators: go to state 159

State 227
	85   expressions: epsilon .

	for terminal 'CLOSE_BRACKET': reduce using rule 85
	for terminal 'CLOSE_PARENTHESIS': reduce using rule 85

State 228
	53   argument_list: expression expressions .

	for terminal 'CLOSE_PARENTHESIS': reduce using rule 53

State 229
	122  post_equal_to: ENTER OPEN_PARENTHESIS . string CLOSE_PARENTHESIS

	for terminal 'TILDE': shift and go to state 164

	for non-terminal TILDE: go to state 150
	for non-terminal string: go to state 265

State 230
	76   data_type: basic_data_type .

	for terminal 'IDENTIFIER': reduce using rule 76

State 231
	77   data_type: compound_data_type .

	for terminal 'IDENTIFIER': reduce using rule 77

State 232
	99   let_in_statement: LET data_type . IDENTIFIER EQUAL_TO OPEN_BRACES let_in_braces
	100  let_in_statement: LET data_type . IDENTIFIER EQUAL_TO term IN OPEN_BRACES let_in_braces
	101  let_in_statement: LET data_type . IDENTIFIER EQUAL_TO term IN let_in

	for terminal 'IDENTIFIER': shift and go to state 19

	for non-terminal IDENTIFIER: go to state 266

State 233
	78   data_type: epsilon .
	88   fix_let: epsilon .

	for terminal 'FLAG': reduce using rule 88
	for terminal 'IDENTIFIER': reduce using rule 78
	for terminal 'NUM': reduce using rule 88
	for terminal 'STR': reduce using rule 88

State 234
	105  loop_statement: ITER OPEN_PARENTHESIS statement expression . END_OF_LINE expression CLOSE_PARENTHESIS block

	for terminal 'END_OF_LINE': shift and go to state 123

	for non-terminal END_OF_LINE: go to state 267

State 235
	121  pop_statement: POP OPEN_PARENTHESIS string CLOSE_PARENTHESIS .

	for terminal 'END_OF_LINE': reduce using rule 121

State 236
	107  loop_statement: REPEAT block WHILE OPEN_PARENTHESIS . conditional_argument CLOSE_PARENTHESIS END_OF_LINE

	for terminal 'CLOSE_PARENTHESIS': reduce using rule 79
	for terminal 'HEAD': shift and go to state 160
	for terminal 'IDENTIFIER': shift and go to state 19
	for terminal 'ISEMPTY': shift and go to state 161
	for terminal 'LENGTH': shift and go to state 162
	for terminal 'NAY': shift and go to state 163
	for terminal 'NUM_LITERAL': shift and go to state 140
	for terminal 'OPEN_PARENTHESIS': shift and go to state 21
	for terminal 'TILDE': shift and go to state 164
	for terminal 'UNARY_LOGICAL_OPERATOR': shift and go to state 94
	for terminal 'UNARY_OPERATOR': shift and go to state 95
	for terminal 'YAY': shift and go to state 165

	for non-terminal HEAD: go to state 143
	for non-terminal IDENTIFIER: go to state 144
	for non-terminal ISEMPTY: go to state 145
	for non-terminal LENGTH: go to state 146
	for non-terminal NAY: go to state 147
	for non-terminal NUM_LITERAL: go to state 148
	for non-terminal OPEN_PARENTHESIS: go to state 149
	for non-terminal TILDE: go to state 150
	for non-terminal UNARY_LOGICAL_OPERATOR: go to state 63
	for non-terminal UNARY_OPERATOR: go to state 64
	for non-terminal YAY: go to state 151
	for non-terminal conditional_argument: go to state 268
	for non-terminal epsilon: go to state 153
	for non-terminal expression: go to state 154
	for non-terminal function_call: go to state 155
	for non-terminal special_function: go to state 156
	for non-terminal string: go to state 157
	for non-terminal term: go to state 158
	for non-terminal unary_operators: go to state 159

State 237
	130  show_statement: SHOW OPEN_PARENTHESIS expression expressions . CLOSE_PARENTHESIS

	for terminal 'CLOSE_PARENTHESIS': shift and go to state 24

	for non-terminal CLOSE_PARENTHESIS: go to state 269

State 238
	169  try_catch_statement: TEST block ARREST OPEN_PARENTHESIS . string CLOSE_PARENTHESIS block

	for terminal 'TILDE': shift and go to state 164

	for non-terminal TILDE: go to state 150
	for non-terminal string: go to state 270

State 239
	106  loop_statement: WHILE OPEN_PARENTHESIS conditional_argument CLOSE_PARENTHESIS . block

	for terminal 'OPEN_BRACES': shift and go to state 40

	for non-terminal OPEN_BRACES: go to state 56
	for non-terminal block: go to state 271

State 240
	80   equal_to: EQUAL_TO post_equal_to .

	for terminal 'END_OF_LINE': reduce using rule 80

State 241
	54   array: basic_data_type IDENTIFIER OPEN_BRACKET NUM_LITERAL . CLOSE_BRACKET

	for terminal 'CLOSE_BRACKET': shift and go to state 201

	for non-terminal CLOSE_BRACKET: go to state 272

State 242
	104  list_append_tail: APPEND OPEN_PARENTHESIS . expression ELEMENT_SEPARATOR IDENTIFIER CLOSE_PARENTHESIS

	for terminal 'IDENTIFIER': shift and go to state 19
	for terminal 'LENGTH': shift and go to state 162
	for terminal 'NAY': shift and go to state 163
	for terminal 'NUM_LITERAL': shift and go to state 140
	for terminal 'OPEN_PARENTHESIS': shift and go to state 21
	for terminal 'TILDE': shift and go to state 164
	for terminal 'UNARY_LOGICAL_OPERATOR': shift and go to state 94
	for terminal 'UNARY_OPERATOR': shift and go to state 95
	for terminal 'YAY': shift and go to state 165
	for terminal ELEMENT_SEPARATOR: reduce using rule 79

	for non-terminal IDENTIFIER: go to state 167
	for non-terminal LENGTH: go to state 168
	for non-terminal NAY: go to state 147
	for non-terminal NUM_LITERAL: go to state 148
	for non-terminal OPEN_PARENTHESIS: go to state 149
	for non-terminal TILDE: go to state 150
	for non-terminal UNARY_LOGICAL_OPERATOR: go to state 63
	for non-terminal UNARY_OPERATOR: go to state 64
	for non-terminal YAY: go to state 151
	for non-terminal epsilon: go to state 153
	for non-terminal expression: go to state 273
	for non-terminal string: go to state 157
	for non-terminal term: go to state 158
	for non-terminal unary_operators: go to state 159

State 243
	102  list_append_tail: OPEN_BRACKET expression . expressions CLOSE_BRACKET

	for terminal 'CLOSE_BRACKET': reduce using rule 79
	for terminal 'ELEMENT_SEPERATOR': shift and go to state 50

	for non-terminal ELEMENT_SEPERATOR: go to state 226
	for non-terminal epsilon: go to state 227
	for non-terminal expressions: go to state 274

State 244
	103  list_append_tail: TAIL OPEN_PARENTHESIS . IDENTIFIER CLOSE_PARENTHESIS

	for terminal 'IDENTIFIER': shift and go to state 19

	for non-terminal IDENTIFIER: go to state 275

State 245
	126  program: DEFINE NUM MAIN OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES statements YIELD NUM_LITERAL END_OF_LINE . CLOSE_BRACES

	for terminal 'CLOSE_BRACES': shift and go to state 181

	for non-terminal CLOSE_BRACES: go to state 276

State 246
	91   function_call: IDENTIFIER . OPEN_PARENTHESIS argument_list CLOSE_PARENTHESIS
	157  term: IDENTIFIER .
	164  term: IDENTIFIER . UNARY_OPERATOR
	165  term: IDENTIFIER . OPEN_BRACKET expression CLOSE_BRACKET

	for terminal 'BINARY_LOGICAL_OPERATOR': reduce using rule 157
	for terminal 'BINARY_OPERATOR': reduce using rule 157
	for terminal 'COMPARISON_OPERATOR': reduce using rule 157
	for terminal 'END_OF_LINE': reduce using rule 157
	for terminal 'OPEN_BRACKET': shift and go to state 100
	for terminal 'OPEN_PARENTHESIS': shift and go to state 21
	for terminal 'UNARY_OPERATOR': shift and go to state 95

	for non-terminal OPEN_BRACKET: go to state 224
	for non-terminal OPEN_PARENTHESIS: go to state 110
	for non-terminal UNARY_OPERATOR: go to state 205

State 247
	128  return_value: expression .

	for terminal 'END_OF_LINE': reduce using rule 128

State 248
	129  return_value: function_call .

	for terminal 'END_OF_LINE': reduce using rule 129

State 249
	90   function_block: OPEN_BRACES statements YIELD return_value . END_OF_LINE CLOSE_BRACES

	for terminal 'END_OF_LINE': shift and go to state 123

	for non-terminal END_OF_LINE: go to state 277

State 250
	136  special_function: HEAD OPEN_PARENTHESIS IDENTIFIER . CLOSE_PARENTHESIS

	for terminal 'CLOSE_PARENTHESIS': shift and go to state 24

	for non-terminal CLOSE_PARENTHESIS: go to state 278

State 251
	133  special_function: IDENTIFIER OPEN_BRACKET NUM_LITERAL . SLICING_COLON NUM_LITERAL CLOSE_BRACKET
	135  special_function: IDENTIFIER OPEN_BRACKET NUM_LITERAL . CLOSE_BRACKET
	158  term: NUM_LITERAL .

	for terminal 'BINARY_LOGICAL_OPERATOR': reduce using rule 158
	for terminal 'BINARY_OPERATOR': reduce using rule 158
	for terminal 'CLOSE_BRACKET': reduce using rule 158, shift and go to state 201
	for terminal 'COMPARISON_OPERATOR': reduce using rule 158
	for terminal 'SLICING_COLON': shift and go to state 281

	for non-terminal CLOSE_BRACKET: go to state 279
	for non-terminal SLICING_COLON: go to state 280

State 252
	165  term: IDENTIFIER OPEN_BRACKET expression . CLOSE_BRACKET

	for terminal 'CLOSE_BRACKET': shift and go to state 201

	for non-terminal CLOSE_BRACKET: go to state 282

State 253
	137  special_function: ISEMPTY OPEN_PARENTHESIS IDENTIFIER . CLOSE_PARENTHESIS

	for terminal 'CLOSE_PARENTHESIS': shift and go to state 24

	for non-terminal CLOSE_PARENTHESIS: go to state 283

State 254
	134  special_function: LENGTH OPEN_PARENTHESIS IDENTIFIER . CLOSE_PARENTHESIS

	for terminal 'CLOSE_PARENTHESIS': shift and go to state 24

	for non-terminal CLOSE_PARENTHESIS: go to state 284

State 255
	162  term: OPEN_PARENTHESIS expression CLOSE_PARENTHESIS .

	for terminal 'BINARY_LOGICAL_OPERATOR': reduce using rule 162
	for terminal 'BINARY_OPERATOR': reduce using rule 162
	for terminal 'CLOSE_BRACES': reduce using rule 162
	for terminal 'CLOSE_BRACKET': reduce using rule 162
	for terminal 'CLOSE_PARENTHESIS': reduce using rule 162
	for terminal 'COMPARISON_OPERATOR': reduce using rule 162
	for terminal 'ELEMENT_SEPERATOR': reduce using rule 162
	for terminal 'END_OF_LINE': reduce using rule 162
	for terminal 'IN': reduce using rule 162
	for terminal ELEMENT_SEPARATOR: reduce using rule 162

State 256
	156  string: TILDE STRING_LITERAL TILDE .

	for terminal 'BINARY_LOGICAL_OPERATOR': reduce using rule 156
	for terminal 'BINARY_OPERATOR': reduce using rule 156
	for terminal 'CLOSE_BRACES': reduce using rule 156
	for terminal 'CLOSE_BRACKET': reduce using rule 156
	for terminal 'CLOSE_PARENTHESIS': reduce using rule 156
	for terminal 'COMPARISON_OPERATOR': reduce using rule 156
	for terminal 'ELEMENT_SEPERATOR': reduce using rule 156
	for terminal 'END_OF_LINE': reduce using rule 156
	for terminal 'IN': reduce using rule 156
	for terminal ELEMENT_SEPARATOR: reduce using rule 156

State 257
	62   block: OPEN_BRACES . statements CLOSE_BRACES
	175  yield_block: OPEN_BRACES . statements YIELD expression END_OF_LINE CLOSE_BRACES

	for terminal 'CLOSE_BRACES': reduce using rule 79
	for terminal 'DEFINE': shift and go to state 5
	for terminal 'FIX': shift and go to state 35
	for terminal 'FLAG': reduce using rule 79
	for terminal 'GIVEN': shift and go to state 86
	for terminal 'IDENTIFIER': shift and go to state 19
	for terminal 'ITER': shift and go to state 87
	for terminal 'LET': shift and go to state 36
	for terminal 'LIST': shift and go to state 37
	for terminal 'NUM': reduce using rule 79
	for terminal 'OPEN_BRACES': shift and go to state 40
	for terminal 'POP': shift and go to state 88
	for terminal 'REPEAT': shift and go to state 89
	for terminal 'SHOW': shift and go to state 90
	for terminal 'SKIP': shift and go to state 91
	for terminal 'STOP': shift and go to state 92
	for terminal 'STR': reduce using rule 79
	for terminal 'TEST': shift and go to state 93
	for terminal 'TUP': shift and go to state 38
	for terminal 'UNARY_LOGICAL_OPERATOR': shift and go to state 94
	for terminal 'UNARY_OPERATOR': shift and go to state 95
	for terminal 'WHILE': shift and go to state 96
	for terminal 'YIELD': reduce using rule 79

	for non-terminal DEFINE: go to state 52
	for non-terminal FIX: go to state 25
	for non-terminal GIVEN: go to state 53
	for non-terminal IDENTIFIER: go to state 54
	for non-terminal ITER: go to state 55
	for non-terminal LET: go to state 26
	for non-terminal LIST: go to state 27
	for non-terminal OPEN_BRACES: go to state 56
	for non-terminal POP: go to state 57
	for non-terminal REPEAT: go to state 58
	for non-terminal SHOW: go to state 59
	for non-terminal SKIP: go to state 60
	for non-terminal STOP: go to state 61
	for non-terminal TEST: go to state 62
	for non-terminal TUP: go to state 28
	for non-terminal UNARY_LOGICAL_OPERATOR: go to state 63
	for non-terminal UNARY_OPERATOR: go to state 64
	for non-terminal WHILE: go to state 65
	for non-terminal array: go to state 66
	for non-terminal assignment_statement: go to state 67
	for non-terminal basic_data_type: go to state 68
	for non-terminal block: go to state 69
	for non-terminal compound_array: go to state 70
	for non-terminal compound_data_type: go to state 71
	for non-terminal conditional_statement: go to state 72
	for non-terminal epsilon: go to state 73
	for non-terminal fix_let: go to state 32
	for non-terminal func_def: go to state 74
	for non-terminal function_call: go to state 75
	for non-terminal loop_statement: go to state 76
	for non-terminal pop_statement: go to state 77
	for non-terminal show_statement: go to state 78
	for non-terminal skip_stop: go to state 79
	for non-terminal statement: go to state 80
	for non-terminal statements: go to state 285
	for non-terminal try_catch_statement: go to state 82
	for non-terminal unary_operators: go to state 83
	for non-terminal value_change_array: go to state 84
	for non-terminal variable_declaration: go to state 85

State 258
	74   conditional_block: block .

	for terminal 'CLOSE_BRACES': reduce using rule 74
	for terminal 'DEFINE': reduce using rule 74
	for terminal 'END_OF_LINE': reduce using rule 74
	for terminal 'FIX': reduce using rule 74
	for terminal 'FLAG': reduce using rule 74
	for terminal 'GIVEN': reduce using rule 74
	for terminal 'IDENTIFIER': reduce using rule 74
	for terminal 'ITER': reduce using rule 74
	for terminal 'LENGTH': reduce using rule 74
	for terminal 'LET': reduce using rule 74
	for terminal 'LIST': reduce using rule 74
	for terminal 'NAY': reduce using rule 74
	for terminal 'NUM': reduce using rule 74
	for terminal 'NUM_LITERAL': reduce using rule 74
	for terminal 'OPEN_BRACES': reduce using rule 74
	for terminal 'OPEN_PARENTHESIS': reduce using rule 74
	for terminal 'OTHER': reduce using rule 74
	for terminal 'OTHERWISE': reduce using rule 74
	for terminal 'POP': reduce using rule 74
	for terminal 'REPEAT': reduce using rule 74
	for terminal 'SHOW': reduce using rule 74
	for terminal 'SKIP': reduce using rule 74
	for terminal 'STOP': reduce using rule 74
	for terminal 'STR': reduce using rule 74
	for terminal 'TEST': reduce using rule 74
	for terminal 'TILDE': reduce using rule 74
	for terminal 'TUP': reduce using rule 74
	for terminal 'UNARY_LOGICAL_OPERATOR': reduce using rule 74
	for terminal 'UNARY_OPERATOR': reduce using rule 74
	for terminal 'WHILE': reduce using rule 74
	for terminal 'YAY': reduce using rule 74
	for terminal 'YIELD': reduce using rule 74

State 259
	75   conditional_statement: GIVEN OPEN_PARENTHESIS conditional_argument CLOSE_PARENTHESIS conditional_block . other_block otherwise_block

	for terminal 'CLOSE_BRACES': reduce using rule 79
	for terminal 'DEFINE': reduce using rule 79
	for terminal 'END_OF_LINE': reduce using rule 79
	for terminal 'FIX': reduce using rule 79
	for terminal 'FLAG': reduce using rule 79
	for terminal 'GIVEN': reduce using rule 79
	for terminal 'IDENTIFIER': reduce using rule 79
	for terminal 'ITER': reduce using rule 79
	for terminal 'LENGTH': reduce using rule 79
	for terminal 'LET': reduce using rule 79
	for terminal 'LIST': reduce using rule 79
	for terminal 'NAY': reduce using rule 79
	for terminal 'NUM': reduce using rule 79
	for terminal 'NUM_LITERAL': reduce using rule 79
	for terminal 'OPEN_BRACES': reduce using rule 79
	for terminal 'OPEN_PARENTHESIS': reduce using rule 79
	for terminal 'OTHER': shift and go to state 289
	for terminal 'OTHERWISE': reduce using rule 79
	for terminal 'POP': reduce using rule 79
	for terminal 'REPEAT': reduce using rule 79
	for terminal 'SHOW': reduce using rule 79
	for terminal 'SKIP': reduce using rule 79
	for terminal 'STOP': reduce using rule 79
	for terminal 'STR': reduce using rule 79
	for terminal 'TEST': reduce using rule 79
	for terminal 'TILDE': reduce using rule 79
	for terminal 'TUP': reduce using rule 79
	for terminal 'UNARY_LOGICAL_OPERATOR': reduce using rule 79
	for terminal 'UNARY_OPERATOR': reduce using rule 79
	for terminal 'WHILE': reduce using rule 79
	for terminal 'YAY': reduce using rule 79
	for terminal 'YIELD': reduce using rule 79

	for non-terminal OTHER: go to state 286
	for non-terminal epsilon: go to state 287
	for non-terminal other_block: go to state 288

State 260
	73   conditional_block: yield_block .

	for terminal 'CLOSE_BRACES': reduce using rule 73
	for terminal 'DEFINE': reduce using rule 73
	for terminal 'END_OF_LINE': reduce using rule 73
	for terminal 'FIX': reduce using rule 73
	for terminal 'FLAG': reduce using rule 73
	for terminal 'GIVEN': reduce using rule 73
	for terminal 'IDENTIFIER': reduce using rule 73
	for terminal 'ITER': reduce using rule 73
	for terminal 'LENGTH': reduce using rule 73
	for terminal 'LET': reduce using rule 73
	for terminal 'LIST': reduce using rule 73
	for terminal 'NAY': reduce using rule 73
	for terminal 'NUM': reduce using rule 73
	for terminal 'NUM_LITERAL': reduce using rule 73
	for terminal 'OPEN_BRACES': reduce using rule 73
	for terminal 'OPEN_PARENTHESIS': reduce using rule 73
	for terminal 'OTHER': reduce using rule 73
	for terminal 'OTHERWISE': reduce using rule 73
	for terminal 'POP': reduce using rule 73
	for terminal 'REPEAT': reduce using rule 73
	for terminal 'SHOW': reduce using rule 73
	for terminal 'SKIP': reduce using rule 73
	for terminal 'STOP': reduce using rule 73
	for terminal 'STR': reduce using rule 73
	for terminal 'TEST': reduce using rule 73
	for terminal 'TILDE': reduce using rule 73
	for terminal 'TUP': reduce using rule 73
	for terminal 'UNARY_LOGICAL_OPERATOR': reduce using rule 73
	for terminal 'UNARY_OPERATOR': reduce using rule 73
	for terminal 'WHILE': reduce using rule 73
	for terminal 'YAY': reduce using rule 73
	for terminal 'YIELD': reduce using rule 73

State 261
	71   conditional_argument: special_function COMPARISON_OPERATOR expression .

	for terminal 'CLOSE_PARENTHESIS': reduce using rule 71

State 262
	167  terms: binary_operators term . terms

	for terminal 'BINARY_LOGICAL_OPERATOR': shift and go to state 220
	for terminal 'BINARY_OPERATOR': shift and go to state 221
	for terminal 'CLOSE_BRACES': reduce using rule 79
	for terminal 'CLOSE_BRACKET': reduce using rule 79
	for terminal 'CLOSE_PARENTHESIS': reduce using rule 79
	for terminal 'COMPARISON_OPERATOR': shift and go to state 213
	for terminal 'ELEMENT_SEPERATOR': reduce using rule 79
	for terminal 'END_OF_LINE': reduce using rule 79
	for terminal ELEMENT_SEPARATOR: reduce using rule 79

	for non-terminal BINARY_LOGICAL_OPERATOR: go to state 214
	for non-terminal BINARY_OPERATOR: go to state 215
	for non-terminal COMPARISON_OPERATOR: go to state 216
	for non-terminal binary_operators: go to state 217
	for non-terminal epsilon: go to state 218
	for non-terminal terms: go to state 290

State 263
	172  value_change_array: IDENTIFIER OPEN_BRACKET NUM_LITERAL CLOSE_BRACKET assignment_operators . expression

	for terminal 'END_OF_LINE': reduce using rule 79
	for terminal 'IDENTIFIER': shift and go to state 19
	for terminal 'LENGTH': shift and go to state 162
	for terminal 'NAY': shift and go to state 163
	for terminal 'NUM_LITERAL': shift and go to state 140
	for terminal 'OPEN_PARENTHESIS': shift and go to state 21
	for terminal 'TILDE': shift and go to state 164
	for terminal 'UNARY_LOGICAL_OPERATOR': shift and go to state 94
	for terminal 'UNARY_OPERATOR': shift and go to state 95
	for terminal 'YAY': shift and go to state 165

	for non-terminal IDENTIFIER: go to state 167
	for non-terminal LENGTH: go to state 168
	for non-terminal NAY: go to state 147
	for non-terminal NUM_LITERAL: go to state 148
	for non-terminal OPEN_PARENTHESIS: go to state 149
	for non-terminal TILDE: go to state 150
	for non-terminal UNARY_LOGICAL_OPERATOR: go to state 63
	for non-terminal UNARY_OPERATOR: go to state 64
	for non-terminal YAY: go to state 151
	for non-terminal epsilon: go to state 153
	for non-terminal expression: go to state 291
	for non-terminal string: go to state 157
	for non-terminal term: go to state 158
	for non-terminal unary_operators: go to state 159

State 264
	84   expressions: ELEMENT_SEPERATOR expression . expressions

	for terminal 'CLOSE_BRACKET': reduce using rule 79
	for terminal 'CLOSE_PARENTHESIS': reduce using rule 79
	for terminal 'ELEMENT_SEPERATOR': shift and go to state 50

	for non-terminal ELEMENT_SEPERATOR: go to state 226
	for non-terminal epsilon: go to state 227
	for non-terminal expressions: go to state 292

State 265
	122  post_equal_to: ENTER OPEN_PARENTHESIS string . CLOSE_PARENTHESIS

	for terminal 'CLOSE_PARENTHESIS': shift and go to state 24

	for non-terminal CLOSE_PARENTHESIS: go to state 293

State 266
	99   let_in_statement: LET data_type IDENTIFIER . EQUAL_TO OPEN_BRACES let_in_braces
	100  let_in_statement: LET data_type IDENTIFIER . EQUAL_TO term IN OPEN_BRACES let_in_braces
	101  let_in_statement: LET data_type IDENTIFIER . EQUAL_TO term IN let_in

	for terminal 'EQUAL_TO': shift and go to state 114

	for non-terminal EQUAL_TO: go to state 294

State 267
	105  loop_statement: ITER OPEN_PARENTHESIS statement expression END_OF_LINE . expression CLOSE_PARENTHESIS block

	for terminal 'CLOSE_PARENTHESIS': reduce using rule 79
	for terminal 'IDENTIFIER': shift and go to state 19
	for terminal 'LENGTH': shift and go to state 162
	for terminal 'NAY': shift and go to state 163
	for terminal 'NUM_LITERAL': shift and go to state 140
	for terminal 'OPEN_PARENTHESIS': shift and go to state 21
	for terminal 'TILDE': shift and go to state 164
	for terminal 'UNARY_LOGICAL_OPERATOR': shift and go to state 94
	for terminal 'UNARY_OPERATOR': shift and go to state 95
	for terminal 'YAY': shift and go to state 165

	for non-terminal IDENTIFIER: go to state 167
	for non-terminal LENGTH: go to state 168
	for non-terminal NAY: go to state 147
	for non-terminal NUM_LITERAL: go to state 148
	for non-terminal OPEN_PARENTHESIS: go to state 149
	for non-terminal TILDE: go to state 150
	for non-terminal UNARY_LOGICAL_OPERATOR: go to state 63
	for non-terminal UNARY_OPERATOR: go to state 64
	for non-terminal YAY: go to state 151
	for non-terminal epsilon: go to state 153
	for non-terminal expression: go to state 295
	for non-terminal string: go to state 157
	for non-terminal term: go to state 158
	for non-terminal unary_operators: go to state 159

State 268
	107  loop_statement: REPEAT block WHILE OPEN_PARENTHESIS conditional_argument . CLOSE_PARENTHESIS END_OF_LINE

	for terminal 'CLOSE_PARENTHESIS': shift and go to state 24

	for non-terminal CLOSE_PARENTHESIS: go to state 296

State 269
	130  show_statement: SHOW OPEN_PARENTHESIS expression expressions CLOSE_PARENTHESIS .

	for terminal 'END_OF_LINE': reduce using rule 130

State 270
	169  try_catch_statement: TEST block ARREST OPEN_PARENTHESIS string . CLOSE_PARENTHESIS block

	for terminal 'CLOSE_PARENTHESIS': shift and go to state 24

	for non-terminal CLOSE_PARENTHESIS: go to state 297

State 271
	106  loop_statement: WHILE OPEN_PARENTHESIS conditional_argument CLOSE_PARENTHESIS block .

	for terminal 'CLOSE_BRACES': reduce using rule 106
	for terminal 'DEFINE': reduce using rule 106
	for terminal 'END_OF_LINE': reduce using rule 106
	for terminal 'FIX': reduce using rule 106
	for terminal 'FLAG': reduce using rule 106
	for terminal 'GIVEN': reduce using rule 106
	for terminal 'IDENTIFIER': reduce using rule 106
	for terminal 'ITER': reduce using rule 106
	for terminal 'LENGTH': reduce using rule 106
	for terminal 'LET': reduce using rule 106
	for terminal 'LIST': reduce using rule 106
	for terminal 'NAY': reduce using rule 106
	for terminal 'NUM': reduce using rule 106
	for terminal 'NUM_LITERAL': reduce using rule 106
	for terminal 'OPEN_BRACES': reduce using rule 106
	for terminal 'OPEN_PARENTHESIS': reduce using rule 106
	for terminal 'POP': reduce using rule 106
	for terminal 'REPEAT': reduce using rule 106
	for terminal 'SHOW': reduce using rule 106
	for terminal 'SKIP': reduce using rule 106
	for terminal 'STOP': reduce using rule 106
	for terminal 'STR': reduce using rule 106
	for terminal 'TEST': reduce using rule 106
	for terminal 'TILDE': reduce using rule 106
	for terminal 'TUP': reduce using rule 106
	for terminal 'UNARY_LOGICAL_OPERATOR': reduce using rule 106
	for terminal 'UNARY_OPERATOR': reduce using rule 106
	for terminal 'WHILE': reduce using rule 106
	for terminal 'YAY': reduce using rule 106
	for terminal 'YIELD': reduce using rule 106

State 272
	54   array: basic_data_type IDENTIFIER OPEN_BRACKET NUM_LITERAL CLOSE_BRACKET .

	for terminal 'END_OF_LINE': reduce using rule 54
	for terminal 'EQUAL_TO': reduce using rule 54

State 273
	104  list_append_tail: APPEND OPEN_PARENTHESIS expression . ELEMENT_SEPARATOR IDENTIFIER CLOSE_PARENTHESIS

	for terminal ELEMENT_SEPARATOR: shift and go to state 298

State 274
	102  list_append_tail: OPEN_BRACKET expression expressions . CLOSE_BRACKET

	for terminal 'CLOSE_BRACKET': shift and go to state 201

	for non-terminal CLOSE_BRACKET: go to state 299

State 275
	103  list_append_tail: TAIL OPEN_PARENTHESIS IDENTIFIER . CLOSE_PARENTHESIS

	for terminal 'CLOSE_PARENTHESIS': shift and go to state 24

	for non-terminal CLOSE_PARENTHESIS: go to state 300

State 276
	126  program: DEFINE NUM MAIN OPEN_PARENTHESIS CLOSE_PARENTHESIS OPEN_BRACES statements YIELD NUM_LITERAL END_OF_LINE CLOSE_BRACES .

	for terminal $end: reduce using rule 126

State 277
	90   function_block: OPEN_BRACES statements YIELD return_value END_OF_LINE . CLOSE_BRACES

	for terminal 'CLOSE_BRACES': shift and go to state 181

	for non-terminal CLOSE_BRACES: go to state 301

State 278
	136  special_function: HEAD OPEN_PARENTHESIS IDENTIFIER CLOSE_PARENTHESIS .

	for terminal 'COMPARISON_OPERATOR': reduce using rule 136
	for terminal 'END_OF_LINE': reduce using rule 136

State 279
	135  special_function: IDENTIFIER OPEN_BRACKET NUM_LITERAL CLOSE_BRACKET .

	for terminal 'COMPARISON_OPERATOR': reduce using rule 135
	for terminal 'END_OF_LINE': reduce using rule 135

State 280
	133  special_function: IDENTIFIER OPEN_BRACKET NUM_LITERAL SLICING_COLON . NUM_LITERAL CLOSE_BRACKET

	for terminal 'NUM_LITERAL': shift and go to state 140

	for non-terminal NUM_LITERAL: go to state 302

State 281
	39   SLICING_COLON: 'SLICING_COLON' .

	for terminal 'NUM_LITERAL': reduce using rule 39

State 282
	165  term: IDENTIFIER OPEN_BRACKET expression CLOSE_BRACKET .

	for terminal 'BINARY_LOGICAL_OPERATOR': reduce using rule 165
	for terminal 'BINARY_OPERATOR': reduce using rule 165
	for terminal 'CLOSE_BRACES': reduce using rule 165
	for terminal 'CLOSE_BRACKET': reduce using rule 165
	for terminal 'CLOSE_PARENTHESIS': reduce using rule 165
	for terminal 'COMPARISON_OPERATOR': reduce using rule 165
	for terminal 'ELEMENT_SEPERATOR': reduce using rule 165
	for terminal 'END_OF_LINE': reduce using rule 165
	for terminal 'IN': reduce using rule 165
	for terminal ELEMENT_SEPARATOR: reduce using rule 165

State 283
	137  special_function: ISEMPTY OPEN_PARENTHESIS IDENTIFIER CLOSE_PARENTHESIS .

	for terminal 'COMPARISON_OPERATOR': reduce using rule 137
	for terminal 'END_OF_LINE': reduce using rule 137

State 284
	134  special_function: LENGTH OPEN_PARENTHESIS IDENTIFIER CLOSE_PARENTHESIS .

	for terminal 'COMPARISON_OPERATOR': reduce using rule 134
	for terminal 'END_OF_LINE': reduce using rule 134

State 285
	62   block: OPEN_BRACES statements . CLOSE_BRACES
	175  yield_block: OPEN_BRACES statements . YIELD expression END_OF_LINE CLOSE_BRACES

	for terminal 'CLOSE_BRACES': shift and go to state 181
	for terminal 'YIELD': shift and go to state 135

	for non-terminal CLOSE_BRACES: go to state 180
	for non-terminal YIELD: go to state 303

State 286
	111  other_block: OTHER . OPEN_PARENTHESIS conditional_argument CLOSE_PARENTHESIS conditional_block other_block

	for terminal 'OPEN_PARENTHESIS': shift and go to state 21

	for non-terminal OPEN_PARENTHESIS: go to state 304

State 287
	112  other_block: epsilon .

	for terminal 'CLOSE_BRACES': reduce using rule 112
	for terminal 'DEFINE': reduce using rule 112
	for terminal 'END_OF_LINE': reduce using rule 112
	for terminal 'FIX': reduce using rule 112
	for terminal 'FLAG': reduce using rule 112
	for terminal 'GIVEN': reduce using rule 112
	for terminal 'IDENTIFIER': reduce using rule 112
	for terminal 'ITER': reduce using rule 112
	for terminal 'LENGTH': reduce using rule 112
	for terminal 'LET': reduce using rule 112
	for terminal 'LIST': reduce using rule 112
	for terminal 'NAY': reduce using rule 112
	for terminal 'NUM': reduce using rule 112
	for terminal 'NUM_LITERAL': reduce using rule 112
	for terminal 'OPEN_BRACES': reduce using rule 112
	for terminal 'OPEN_PARENTHESIS': reduce using rule 112
	for terminal 'OTHERWISE': reduce using rule 112
	for terminal 'POP': reduce using rule 112
	for terminal 'REPEAT': reduce using rule 112
	for terminal 'SHOW': reduce using rule 112
	for terminal 'SKIP': reduce using rule 112
	for terminal 'STOP': reduce using rule 112
	for terminal 'STR': reduce using rule 112
	for terminal 'TEST': reduce using rule 112
	for terminal 'TILDE': reduce using rule 112
	for terminal 'TUP': reduce using rule 112
	for terminal 'UNARY_LOGICAL_OPERATOR': reduce using rule 112
	for terminal 'UNARY_OPERATOR': reduce using rule 112
	for terminal 'WHILE': reduce using rule 112
	for terminal 'YAY': reduce using rule 112
	for terminal 'YIELD': reduce using rule 112

State 288
	75   conditional_statement: GIVEN OPEN_PARENTHESIS conditional_argument CLOSE_PARENTHESIS conditional_block other_block . otherwise_block

	for terminal 'CLOSE_BRACES': reduce using rule 79
	for terminal 'DEFINE': reduce using rule 79
	for terminal 'END_OF_LINE': reduce using rule 79
	for terminal 'FIX': reduce using rule 79
	for terminal 'FLAG': reduce using rule 79
	for terminal 'GIVEN': reduce using rule 79
	for terminal 'IDENTIFIER': reduce using rule 79
	for terminal 'ITER': reduce using rule 79
	for terminal 'LENGTH': reduce using rule 79
	for terminal 'LET': reduce using rule 79
	for terminal 'LIST': reduce using rule 79
	for terminal 'NAY': reduce using rule 79
	for terminal 'NUM': reduce using rule 79
	for terminal 'NUM_LITERAL': reduce using rule 79
	for terminal 'OPEN_BRACES': reduce using rule 79
	for terminal 'OPEN_PARENTHESIS': reduce using rule 79
	for terminal 'OTHERWISE': shift and go to state 308
	for terminal 'POP': reduce using rule 79
	for terminal 'REPEAT': reduce using rule 79
	for terminal 'SHOW': reduce using rule 79
	for terminal 'SKIP': reduce using rule 79
	for terminal 'STOP': reduce using rule 79
	for terminal 'STR': reduce using rule 79
	for terminal 'TEST': reduce using rule 79
	for terminal 'TILDE': reduce using rule 79
	for terminal 'TUP': reduce using rule 79
	for terminal 'UNARY_LOGICAL_OPERATOR': reduce using rule 79
	for terminal 'UNARY_OPERATOR': reduce using rule 79
	for terminal 'WHILE': reduce using rule 79
	for terminal 'YAY': reduce using rule 79
	for terminal 'YIELD': reduce using rule 79

	for non-terminal OTHERWISE: go to state 305
	for non-terminal epsilon: go to state 306
	for non-terminal otherwise_block: go to state 307

State 289
	33   OTHER: 'OTHER' .

	for terminal 'OPEN_PARENTHESIS': reduce using rule 33

State 290
	167  terms: binary_operators term terms .

	for terminal 'CLOSE_BRACES': reduce using rule 167
	for terminal 'CLOSE_BRACKET': reduce using rule 167
	for terminal 'CLOSE_PARENTHESIS': reduce using rule 167
	for terminal 'ELEMENT_SEPERATOR': reduce using rule 167
	for terminal 'END_OF_LINE': reduce using rule 167
	for terminal ELEMENT_SEPARATOR: reduce using rule 167

State 291
	172  value_change_array: IDENTIFIER OPEN_BRACKET NUM_LITERAL CLOSE_BRACKET assignment_operators expression .

	for terminal 'END_OF_LINE': reduce using rule 172

State 292
	84   expressions: ELEMENT_SEPERATOR expression expressions .

	for terminal 'CLOSE_BRACKET': reduce using rule 84
	for terminal 'CLOSE_PARENTHESIS': reduce using rule 84

State 293
	122  post_equal_to: ENTER OPEN_PARENTHESIS string CLOSE_PARENTHESIS .

	for terminal 'END_OF_LINE': reduce using rule 122

State 294
	99   let_in_statement: LET data_type IDENTIFIER EQUAL_TO . OPEN_BRACES let_in_braces
	100  let_in_statement: LET data_type IDENTIFIER EQUAL_TO . term IN OPEN_BRACES let_in_braces
	101  let_in_statement: LET data_type IDENTIFIER EQUAL_TO . term IN let_in

	for terminal 'IDENTIFIER': shift and go to state 19
	for terminal 'LENGTH': shift and go to state 162
	for terminal 'NAY': shift and go to state 163
	for terminal 'NUM_LITERAL': shift and go to state 140
	for terminal 'OPEN_BRACES': shift and go to state 40
	for terminal 'OPEN_PARENTHESIS': shift and go to state 21
	for terminal 'TILDE': shift and go to state 164
	for terminal 'UNARY_LOGICAL_OPERATOR': shift and go to state 94
	for terminal 'UNARY_OPERATOR': shift and go to state 95
	for terminal 'YAY': shift and go to state 165

	for non-terminal IDENTIFIER: go to state 167
	for non-terminal LENGTH: go to state 168
	for non-terminal NAY: go to state 147
	for non-terminal NUM_LITERAL: go to state 148
	for non-terminal OPEN_BRACES: go to state 309
	for non-terminal OPEN_PARENTHESIS: go to state 149
	for non-terminal TILDE: go to state 150
	for non-terminal UNARY_LOGICAL_OPERATOR: go to state 63
	for non-terminal UNARY_OPERATOR: go to state 64
	for non-terminal YAY: go to state 151
	for non-terminal string: go to state 157
	for non-terminal term: go to state 310
	for non-terminal unary_operators: go to state 159

State 295
	105  loop_statement: ITER OPEN_PARENTHESIS statement expression END_OF_LINE expression . CLOSE_PARENTHESIS block

	for terminal 'CLOSE_PARENTHESIS': shift and go to state 24

	for non-terminal CLOSE_PARENTHESIS: go to state 311

State 296
	107  loop_statement: REPEAT block WHILE OPEN_PARENTHESIS conditional_argument CLOSE_PARENTHESIS . END_OF_LINE

	for terminal 'END_OF_LINE': shift and go to state 123

	for non-terminal END_OF_LINE: go to state 312

State 297
	169  try_catch_statement: TEST block ARREST OPEN_PARENTHESIS string CLOSE_PARENTHESIS . block

	for terminal 'OPEN_BRACES': shift and go to state 40

	for non-terminal OPEN_BRACES: go to state 56
	for non-terminal block: go to state 313

State 298
	104  list_append_tail: APPEND OPEN_PARENTHESIS expression ELEMENT_SEPARATOR . IDENTIFIER CLOSE_PARENTHESIS

	for terminal 'IDENTIFIER': shift and go to state 19

	for non-terminal IDENTIFIER: go to state 314

State 299
	102  list_append_tail: OPEN_BRACKET expression expressions CLOSE_BRACKET .

	for terminal 'END_OF_LINE': reduce using rule 102

State 300
	103  list_append_tail: TAIL OPEN_PARENTHESIS IDENTIFIER CLOSE_PARENTHESIS .

	for terminal 'END_OF_LINE': reduce using rule 103

State 301
	90   function_block: OPEN_BRACES statements YIELD return_value END_OF_LINE CLOSE_BRACES .

	for terminal 'CLOSE_BRACES': reduce using rule 90
	for terminal 'DEFINE': reduce using rule 90
	for terminal 'END_OF_LINE': reduce using rule 90
	for terminal 'FIX': reduce using rule 90
	for terminal 'FLAG': reduce using rule 90
	for terminal 'GIVEN': reduce using rule 90
	for terminal 'IDENTIFIER': reduce using rule 90
	for terminal 'ITER': reduce using rule 90
	for terminal 'LENGTH': reduce using rule 90
	for terminal 'LET': reduce using rule 90
	for terminal 'LIST': reduce using rule 90
	for terminal 'NAY': reduce using rule 90
	for terminal 'NUM': reduce using rule 90
	for terminal 'NUM_LITERAL': reduce using rule 90
	for terminal 'OPEN_BRACES': reduce using rule 90
	for terminal 'OPEN_PARENTHESIS': reduce using rule 90
	for terminal 'POP': reduce using rule 90
	for terminal 'REPEAT': reduce using rule 90
	for terminal 'SHOW': reduce using rule 90
	for terminal 'SKIP': reduce using rule 90
	for terminal 'STOP': reduce using rule 90
	for terminal 'STR': reduce using rule 90
	for terminal 'TEST': reduce using rule 90
	for terminal 'TILDE': reduce using rule 90
	for terminal 'TUP': reduce using rule 90
	for terminal 'UNARY_LOGICAL_OPERATOR': reduce using rule 90
	for terminal 'UNARY_OPERATOR': reduce using rule 90
	for terminal 'WHILE': reduce using rule 90
	for terminal 'YAY': reduce using rule 90
	for terminal 'YIELD': reduce using rule 90

State 302
	133  special_function: IDENTIFIER OPEN_BRACKET NUM_LITERAL SLICING_COLON NUM_LITERAL . CLOSE_BRACKET

	for terminal 'CLOSE_BRACKET': shift and go to state 201

	for non-terminal CLOSE_BRACKET: go to state 315

State 303
	175  yield_block: OPEN_BRACES statements YIELD . expression END_OF_LINE CLOSE_BRACES

	for terminal 'END_OF_LINE': reduce using rule 79
	for terminal 'IDENTIFIER': shift and go to state 19
	for terminal 'LENGTH': shift and go to state 162
	for terminal 'NAY': shift and go to state 163
	for terminal 'NUM_LITERAL': shift and go to state 140
	for terminal 'OPEN_PARENTHESIS': shift and go to state 21
	for terminal 'TILDE': shift and go to state 164
	for terminal 'UNARY_LOGICAL_OPERATOR': shift and go to state 94
	for terminal 'UNARY_OPERATOR': shift and go to state 95
	for terminal 'YAY': shift and go to state 165

	for non-terminal IDENTIFIER: go to state 167
	for non-terminal LENGTH: go to state 168
	for non-terminal NAY: go to state 147
	for non-terminal NUM_LITERAL: go to state 148
	for non-terminal OPEN_PARENTHESIS: go to state 149
	for non-terminal TILDE: go to state 150
	for non-terminal UNARY_LOGICAL_OPERATOR: go to state 63
	for non-terminal UNARY_OPERATOR: go to state 64
	for non-terminal YAY: go to state 151
	for non-terminal epsilon: go to state 153
	for non-terminal expression: go to state 316
	for non-terminal string: go to state 157
	for non-terminal term: go to state 158
	for non-terminal unary_operators: go to state 159

State 304
	111  other_block: OTHER OPEN_PARENTHESIS . conditional_argument CLOSE_PARENTHESIS conditional_block other_block

	for terminal 'CLOSE_PARENTHESIS': reduce using rule 79
	for terminal 'HEAD': shift and go to state 160
	for terminal 'IDENTIFIER': shift and go to state 19
	for terminal 'ISEMPTY': shift and go to state 161
	for terminal 'LENGTH': shift and go to state 162
	for terminal 'NAY': shift and go to state 163
	for terminal 'NUM_LITERAL': shift and go to state 140
	for terminal 'OPEN_PARENTHESIS': shift and go to state 21
	for terminal 'TILDE': shift and go to state 164
	for terminal 'UNARY_LOGICAL_OPERATOR': shift and go to state 94
	for terminal 'UNARY_OPERATOR': shift and go to state 95
	for terminal 'YAY': shift and go to state 165

	for non-terminal HEAD: go to state 143
	for non-terminal IDENTIFIER: go to state 144
	for non-terminal ISEMPTY: go to state 145
	for non-terminal LENGTH: go to state 146
	for non-terminal NAY: go to state 147
	for non-terminal NUM_LITERAL: go to state 148
	for non-terminal OPEN_PARENTHESIS: go to state 149
	for non-terminal TILDE: go to state 150
	for non-terminal UNARY_LOGICAL_OPERATOR: go to state 63
	for non-terminal UNARY_OPERATOR: go to state 64
	for non-terminal YAY: go to state 151
	for non-terminal conditional_argument: go to state 317
	for non-terminal epsilon: go to state 153
	for non-terminal expression: go to state 154
	for non-terminal function_call: go to state 155
	for non-terminal special_function: go to state 156
	for non-terminal string: go to state 157
	for non-terminal term: go to state 158
	for non-terminal unary_operators: go to state 159

State 305
	113  otherwise_block: OTHERWISE . conditional_block

	for terminal 'OPEN_BRACES': shift and go to state 40

	for non-terminal OPEN_BRACES: go to state 257
	for non-terminal block: go to state 258
	for non-terminal conditional_block: go to state 318
	for non-terminal yield_block: go to state 260

State 306
	114  otherwise_block: epsilon .

	for terminal 'CLOSE_BRACES': reduce using rule 114
	for terminal 'DEFINE': reduce using rule 114
	for terminal 'END_OF_LINE': reduce using rule 114
	for terminal 'FIX': reduce using rule 114
	for terminal 'FLAG': reduce using rule 114
	for terminal 'GIVEN': reduce using rule 114
	for terminal 'IDENTIFIER': reduce using rule 114
	for terminal 'ITER': reduce using rule 114
	for terminal 'LENGTH': reduce using rule 114
	for terminal 'LET': reduce using rule 114
	for terminal 'LIST': reduce using rule 114
	for terminal 'NAY': reduce using rule 114
	for terminal 'NUM': reduce using rule 114
	for terminal 'NUM_LITERAL': reduce using rule 114
	for terminal 'OPEN_BRACES': reduce using rule 114
	for terminal 'OPEN_PARENTHESIS': reduce using rule 114
	for terminal 'POP': reduce using rule 114
	for terminal 'REPEAT': reduce using rule 114
	for terminal 'SHOW': reduce using rule 114
	for terminal 'SKIP': reduce using rule 114
	for terminal 'STOP': reduce using rule 114
	for terminal 'STR': reduce using rule 114
	for terminal 'TEST': reduce using rule 114
	for terminal 'TILDE': reduce using rule 114
	for terminal 'TUP': reduce using rule 114
	for terminal 'UNARY_LOGICAL_OPERATOR': reduce using rule 114
	for terminal 'UNARY_OPERATOR': reduce using rule 114
	for terminal 'WHILE': reduce using rule 114
	for terminal 'YAY': reduce using rule 114
	for terminal 'YIELD': reduce using rule 114

State 307
	75   conditional_statement: GIVEN OPEN_PARENTHESIS conditional_argument CLOSE_PARENTHESIS conditional_block other_block otherwise_block .

	for terminal 'CLOSE_BRACES': reduce using rule 75
	for terminal 'DEFINE': reduce using rule 75
	for terminal 'END_OF_LINE': reduce using rule 75
	for terminal 'FIX': reduce using rule 75
	for terminal 'FLAG': reduce using rule 75
	for terminal 'GIVEN': reduce using rule 75
	for terminal 'IDENTIFIER': reduce using rule 75
	for terminal 'ITER': reduce using rule 75
	for terminal 'LENGTH': reduce using rule 75
	for terminal 'LET': reduce using rule 75
	for terminal 'LIST': reduce using rule 75
	for terminal 'NAY': reduce using rule 75
	for terminal 'NUM': reduce using rule 75
	for terminal 'NUM_LITERAL': reduce using rule 75
	for terminal 'OPEN_BRACES': reduce using rule 75
	for terminal 'OPEN_PARENTHESIS': reduce using rule 75
	for terminal 'POP': reduce using rule 75
	for terminal 'REPEAT': reduce using rule 75
	for terminal 'SHOW': reduce using rule 75
	for terminal 'SKIP': reduce using rule 75
	for terminal 'STOP': reduce using rule 75
	for terminal 'STR': reduce using rule 75
	for terminal 'TEST': reduce using rule 75
	for terminal 'TILDE': reduce using rule 75
	for terminal 'TUP': reduce using rule 75
	for terminal 'UNARY_LOGICAL_OPERATOR': reduce using rule 75
	for terminal 'UNARY_OPERATOR': reduce using rule 75
	for terminal 'WHILE': reduce using rule 75
	for terminal 'YAY': reduce using rule 75
	for terminal 'YIELD': reduce using rule 75

State 308
	34   OTHERWISE: 'OTHERWISE' .

	for terminal 'OPEN_BRACES': reduce using rule 34

State 309
	99   let_in_statement: LET data_type IDENTIFIER EQUAL_TO OPEN_BRACES . let_in_braces

	for terminal 'CLOSE_BRACES': reduce using rule 79
	for terminal 'IDENTIFIER': shift and go to state 19
	for terminal 'LENGTH': shift and go to state 162
	for terminal 'LET': shift and go to state 36
	for terminal 'NAY': shift and go to state 163
	for terminal 'NUM_LITERAL': shift and go to state 140
	for terminal 'OPEN_PARENTHESIS': shift and go to state 21
	for terminal 'TILDE': shift and go to state 164
	for terminal 'UNARY_LOGICAL_OPERATOR': shift and go to state 94
	for terminal 'UNARY_OPERATOR': shift and go to state 95
	for terminal 'YAY': shift and go to state 165

	for non-terminal IDENTIFIER: go to state 167
	for non-terminal LENGTH: go to state 168
	for non-terminal LET: go to state 173
	for non-terminal NAY: go to state 147
	for non-terminal NUM_LITERAL: go to state 148
	for non-terminal OPEN_PARENTHESIS: go to state 149
	for non-terminal TILDE: go to state 150
	for non-terminal UNARY_LOGICAL_OPERATOR: go to state 63
	for non-terminal UNARY_OPERATOR: go to state 64
	for non-terminal YAY: go to state 151
	for non-terminal epsilon: go to state 153
	for non-terminal expression: go to state 319
	for non-terminal let_in: go to state 320
	for non-terminal let_in_braces: go to state 321
	for non-terminal let_in_statement: go to state 322
	for non-terminal string: go to state 157
	for non-terminal term: go to state 158
	for non-terminal unary_operators: go to state 159

State 310
	100  let_in_statement: LET data_type IDENTIFIER EQUAL_TO term . IN OPEN_BRACES let_in_braces
	101  let_in_statement: LET data_type IDENTIFIER EQUAL_TO term . IN let_in

	for terminal 'IN': shift and go to state 324

	for non-terminal IN: go to state 323

State 311
	105  loop_statement: ITER OPEN_PARENTHESIS statement expression END_OF_LINE expression CLOSE_PARENTHESIS . block

	for terminal 'OPEN_BRACES': shift and go to state 40

	for non-terminal OPEN_BRACES: go to state 56
	for non-terminal block: go to state 325

State 312
	107  loop_statement: REPEAT block WHILE OPEN_PARENTHESIS conditional_argument CLOSE_PARENTHESIS END_OF_LINE .

	for terminal 'CLOSE_BRACES': reduce using rule 107
	for terminal 'DEFINE': reduce using rule 107
	for terminal 'END_OF_LINE': reduce using rule 107
	for terminal 'FIX': reduce using rule 107
	for terminal 'FLAG': reduce using rule 107
	for terminal 'GIVEN': reduce using rule 107
	for terminal 'IDENTIFIER': reduce using rule 107
	for terminal 'ITER': reduce using rule 107
	for terminal 'LENGTH': reduce using rule 107
	for terminal 'LET': reduce using rule 107
	for terminal 'LIST': reduce using rule 107
	for terminal 'NAY': reduce using rule 107
	for terminal 'NUM': reduce using rule 107
	for terminal 'NUM_LITERAL': reduce using rule 107
	for terminal 'OPEN_BRACES': reduce using rule 107
	for terminal 'OPEN_PARENTHESIS': reduce using rule 107
	for terminal 'POP': reduce using rule 107
	for terminal 'REPEAT': reduce using rule 107
	for terminal 'SHOW': reduce using rule 107
	for terminal 'SKIP': reduce using rule 107
	for terminal 'STOP': reduce using rule 107
	for terminal 'STR': reduce using rule 107
	for terminal 'TEST': reduce using rule 107
	for terminal 'TILDE': reduce using rule 107
	for terminal 'TUP': reduce using rule 107
	for terminal 'UNARY_LOGICAL_OPERATOR': reduce using rule 107
	for terminal 'UNARY_OPERATOR': reduce using rule 107
	for terminal 'WHILE': reduce using rule 107
	for terminal 'YAY': reduce using rule 107
	for terminal 'YIELD': reduce using rule 107

State 313
	169  try_catch_statement: TEST block ARREST OPEN_PARENTHESIS string CLOSE_PARENTHESIS block .

	for terminal 'CLOSE_BRACES': reduce using rule 169
	for terminal 'DEFINE': reduce using rule 169
	for terminal 'END_OF_LINE': reduce using rule 169
	for terminal 'FIX': reduce using rule 169
	for terminal 'FLAG': reduce using rule 169
	for terminal 'GIVEN': reduce using rule 169
	for terminal 'IDENTIFIER': reduce using rule 169
	for terminal 'ITER': reduce using rule 169
	for terminal 'LENGTH': reduce using rule 169
	for terminal 'LET': reduce using rule 169
	for terminal 'LIST': reduce using rule 169
	for terminal 'NAY': reduce using rule 169
	for terminal 'NUM': reduce using rule 169
	for terminal 'NUM_LITERAL': reduce using rule 169
	for terminal 'OPEN_BRACES': reduce using rule 169
	for terminal 'OPEN_PARENTHESIS': reduce using rule 169
	for terminal 'POP': reduce using rule 169
	for terminal 'REPEAT': reduce using rule 169
	for terminal 'SHOW': reduce using rule 169
	for terminal 'SKIP': reduce using rule 169
	for terminal 'STOP': reduce using rule 169
	for terminal 'STR': reduce using rule 169
	for terminal 'TEST': reduce using rule 169
	for terminal 'TILDE': reduce using rule 169
	for terminal 'TUP': reduce using rule 169
	for terminal 'UNARY_LOGICAL_OPERATOR': reduce using rule 169
	for terminal 'UNARY_OPERATOR': reduce using rule 169
	for terminal 'WHILE': reduce using rule 169
	for terminal 'YAY': reduce using rule 169
	for terminal 'YIELD': reduce using rule 169

State 314
	104  list_append_tail: APPEND OPEN_PARENTHESIS expression ELEMENT_SEPARATOR IDENTIFIER . CLOSE_PARENTHESIS

	for terminal 'CLOSE_PARENTHESIS': shift and go to state 24

	for non-terminal CLOSE_PARENTHESIS: go to state 326

State 315
	133  special_function: IDENTIFIER OPEN_BRACKET NUM_LITERAL SLICING_COLON NUM_LITERAL CLOSE_BRACKET .

	for terminal 'COMPARISON_OPERATOR': reduce using rule 133
	for terminal 'END_OF_LINE': reduce using rule 133

State 316
	175  yield_block: OPEN_BRACES statements YIELD expression . END_OF_LINE CLOSE_BRACES

	for terminal 'END_OF_LINE': shift and go to state 123

	for non-terminal END_OF_LINE: go to state 327

State 317
	111  other_block: OTHER OPEN_PARENTHESIS conditional_argument . CLOSE_PARENTHESIS conditional_block other_block

	for terminal 'CLOSE_PARENTHESIS': shift and go to state 24

	for non-terminal CLOSE_PARENTHESIS: go to state 328

State 318
	113  otherwise_block: OTHERWISE conditional_block .

	for terminal 'CLOSE_BRACES': reduce using rule 113
	for terminal 'DEFINE': reduce using rule 113
	for terminal 'END_OF_LINE': reduce using rule 113
	for terminal 'FIX': reduce using rule 113
	for terminal 'FLAG': reduce using rule 113
	for terminal 'GIVEN': reduce using rule 113
	for terminal 'IDENTIFIER': reduce using rule 113
	for terminal 'ITER': reduce using rule 113
	for terminal 'LENGTH': reduce using rule 113
	for terminal 'LET': reduce using rule 113
	for terminal 'LIST': reduce using rule 113
	for terminal 'NAY': reduce using rule 113
	for terminal 'NUM': reduce using rule 113
	for terminal 'NUM_LITERAL': reduce using rule 113
	for terminal 'OPEN_BRACES': reduce using rule 113
	for terminal 'OPEN_PARENTHESIS': reduce using rule 113
	for terminal 'POP': reduce using rule 113
	for terminal 'REPEAT': reduce using rule 113
	for terminal 'SHOW': reduce using rule 113
	for terminal 'SKIP': reduce using rule 113
	for terminal 'STOP': reduce using rule 113
	for terminal 'STR': reduce using rule 113
	for terminal 'TEST': reduce using rule 113
	for terminal 'TILDE': reduce using rule 113
	for terminal 'TUP': reduce using rule 113
	for terminal 'UNARY_LOGICAL_OPERATOR': reduce using rule 113
	for terminal 'UNARY_OPERATOR': reduce using rule 113
	for terminal 'WHILE': reduce using rule 113
	for terminal 'YAY': reduce using rule 113
	for terminal 'YIELD': reduce using rule 113

State 319
	97   let_in: expression .

	for terminal 'CLOSE_BRACES': reduce using rule 97
	for terminal 'END_OF_LINE': reduce using rule 97

State 320
	98   let_in_braces: let_in . CLOSE_BRACES

	for terminal 'CLOSE_BRACES': shift and go to state 181

	for non-terminal CLOSE_BRACES: go to state 329

State 321
	99   let_in_statement: LET data_type IDENTIFIER EQUAL_TO OPEN_BRACES let_in_braces .

	for terminal 'CLOSE_BRACES': reduce using rule 99
	for terminal 'END_OF_LINE': reduce using rule 99

State 322
	96   let_in: let_in_statement .

	for terminal 'CLOSE_BRACES': reduce using rule 96
	for terminal 'END_OF_LINE': reduce using rule 96

State 323
	100  let_in_statement: LET data_type IDENTIFIER EQUAL_TO term IN . OPEN_BRACES let_in_braces
	101  let_in_statement: LET data_type IDENTIFIER EQUAL_TO term IN . let_in

	for terminal 'CLOSE_BRACES': reduce using rule 79
	for terminal 'END_OF_LINE': reduce using rule 79
	for terminal 'IDENTIFIER': shift and go to state 19
	for terminal 'LENGTH': shift and go to state 162
	for terminal 'LET': shift and go to state 36
	for terminal 'NAY': shift and go to state 163
	for terminal 'NUM_LITERAL': shift and go to state 140
	for terminal 'OPEN_BRACES': shift and go to state 40
	for terminal 'OPEN_PARENTHESIS': shift and go to state 21
	for terminal 'TILDE': shift and go to state 164
	for terminal 'UNARY_LOGICAL_OPERATOR': shift and go to state 94
	for terminal 'UNARY_OPERATOR': shift and go to state 95
	for terminal 'YAY': shift and go to state 165

	for non-terminal IDENTIFIER: go to state 167
	for non-terminal LENGTH: go to state 168
	for non-terminal LET: go to state 173
	for non-terminal NAY: go to state 147
	for non-terminal NUM_LITERAL: go to state 148
	for non-terminal OPEN_BRACES: go to state 330
	for non-terminal OPEN_PARENTHESIS: go to state 149
	for non-terminal TILDE: go to state 150
	for non-terminal UNARY_LOGICAL_OPERATOR: go to state 63
	for non-terminal UNARY_OPERATOR: go to state 64
	for non-terminal YAY: go to state 151
	for non-terminal epsilon: go to state 153
	for non-terminal expression: go to state 319
	for non-terminal let_in: go to state 331
	for non-terminal let_in_statement: go to state 322
	for non-terminal string: go to state 157
	for non-terminal term: go to state 158
	for non-terminal unary_operators: go to state 159

State 324
	20   IN: 'IN' .

	for terminal 'CLOSE_BRACES': reduce using rule 20
	for terminal 'END_OF_LINE': reduce using rule 20
	for terminal 'IDENTIFIER': reduce using rule 20
	for terminal 'LENGTH': reduce using rule 20
	for terminal 'LET': reduce using rule 20
	for terminal 'NAY': reduce using rule 20
	for terminal 'NUM_LITERAL': reduce using rule 20
	for terminal 'OPEN_BRACES': reduce using rule 20
	for terminal 'OPEN_PARENTHESIS': reduce using rule 20
	for terminal 'TILDE': reduce using rule 20
	for terminal 'UNARY_LOGICAL_OPERATOR': reduce using rule 20
	for terminal 'UNARY_OPERATOR': reduce using rule 20
	for terminal 'YAY': reduce using rule 20

State 325
	105  loop_statement: ITER OPEN_PARENTHESIS statement expression END_OF_LINE expression CLOSE_PARENTHESIS block .

	for terminal 'CLOSE_BRACES': reduce using rule 105
	for terminal 'DEFINE': reduce using rule 105
	for terminal 'END_OF_LINE': reduce using rule 105
	for terminal 'FIX': reduce using rule 105
	for terminal 'FLAG': reduce using rule 105
	for terminal 'GIVEN': reduce using rule 105
	for terminal 'IDENTIFIER': reduce using rule 105
	for terminal 'ITER': reduce using rule 105
	for terminal 'LENGTH': reduce using rule 105
	for terminal 'LET': reduce using rule 105
	for terminal 'LIST': reduce using rule 105
	for terminal 'NAY': reduce using rule 105
	for terminal 'NUM': reduce using rule 105
	for terminal 'NUM_LITERAL': reduce using rule 105
	for terminal 'OPEN_BRACES': reduce using rule 105
	for terminal 'OPEN_PARENTHESIS': reduce using rule 105
	for terminal 'POP': reduce using rule 105
	for terminal 'REPEAT': reduce using rule 105
	for terminal 'SHOW': reduce using rule 105
	for terminal 'SKIP': reduce using rule 105
	for terminal 'STOP': reduce using rule 105
	for terminal 'STR': reduce using rule 105
	for terminal 'TEST': reduce using rule 105
	for terminal 'TILDE': reduce using rule 105
	for terminal 'TUP': reduce using rule 105
	for terminal 'UNARY_LOGICAL_OPERATOR': reduce using rule 105
	for terminal 'UNARY_OPERATOR': reduce using rule 105
	for terminal 'WHILE': reduce using rule 105
	for terminal 'YAY': reduce using rule 105
	for terminal 'YIELD': reduce using rule 105

State 326
	104  list_append_tail: APPEND OPEN_PARENTHESIS expression ELEMENT_SEPARATOR IDENTIFIER CLOSE_PARENTHESIS .

	for terminal 'END_OF_LINE': reduce using rule 104

State 327
	175  yield_block: OPEN_BRACES statements YIELD expression END_OF_LINE . CLOSE_BRACES

	for terminal 'CLOSE_BRACES': shift and go to state 181

	for non-terminal CLOSE_BRACES: go to state 332

State 328
	111  other_block: OTHER OPEN_PARENTHESIS conditional_argument CLOSE_PARENTHESIS . conditional_block other_block

	for terminal 'OPEN_BRACES': shift and go to state 40

	for non-terminal OPEN_BRACES: go to state 257
	for non-terminal block: go to state 258
	for non-terminal conditional_block: go to state 333
	for non-terminal yield_block: go to state 260

State 329
	98   let_in_braces: let_in CLOSE_BRACES .

	for terminal 'CLOSE_BRACES': reduce using rule 98
	for terminal 'END_OF_LINE': reduce using rule 98

State 330
	100  let_in_statement: LET data_type IDENTIFIER EQUAL_TO term IN OPEN_BRACES . let_in_braces

	for terminal 'CLOSE_BRACES': reduce using rule 79
	for terminal 'IDENTIFIER': shift and go to state 19
	for terminal 'LENGTH': shift and go to state 162
	for terminal 'LET': shift and go to state 36
	for terminal 'NAY': shift and go to state 163
	for terminal 'NUM_LITERAL': shift and go to state 140
	for terminal 'OPEN_PARENTHESIS': shift and go to state 21
	for terminal 'TILDE': shift and go to state 164
	for terminal 'UNARY_LOGICAL_OPERATOR': shift and go to state 94
	for terminal 'UNARY_OPERATOR': shift and go to state 95
	for terminal 'YAY': shift and go to state 165

	for non-terminal IDENTIFIER: go to state 167
	for non-terminal LENGTH: go to state 168
	for non-terminal LET: go to state 173
	for non-terminal NAY: go to state 147
	for non-terminal NUM_LITERAL: go to state 148
	for non-terminal OPEN_PARENTHESIS: go to state 149
	for non-terminal TILDE: go to state 150
	for non-terminal UNARY_LOGICAL_OPERATOR: go to state 63
	for non-terminal UNARY_OPERATOR: go to state 64
	for non-terminal YAY: go to state 151
	for non-terminal epsilon: go to state 153
	for non-terminal expression: go to state 319
	for non-terminal let_in: go to state 320
	for non-terminal let_in_braces: go to state 334
	for non-terminal let_in_statement: go to state 322
	for non-terminal string: go to state 157
	for non-terminal term: go to state 158
	for non-terminal unary_operators: go to state 159

State 331
	101  let_in_statement: LET data_type IDENTIFIER EQUAL_TO term IN let_in .

	for terminal 'CLOSE_BRACES': reduce using rule 101
	for terminal 'END_OF_LINE': reduce using rule 101

State 332
	175  yield_block: OPEN_BRACES statements YIELD expression END_OF_LINE CLOSE_BRACES .

	for terminal 'CLOSE_BRACES': reduce using rule 175
	for terminal 'DEFINE': reduce using rule 175
	for terminal 'END_OF_LINE': reduce using rule 175
	for terminal 'FIX': reduce using rule 175
	for terminal 'FLAG': reduce using rule 175
	for terminal 'GIVEN': reduce using rule 175
	for terminal 'IDENTIFIER': reduce using rule 175
	for terminal 'ITER': reduce using rule 175
	for terminal 'LENGTH': reduce using rule 175
	for terminal 'LET': reduce using rule 175
	for terminal 'LIST': reduce using rule 175
	for terminal 'NAY': reduce using rule 175
	for terminal 'NUM': reduce using rule 175
	for terminal 'NUM_LITERAL': reduce using rule 175
	for terminal 'OPEN_BRACES': reduce using rule 175
	for terminal 'OPEN_PARENTHESIS': reduce using rule 175
	for terminal 'OTHER': reduce using rule 175
	for terminal 'OTHERWISE': reduce using rule 175
	for terminal 'POP': reduce using rule 175
	for terminal 'REPEAT': reduce using rule 175
	for terminal 'SHOW': reduce using rule 175
	for terminal 'SKIP': reduce using rule 175
	for terminal 'STOP': reduce using rule 175
	for terminal 'STR': reduce using rule 175
	for terminal 'TEST': reduce using rule 175
	for terminal 'TILDE': reduce using rule 175
	for terminal 'TUP': reduce using rule 175
	for terminal 'UNARY_LOGICAL_OPERATOR': reduce using rule 175
	for terminal 'UNARY_OPERATOR': reduce using rule 175
	for terminal 'WHILE': reduce using rule 175
	for terminal 'YAY': reduce using rule 175
	for terminal 'YIELD': reduce using rule 175

State 333
	111  other_block: OTHER OPEN_PARENTHESIS conditional_argument CLOSE_PARENTHESIS conditional_block . other_block

	for terminal 'CLOSE_BRACES': reduce using rule 79
	for terminal 'DEFINE': reduce using rule 79
	for terminal 'END_OF_LINE': reduce using rule 79
	for terminal 'FIX': reduce using rule 79
	for terminal 'FLAG': reduce using rule 79
	for terminal 'GIVEN': reduce using rule 79
	for terminal 'IDENTIFIER': reduce using rule 79
	for terminal 'ITER': reduce using rule 79
	for terminal 'LENGTH': reduce using rule 79
	for terminal 'LET': reduce using rule 79
	for terminal 'LIST': reduce using rule 79
	for terminal 'NAY': reduce using rule 79
	for terminal 'NUM': reduce using rule 79
	for terminal 'NUM_LITERAL': reduce using rule 79
	for terminal 'OPEN_BRACES': reduce using rule 79
	for terminal 'OPEN_PARENTHESIS': reduce using rule 79
	for terminal 'OTHER': shift and go to state 289
	for terminal 'OTHERWISE': reduce using rule 79
	for terminal 'POP': reduce using rule 79
	for terminal 'REPEAT': reduce using rule 79
	for terminal 'SHOW': reduce using rule 79
	for terminal 'SKIP': reduce using rule 79
	for terminal 'STOP': reduce using rule 79
	for terminal 'STR': reduce using rule 79
	for terminal 'TEST': reduce using rule 79
	for terminal 'TILDE': reduce using rule 79
	for terminal 'TUP': reduce using rule 79
	for terminal 'UNARY_LOGICAL_OPERATOR': reduce using rule 79
	for terminal 'UNARY_OPERATOR': reduce using rule 79
	for terminal 'WHILE': reduce using rule 79
	for terminal 'YAY': reduce using rule 79
	for terminal 'YIELD': reduce using rule 79

	for non-terminal OTHER: go to state 286
	for non-terminal epsilon: go to state 287
	for non-terminal other_block: go to state 335

State 334
	100  let_in_statement: LET data_type IDENTIFIER EQUAL_TO term IN OPEN_BRACES let_in_braces .

	for terminal 'CLOSE_BRACES': reduce using rule 100
	for terminal 'END_OF_LINE': reduce using rule 100

State 335
	111  other_block: OTHER OPEN_PARENTHESIS conditional_argument CLOSE_PARENTHESIS conditional_block other_block .

	for terminal 'CLOSE_BRACES': reduce using rule 111
	for terminal 'DEFINE': reduce using rule 111
	for terminal 'END_OF_LINE': reduce using rule 111
	for terminal 'FIX': reduce using rule 111
	for terminal 'FLAG': reduce using rule 111
	for terminal 'GIVEN': reduce using rule 111
	for terminal 'IDENTIFIER': reduce using rule 111
	for terminal 'ITER': reduce using rule 111
	for terminal 'LENGTH': reduce using rule 111
	for terminal 'LET': reduce using rule 111
	for terminal 'LIST': reduce using rule 111
	for terminal 'NAY': reduce using rule 111
	for terminal 'NUM': reduce using rule 111
	for terminal 'NUM_LITERAL': reduce using rule 111
	for terminal 'OPEN_BRACES': reduce using rule 111
	for terminal 'OPEN_PARENTHESIS': reduce using rule 111
	for terminal 'OTHERWISE': reduce using rule 111
	for terminal 'POP': reduce using rule 111
	for terminal 'REPEAT': reduce using rule 111
	for terminal 'SHOW': reduce using rule 111
	for terminal 'SKIP': reduce using rule 111
	for terminal 'STOP': reduce using rule 111
	for terminal 'STR': reduce using rule 111
	for terminal 'TEST': reduce using rule 111
	for terminal 'TILDE': reduce using rule 111
	for terminal 'TUP': reduce using rule 111
	for terminal 'UNARY_LOGICAL_OPERATOR': reduce using rule 111
	for terminal 'UNARY_OPERATOR': reduce using rule 111
	for terminal 'WHILE': reduce using rule 111
	for terminal 'YAY': reduce using rule 111
	for terminal 'YIELD': reduce using rule 111
